
w5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006db0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08006f80  08006f80  00007f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800739c  0800739c  00009110  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800739c  0800739c  0000839c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073a4  080073a4  00009110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073a4  080073a4  000083a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073a8  080073a8  000083a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  080073ac  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  20000110  080074bc  00009110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  080074bc  00009610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009110  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f57  00000000  00000000  00009140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035bd  00000000  00000000  0001a097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  0001d658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd4  00000000  00000000  0001e590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024022  00000000  00000000  0001f164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013290  00000000  00000000  00043186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d154d  00000000  00000000  00056416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127963  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044d4  00000000  00000000  001279a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  0012be7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000110 	.word	0x20000110
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006f68 	.word	0x08006f68

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000114 	.word	0x20000114
 800020c:	08006f68 	.word	0x08006f68

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	@ 0x28
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
 8000606:	4b2d      	ldr	r3, [pc, #180]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	4a2c      	ldr	r2, [pc, #176]	@ (80006bc <MX_GPIO_Init+0xd0>)
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	6313      	str	r3, [r2, #48]	@ 0x30
 8000612:	4b2a      	ldr	r3, [pc, #168]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	f003 0304 	and.w	r3, r3, #4
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	4b26      	ldr	r3, [pc, #152]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	4a25      	ldr	r2, [pc, #148]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800062c:	6313      	str	r3, [r2, #48]	@ 0x30
 800062e:	4b23      	ldr	r3, [pc, #140]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	4b1f      	ldr	r3, [pc, #124]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	4a1e      	ldr	r2, [pc, #120]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6313      	str	r3, [r2, #48]	@ 0x30
 800064a:	4b1c      	ldr	r3, [pc, #112]	@ (80006bc <MX_GPIO_Init+0xd0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <MX_GPIO_Init+0xd0>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	4a17      	ldr	r2, [pc, #92]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	6313      	str	r3, [r2, #48]	@ 0x30
 8000666:	4b15      	ldr	r3, [pc, #84]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2123      	movs	r1, #35	@ 0x23
 8000676:	4812      	ldr	r0, [pc, #72]	@ (80006c0 <MX_GPIO_Init+0xd4>)
 8000678:	f004 faac 	bl	8004bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800067c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000682:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	480c      	ldr	r0, [pc, #48]	@ (80006c4 <MX_GPIO_Init+0xd8>)
 8000694:	f004 f90a 	bl	80048ac <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin CS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|CS_Pin|LD2_Pin;
 8000698:	2323      	movs	r3, #35	@ 0x23
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	4804      	ldr	r0, [pc, #16]	@ (80006c0 <MX_GPIO_Init+0xd4>)
 80006b0:	f004 f8fc 	bl	80048ac <HAL_GPIO_Init>

}
 80006b4:	bf00      	nop
 80006b6:	3728      	adds	r7, #40	@ 0x28
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40020000 	.word	0x40020000
 80006c4:	40020800 	.word	0x40020800

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ce:	f003 ff71 	bl	80045b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d2:	f000 f8bd 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d6:	f7ff ff89 	bl	80005ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006da:	f000 fa2d 	bl	8000b38 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80006de:	f000 fa5b 	bl	8000b98 <MX_SPI2_Init>

  /* USER CODE BEGIN 2 */
  //code below disables buffering of printf and sends output immediately to USART

    setbuf(stdout, NULL);
 80006e2:	4b45      	ldr	r3, [pc, #276]	@ (80007f8 <main+0x130>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f005 fcfe 	bl	80060ec <setbuf>

    SystemClock_Config();
 80006f0:	f000 f8ae 	bl	8000850 <SystemClock_Config>

    MX_GPIO_Init();
 80006f4:	f7ff ff7a 	bl	80005ec <MX_GPIO_Init>
    MX_SPI1_Init();
 80006f8:	f000 f9de 	bl	8000ab8 <MX_SPI1_Init>
    MX_USART2_UART_Init();
 80006fc:	f000 fa1c 	bl	8000b38 <MX_USART2_UART_Init>

    printf("A Simple MQTT Client Subscription Application using W5500!\r\n");
 8000700:	483e      	ldr	r0, [pc, #248]	@ (80007fc <main+0x134>)
 8000702:	f005 fceb 	bl	80060dc <puts>

    W5500Init();
 8000706:	f003 f88d 	bl	8003824 <W5500Init>

    ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 800070a:	493d      	ldr	r1, [pc, #244]	@ (8000800 <main+0x138>)
 800070c:	2000      	movs	r0, #0
 800070e:	f003 fb25 	bl	8003d5c <ctlnetwork>

    //Configure PHY by software
    wiz_PhyConf phyconf;

    phyconf.by=PHY_CONFBY_SW;
 8000712:	2301      	movs	r3, #1
 8000714:	713b      	strb	r3, [r7, #4]
    phyconf.duplex=PHY_DUPLEX_FULL;
 8000716:	2301      	movs	r3, #1
 8000718:	71fb      	strb	r3, [r7, #7]
    phyconf.speed=PHY_SPEED_10;
 800071a:	2300      	movs	r3, #0
 800071c:	71bb      	strb	r3, [r7, #6]
    phyconf.mode=PHY_MODE_AUTONEGO;//best to go with auto-negotiation
 800071e:	2301      	movs	r3, #1
 8000720:	717b      	strb	r3, [r7, #5]

    ctlwizchip(CW_SET_PHYCONF, (void*) &phyconf);
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4619      	mov	r1, r3
 8000726:	2012      	movs	r0, #18
 8000728:	f003 fa28 	bl	8003b7c <ctlwizchip>
    //*** End Phy Configuration

    PHYStatusCheck();
 800072c:	f000 f940 	bl	80009b0 <PHYStatusCheck>
    PrintPHYConf();
 8000730:	f000 f964 	bl	80009fc <PrintPHYConf>

    //MQTT Client Part
    connect_data.willFlag = 0;
 8000734:	4b33      	ldr	r3, [pc, #204]	@ (8000804 <main+0x13c>)
 8000736:	2200      	movs	r2, #0
 8000738:	76da      	strb	r2, [r3, #27]
    connect_data.MQTTVersion = 3;
 800073a:	4b32      	ldr	r3, [pc, #200]	@ (8000804 <main+0x13c>)
 800073c:	2203      	movs	r2, #3
 800073e:	721a      	strb	r2, [r3, #8]
    connect_data.clientID.cstring = "iotencew55";
 8000740:	4b30      	ldr	r3, [pc, #192]	@ (8000804 <main+0x13c>)
 8000742:	4a31      	ldr	r2, [pc, #196]	@ (8000808 <main+0x140>)
 8000744:	60da      	str	r2, [r3, #12]
    //connect_data.username.cstring = opts.username;
    //connect_data.password.cstring = opts.password;

    connect_data.keepAliveInterval = 60;//seconds
 8000746:	4b2f      	ldr	r3, [pc, #188]	@ (8000804 <main+0x13c>)
 8000748:	223c      	movs	r2, #60	@ 0x3c
 800074a:	831a      	strh	r2, [r3, #24]
    connect_data.cleansession = 1;
 800074c:	4b2d      	ldr	r3, [pc, #180]	@ (8000804 <main+0x13c>)
 800074e:	2201      	movs	r2, #1
 8000750:	769a      	strb	r2, [r3, #26]

    NewNetwork(&network, 1);//1 is the socket number to use
 8000752:	2101      	movs	r1, #1
 8000754:	482d      	ldr	r0, [pc, #180]	@ (800080c <main+0x144>)
 8000756:	f001 ff15 	bl	8002584 <NewNetwork>
    PrintBrokerIP();
 800075a:	f000 f993 	bl	8000a84 <PrintBrokerIP>
    printf("Connecting to MQTT Broker ...");
 800075e:	482c      	ldr	r0, [pc, #176]	@ (8000810 <main+0x148>)
 8000760:	f005 fc54 	bl	800600c <iprintf>
    if(ConnectNetwork(&network, destination_ip, destination_port)!=SOCK_OK)
 8000764:	4b2b      	ldr	r3, [pc, #172]	@ (8000814 <main+0x14c>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	492b      	ldr	r1, [pc, #172]	@ (8000818 <main+0x150>)
 800076c:	4827      	ldr	r0, [pc, #156]	@ (800080c <main+0x144>)
 800076e:	f001 ff86 	bl	800267e <ConnectNetwork>
 8000772:	4603      	mov	r3, r0
 8000774:	2b01      	cmp	r3, #1
 8000776:	d004      	beq.n	8000782 <main+0xba>
    {
  	  printf("ERROR: Cannot connect with broker!\r\n");
 8000778:	4828      	ldr	r0, [pc, #160]	@ (800081c <main+0x154>)
 800077a:	f005 fcaf 	bl	80060dc <puts>
  	  //Broker (server) not reachable
  	  while(1);
 800077e:	bf00      	nop
 8000780:	e7fd      	b.n	800077e <main+0xb6>
    }

    printf("SUCCESS\r\n");
 8000782:	4827      	ldr	r0, [pc, #156]	@ (8000820 <main+0x158>)
 8000784:	f005 fcaa 	bl	80060dc <puts>

    MQTTClientInit(&mqtt_client, &network, 1000, sendbuff, 256, receivebuff, 256);
 8000788:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800078c:	9302      	str	r3, [sp, #8]
 800078e:	4b25      	ldr	r3, [pc, #148]	@ (8000824 <main+0x15c>)
 8000790:	9301      	str	r3, [sp, #4]
 8000792:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	4b23      	ldr	r3, [pc, #140]	@ (8000828 <main+0x160>)
 800079a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800079e:	491b      	ldr	r1, [pc, #108]	@ (800080c <main+0x144>)
 80007a0:	4822      	ldr	r0, [pc, #136]	@ (800082c <main+0x164>)
 80007a2:	f000 fc27 	bl	8000ff4 <MQTTClientInit>

    printf("Sending connect packet ...");
 80007a6:	4822      	ldr	r0, [pc, #136]	@ (8000830 <main+0x168>)
 80007a8:	f005 fc30 	bl	800600c <iprintf>

    if(MQTTConnect(&mqtt_client, &connect_data)!=MQTT_SUCCESS)
 80007ac:	4915      	ldr	r1, [pc, #84]	@ (8000804 <main+0x13c>)
 80007ae:	481f      	ldr	r0, [pc, #124]	@ (800082c <main+0x164>)
 80007b0:	f000 ff4a 	bl	8001648 <MQTTConnect>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d004      	beq.n	80007c4 <main+0xfc>
    {
  	  printf("ERROR!");
 80007ba:	481e      	ldr	r0, [pc, #120]	@ (8000834 <main+0x16c>)
 80007bc:	f005 fc26 	bl	800600c <iprintf>
  	  while(1);
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <main+0xf8>
    }

    printf("SUCCESS\r\n");
 80007c4:	4816      	ldr	r0, [pc, #88]	@ (8000820 <main+0x158>)
 80007c6:	f005 fc89 	bl	80060dc <puts>

    //Subscribe to temperature sensor
    MQTTSubscribe(&mqtt_client, "room/temp",QOS0 , OnTopicTemperature);
 80007ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <main+0x170>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	491b      	ldr	r1, [pc, #108]	@ (800083c <main+0x174>)
 80007d0:	4816      	ldr	r0, [pc, #88]	@ (800082c <main+0x164>)
 80007d2:	f000 ffbf 	bl	8001754 <MQTTSubscribe>
    printf("Subscribed to topic room/temp\r\n");
 80007d6:	481a      	ldr	r0, [pc, #104]	@ (8000840 <main+0x178>)
 80007d8:	f005 fc80 	bl	80060dc <puts>

    //Subscribe to humidity sensor
    MQTTSubscribe(&mqtt_client, "room/humidity",QOS0 , OnTopicHumidity);
 80007dc:	4b19      	ldr	r3, [pc, #100]	@ (8000844 <main+0x17c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	4919      	ldr	r1, [pc, #100]	@ (8000848 <main+0x180>)
 80007e2:	4812      	ldr	r0, [pc, #72]	@ (800082c <main+0x164>)
 80007e4:	f000 ffb6 	bl	8001754 <MQTTSubscribe>
    printf("Subscribed to topic room/humidity\r\n");
 80007e8:	4818      	ldr	r0, [pc, #96]	@ (800084c <main+0x184>)
 80007ea:	f005 fc77 	bl	80060dc <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Transfer conton to Paho for 250 milliseconds
	 	  MQTTYield(&mqtt_client, 250);
 80007ee:	21fa      	movs	r1, #250	@ 0xfa
 80007f0:	480e      	ldr	r0, [pc, #56]	@ (800082c <main+0x164>)
 80007f2:	f000 fee5 	bl	80015c0 <MQTTYield>
 80007f6:	e7fa      	b.n	80007ee <main+0x126>
 80007f8:	200000c0 	.word	0x200000c0
 80007fc:	08006f80 	.word	0x08006f80
 8000800:	20000000 	.word	0x20000000
 8000804:	20000020 	.word	0x20000020
 8000808:	08006fbc 	.word	0x08006fbc
 800080c:	20000228 	.word	0x20000228
 8000810:	08006fc8 	.word	0x08006fc8
 8000814:	2000001c 	.word	0x2000001c
 8000818:	20000018 	.word	0x20000018
 800081c:	08006fe8 	.word	0x08006fe8
 8000820:	0800700c 	.word	0x0800700c
 8000824:	20000338 	.word	0x20000338
 8000828:	20000238 	.word	0x20000238
 800082c:	200001cc 	.word	0x200001cc
 8000830:	08007018 	.word	0x08007018
 8000834:	08007034 	.word	0x08007034
 8000838:	08000929 	.word	0x08000929
 800083c:	0800703c 	.word	0x0800703c
 8000840:	08007048 	.word	0x08007048
 8000844:	08000945 	.word	0x08000945
 8000848:	08007068 	.word	0x08007068
 800084c:	08007078 	.word	0x08007078

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b094      	sub	sp, #80	@ 0x50
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	2234      	movs	r2, #52	@ 0x34
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f005 fdd8 	bl	8006414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	f107 0308 	add.w	r3, r7, #8
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	4b29      	ldr	r3, [pc, #164]	@ (8000920 <SystemClock_Config+0xd0>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087c:	4a28      	ldr	r2, [pc, #160]	@ (8000920 <SystemClock_Config+0xd0>)
 800087e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000882:	6413      	str	r3, [r2, #64]	@ 0x40
 8000884:	4b26      	ldr	r3, [pc, #152]	@ (8000920 <SystemClock_Config+0xd0>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000890:	2300      	movs	r3, #0
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	4b23      	ldr	r3, [pc, #140]	@ (8000924 <SystemClock_Config+0xd4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800089c:	4a21      	ldr	r2, [pc, #132]	@ (8000924 <SystemClock_Config+0xd4>)
 800089e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000924 <SystemClock_Config+0xd4>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b0:	2301      	movs	r3, #1
 80008b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ba:	2302      	movs	r3, #2
 80008bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008c4:	2304      	movs	r3, #4
 80008c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80008c8:	2360      	movs	r3, #96	@ 0x60
 80008ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4618      	mov	r0, r3
 80008de:	f004 fcdd 	bl	800529c <HAL_RCC_OscConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008e8:	f000 f950 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ec:	230f      	movs	r3, #15
 80008ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80008f0:	2303      	movs	r3, #3
 80008f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80008f4:	2380      	movs	r3, #128	@ 0x80
 80008f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	2101      	movs	r1, #1
 8000908:	4618      	mov	r0, r3
 800090a:	f004 f97d 	bl	8004c08 <HAL_RCC_ClockConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000914:	f000 f93a 	bl	8000b8c <Error_Handler>
  }
}
 8000918:	bf00      	nop
 800091a:	3750      	adds	r7, #80	@ 0x50
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800
 8000924:	40007000 	.word	0x40007000

08000928 <OnTopicTemperature>:

/* USER CODE BEGIN 4 */
void OnTopicTemperature(MessageData* msg_data)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	printf("New message on topic room/temp\r\n");
 8000930:	4803      	ldr	r0, [pc, #12]	@ (8000940 <OnTopicTemperature+0x18>)
 8000932:	f005 fbd3 	bl	80060dc <puts>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	0800709c 	.word	0x0800709c

08000944 <OnTopicHumidity>:

void OnTopicHumidity(MessageData* msg_data)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	printf("New message on topic room/humidity\r\n");
 800094c:	4803      	ldr	r0, [pc, #12]	@ (800095c <OnTopicHumidity+0x18>)
 800094e:	f005 fbc5 	bl	80060dc <puts>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	080070bc 	.word	0x080070bc

08000960 <UWriteData>:

void UWriteData(const char data)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
	while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==RESET);
 800096a:	bf00      	nop
 800096c:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <UWriteData+0x30>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000976:	2b80      	cmp	r3, #128	@ 0x80
 8000978:	d1f8      	bne.n	800096c <UWriteData+0xc>

	huart2.Instance->DR=data;
 800097a:	4b05      	ldr	r3, [pc, #20]	@ (8000990 <UWriteData+0x30>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	79fa      	ldrb	r2, [r7, #7]
 8000980:	605a      	str	r2, [r3, #4]

}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20000184 	.word	0x20000184

08000994 <__io_putchar>:

int __io_putchar(int ch)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	UWriteData(ch);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ffdd 	bl	8000960 <UWriteData>
	return ch;
 80009a6:	687b      	ldr	r3, [r7, #4]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <PHYStatusCheck>:

void PHYStatusCheck(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
	uint8_t tmp;

	do
	{
		printf("\r\nChecking Ethernet Cable Presence ...");
 80009b6:	480e      	ldr	r0, [pc, #56]	@ (80009f0 <PHYStatusCheck+0x40>)
 80009b8:	f005 fb28 	bl	800600c <iprintf>
		ctlwizchip(CW_GET_PHYLINK, (void*) &tmp);
 80009bc:	1dfb      	adds	r3, r7, #7
 80009be:	4619      	mov	r1, r3
 80009c0:	2017      	movs	r0, #23
 80009c2:	f003 f8db 	bl	8003b7c <ctlwizchip>

		if(tmp == PHY_LINK_OFF)
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d106      	bne.n	80009da <PHYStatusCheck+0x2a>
		{
			printf("NO Cable Connected!");
 80009cc:	4809      	ldr	r0, [pc, #36]	@ (80009f4 <PHYStatusCheck+0x44>)
 80009ce:	f005 fb1d 	bl	800600c <iprintf>
			HAL_Delay(1500);
 80009d2:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80009d6:	f003 fe5f 	bl	8004698 <HAL_Delay>
		}
	}while(tmp == PHY_LINK_OFF);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d0ea      	beq.n	80009b6 <PHYStatusCheck+0x6>

	printf("Good! Cable got connected!");
 80009e0:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <PHYStatusCheck+0x48>)
 80009e2:	f005 fb13 	bl	800600c <iprintf>

}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	080070e0 	.word	0x080070e0
 80009f4:	08007108 	.word	0x08007108
 80009f8:	0800711c 	.word	0x0800711c

080009fc <PrintPHYConf>:

void PrintPHYConf(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
	wiz_PhyConf phyconf;

	ctlwizchip(CW_GET_PHYCONF, (void*) &phyconf);
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	4619      	mov	r1, r3
 8000a06:	2013      	movs	r0, #19
 8000a08:	f003 f8b8 	bl	8003b7c <ctlwizchip>

	if(phyconf.by==PHY_CONFBY_HW)
 8000a0c:	793b      	ldrb	r3, [r7, #4]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d103      	bne.n	8000a1a <PrintPHYConf+0x1e>
	{
		printf("\r\nPHY Configured by Hardware Pins");
 8000a12:	4814      	ldr	r0, [pc, #80]	@ (8000a64 <PrintPHYConf+0x68>)
 8000a14:	f005 fafa 	bl	800600c <iprintf>
 8000a18:	e002      	b.n	8000a20 <PrintPHYConf+0x24>
	}
	else
	{
		printf("\r\nPHY Configured by Registers");
 8000a1a:	4813      	ldr	r0, [pc, #76]	@ (8000a68 <PrintPHYConf+0x6c>)
 8000a1c:	f005 faf6 	bl	800600c <iprintf>
	}

	if(phyconf.mode==PHY_MODE_AUTONEGO)
 8000a20:	797b      	ldrb	r3, [r7, #5]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d103      	bne.n	8000a2e <PrintPHYConf+0x32>
	{
		printf("\r\nAutonegotiation Enabled");
 8000a26:	4811      	ldr	r0, [pc, #68]	@ (8000a6c <PrintPHYConf+0x70>)
 8000a28:	f005 faf0 	bl	800600c <iprintf>
 8000a2c:	e002      	b.n	8000a34 <PrintPHYConf+0x38>
	}
	else
	{
		printf("\r\nAutonegotiation NOT Enabled");
 8000a2e:	4810      	ldr	r0, [pc, #64]	@ (8000a70 <PrintPHYConf+0x74>)
 8000a30:	f005 faec 	bl	800600c <iprintf>
	}

	if(phyconf.duplex==PHY_DUPLEX_FULL)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d103      	bne.n	8000a42 <PrintPHYConf+0x46>
	{
		printf("\r\nDuplex Mode: Full");
 8000a3a:	480e      	ldr	r0, [pc, #56]	@ (8000a74 <PrintPHYConf+0x78>)
 8000a3c:	f005 fae6 	bl	800600c <iprintf>
 8000a40:	e002      	b.n	8000a48 <PrintPHYConf+0x4c>
	}
	else
	{
		printf("\r\nDuplex Mode: Half");
 8000a42:	480d      	ldr	r0, [pc, #52]	@ (8000a78 <PrintPHYConf+0x7c>)
 8000a44:	f005 fae2 	bl	800600c <iprintf>
	}

	if(phyconf.speed==PHY_SPEED_10)
 8000a48:	79bb      	ldrb	r3, [r7, #6]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d103      	bne.n	8000a56 <PrintPHYConf+0x5a>
	{
		printf("\r\nSpeed: 10Mbps");
 8000a4e:	480b      	ldr	r0, [pc, #44]	@ (8000a7c <PrintPHYConf+0x80>)
 8000a50:	f005 fadc 	bl	800600c <iprintf>
	}
	else
	{
		printf("\r\nSpeed: 100Mbps");
	}
}
 8000a54:	e002      	b.n	8000a5c <PrintPHYConf+0x60>
		printf("\r\nSpeed: 100Mbps");
 8000a56:	480a      	ldr	r0, [pc, #40]	@ (8000a80 <PrintPHYConf+0x84>)
 8000a58:	f005 fad8 	bl	800600c <iprintf>
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	08007138 	.word	0x08007138
 8000a68:	0800715c 	.word	0x0800715c
 8000a6c:	0800717c 	.word	0x0800717c
 8000a70:	08007198 	.word	0x08007198
 8000a74:	080071b8 	.word	0x080071b8
 8000a78:	080071cc 	.word	0x080071cc
 8000a7c:	080071e0 	.word	0x080071e0
 8000a80:	080071f0 	.word	0x080071f0

08000a84 <PrintBrokerIP>:

static void PrintBrokerIP(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af02      	add	r7, sp, #8
	printf("Broker IP: %d.%d.%d.%d\r\n",destination_ip[0],destination_ip[1],destination_ip[2],destination_ip[3]);
 8000a8a:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <PrintBrokerIP+0x2c>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4b07      	ldr	r3, [pc, #28]	@ (8000ab0 <PrintBrokerIP+0x2c>)
 8000a92:	785b      	ldrb	r3, [r3, #1]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <PrintBrokerIP+0x2c>)
 8000a98:	789b      	ldrb	r3, [r3, #2]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	4b04      	ldr	r3, [pc, #16]	@ (8000ab0 <PrintBrokerIP+0x2c>)
 8000a9e:	78db      	ldrb	r3, [r3, #3]
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	4803      	ldr	r0, [pc, #12]	@ (8000ab4 <PrintBrokerIP+0x30>)
 8000aa6:	f005 fab1 	bl	800600c <iprintf>
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000018 	.word	0x20000018
 8000ab4:	08007204 	.word	0x08007204

08000ab8 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi2.Instance = SPI1;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <MX_SPI1_Init+0x74>)
 8000abe:	4a1c      	ldr	r2, [pc, #112]	@ (8000b30 <MX_SPI1_Init+0x78>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <MX_SPI1_Init+0x74>)
 8000ac4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ac8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <MX_SPI1_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad0:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <MX_SPI1_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad6:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <MX_SPI1_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000adc:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <MX_SPI1_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ae2:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <MX_SPI1_Init+0x74>)
 8000ae4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ae8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000aea:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <MX_SPI1_Init+0x74>)
 8000aec:	2208      	movs	r2, #8
 8000aee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <MX_SPI1_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b2c <MX_SPI1_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000afc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <MX_SPI1_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b02:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <MX_SPI1_Init+0x74>)
 8000b04:	2207      	movs	r2, #7
 8000b06:	62da      	str	r2, [r3, #44]	@ 0x2c
  //hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  //hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLED;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b08:	480a      	ldr	r0, [pc, #40]	@ (8000b34 <MX_SPI1_Init+0x7c>)
 8000b0a:	f004 fe65 	bl	80057d8 <HAL_SPI_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b14:	f000 f83a 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <MX_SPI1_Init+0x7c>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	4b05      	ldr	r3, [pc, #20]	@ (8000b34 <MX_SPI1_Init+0x7c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b26:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000438 	.word	0x20000438
 8000b30:	40013000 	.word	0x40013000
 8000b34:	2000012c 	.word	0x2000012c

08000b38 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	@ (8000b88 <MX_USART2_UART_Init+0x50>)
 8000b40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000b42:	4b10      	ldr	r3, [pc, #64]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b44:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000b48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b68:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  //huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLED;
  //huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b70:	f004 febb 	bl	80058ea <HAL_UART_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b7a:	f000 f807 	bl	8000b8c <Error_Handler>
  }

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000184 	.word	0x20000184
 8000b88:	40004400 	.word	0x40004400

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <Error_Handler+0x8>

08000b98 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	@ (8000bfc <MX_SPI2_Init+0x64>)
 8000b9e:	4a18      	ldr	r2, [pc, #96]	@ (8000c00 <MX_SPI2_Init+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	@ (8000bfc <MX_SPI2_Init+0x64>)
 8000ba4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ba8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000baa:	4b14      	ldr	r3, [pc, #80]	@ (8000bfc <MX_SPI2_Init+0x64>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <MX_SPI2_Init+0x64>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <MX_SPI2_Init+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <MX_SPI2_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <MX_SPI2_Init+0x64>)
 8000bc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bc8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000bca:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <MX_SPI2_Init+0x64>)
 8000bcc:	2208      	movs	r2, #8
 8000bce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <MX_SPI2_Init+0x64>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <MX_SPI2_Init+0x64>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bdc:	4b07      	ldr	r3, [pc, #28]	@ (8000bfc <MX_SPI2_Init+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000be2:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <MX_SPI2_Init+0x64>)
 8000be4:	220a      	movs	r2, #10
 8000be6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000be8:	4804      	ldr	r0, [pc, #16]	@ (8000bfc <MX_SPI2_Init+0x64>)
 8000bea:	f004 fdf5 	bl	80057d8 <HAL_SPI_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000bf4:	f7ff ffca 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000438 	.word	0x20000438
 8000c00:	40003800 	.word	0x40003800

08000c04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	@ 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a30      	ldr	r2, [pc, #192]	@ (8000ce4 <HAL_SPI_MspInit+0xe0>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d15a      	bne.n	8000cdc <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce8 <HAL_SPI_MspInit+0xe4>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	4a2e      	ldr	r2, [pc, #184]	@ (8000ce8 <HAL_SPI_MspInit+0xe4>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c36:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce8 <HAL_SPI_MspInit+0xe4>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b28      	ldr	r3, [pc, #160]	@ (8000ce8 <HAL_SPI_MspInit+0xe4>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	4a27      	ldr	r2, [pc, #156]	@ (8000ce8 <HAL_SPI_MspInit+0xe4>)
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c52:	4b25      	ldr	r3, [pc, #148]	@ (8000ce8 <HAL_SPI_MspInit+0xe4>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	4b21      	ldr	r3, [pc, #132]	@ (8000ce8 <HAL_SPI_MspInit+0xe4>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	4a20      	ldr	r2, [pc, #128]	@ (8000ce8 <HAL_SPI_MspInit+0xe4>)
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <HAL_SPI_MspInit+0xe4>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c86:	2303      	movs	r3, #3
 8000c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	4815      	ldr	r0, [pc, #84]	@ (8000cec <HAL_SPI_MspInit+0xe8>)
 8000c96:	f003 fe09 	bl	80048ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c9a:	2304      	movs	r3, #4
 8000c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000caa:	2305      	movs	r3, #5
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480d      	ldr	r0, [pc, #52]	@ (8000cec <HAL_SPI_MspInit+0xe8>)
 8000cb6:	f003 fdf9 	bl	80048ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ccc:	2305      	movs	r3, #5
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4806      	ldr	r0, [pc, #24]	@ (8000cf0 <HAL_SPI_MspInit+0xec>)
 8000cd8:	f003 fde8 	bl	80048ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000cdc:	bf00      	nop
 8000cde:	3728      	adds	r7, #40	@ 0x28
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40003800 	.word	0x40003800
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020800 	.word	0x40020800
 8000cf0:	40020400 	.word	0x40020400

08000cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d02:	4a0f      	ldr	r2, [pc, #60]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	4b09      	ldr	r3, [pc, #36]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1e:	4a08      	ldr	r2, [pc, #32]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d26:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <HAL_MspInit+0x4c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d32:	2007      	movs	r0, #7
 8000d34:	f003 fd86 	bl	8004844 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <NMI_Handler+0x4>

08000d4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <HardFault_Handler+0x4>

08000d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <MemManage_Handler+0x4>

08000d5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <BusFault_Handler+0x4>

08000d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <UsageFault_Handler+0x4>

08000d6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9a:	f003 fc5d 	bl	8004658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b086      	sub	sp, #24
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	60f8      	str	r0, [r7, #12]
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	e00a      	b.n	8000dca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000db4:	f3af 8000 	nop.w
 8000db8:	4601      	mov	r1, r0
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	1c5a      	adds	r2, r3, #1
 8000dbe:	60ba      	str	r2, [r7, #8]
 8000dc0:	b2ca      	uxtb	r2, r1
 8000dc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	dbf0      	blt.n	8000db4 <_read+0x12>
  }

  return len;
 8000dd2:	687b      	ldr	r3, [r7, #4]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	e009      	b.n	8000e02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	1c5a      	adds	r2, r3, #1
 8000df2:	60ba      	str	r2, [r7, #8]
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fdcc 	bl	8000994 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	dbf1      	blt.n	8000dee <_write+0x12>
  }
  return len;
 8000e0a:	687b      	ldr	r3, [r7, #4]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <_close>:

int _close(int file)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e3c:	605a      	str	r2, [r3, #4]
  return 0;
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <_isatty>:

int _isatty(int file)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e54:	2301      	movs	r3, #1
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b085      	sub	sp, #20
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	60f8      	str	r0, [r7, #12]
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e6e:	2300      	movs	r3, #0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e84:	4a14      	ldr	r2, [pc, #80]	@ (8000ed8 <_sbrk+0x5c>)
 8000e86:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <_sbrk+0x60>)
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e90:	4b13      	ldr	r3, [pc, #76]	@ (8000ee0 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d102      	bne.n	8000e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e98:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <_sbrk+0x64>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ee4 <_sbrk+0x68>)
 8000e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d207      	bcs.n	8000ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eac:	f005 fb12 	bl	80064d4 <__errno>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	e009      	b.n	8000ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec2:	4b07      	ldr	r3, [pc, #28]	@ (8000ee0 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	4a05      	ldr	r2, [pc, #20]	@ (8000ee0 <_sbrk+0x64>)
 8000ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ece:	68fb      	ldr	r3, [r7, #12]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20020000 	.word	0x20020000
 8000edc:	00000400 	.word	0x00000400
 8000ee0:	20000490 	.word	0x20000490
 8000ee4:	20000610 	.word	0x20000610

08000ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <SystemInit+0x20>)
 8000eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ef2:	4a05      	ldr	r2, [pc, #20]	@ (8000f08 <SystemInit+0x20>)
 8000ef4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ef8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	601a      	str	r2, [r3, #0]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d003      	beq.n	8000f4c <getNextPacketId+0x1c>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	e000      	b.n	8000f4e <getNextPacketId+0x1e>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 8000f62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f64:	b087      	sub	sp, #28
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	60f8      	str	r0, [r7, #12]
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	617b      	str	r3, [r7, #20]
        sent = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 8000f78:	e018      	b.n	8000fac <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f7e:	689c      	ldr	r4, [r3, #8]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6d1d      	ldr	r5, [r3, #80]	@ 0x50
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	18d6      	adds	r6, r2, r3
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f001 fae3 	bl	8002558 <TimerLeftMS>
 8000f92:	4603      	mov	r3, r0
 8000f94:	68ba      	ldr	r2, [r7, #8]
 8000f96:	4631      	mov	r1, r6
 8000f98:	4628      	mov	r0, r5
 8000f9a:	47a0      	blx	r4
 8000f9c:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0e      	blt.n	8000fc2 <sendPacket+0x60>
            break;
        sent += rc;
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	4413      	add	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	da07      	bge.n	8000fc4 <sendPacket+0x62>
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f001 fa8d 	bl	80024d4 <TimerIsExpired>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0dc      	beq.n	8000f7a <sendPacket+0x18>
 8000fc0:	e000      	b.n	8000fc4 <sendPacket+0x62>
            break;
 8000fc2:	bf00      	nop
    }
    if (sent == length)
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d10b      	bne.n	8000fe4 <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4610      	mov	r0, r2
 8000fda:	f001 faa5 	bl	8002528 <TimerCountdown>
        rc = MQTT_SUCCESS;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	e002      	b.n	8000fea <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe8:	617b      	str	r3, [r7, #20]
    return rc;
 8000fea:	697b      	ldr	r3, [r7, #20]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	371c      	adds	r7, #28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ff4 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	68ba      	ldr	r2, [r7, #8]
 8001006:	651a      	str	r2, [r3, #80]	@ 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	e009      	b.n	8001022 <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	3304      	adds	r3, #4
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	4413      	add	r3, r2
 8001018:	2200      	movs	r2, #0
 800101a:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3301      	adds	r3, #1
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	2b04      	cmp	r3, #4
 8001026:	ddf2      	ble.n	800100e <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6a3a      	ldr	r2, [r7, #32]
 8001038:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800103e:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001044:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2200      	movs	r2, #0
 8001050:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2200      	movs	r2, #0
 8001056:	64da      	str	r2, [r3, #76]	@ 0x4c
	c->next_packetid = 1;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2201      	movs	r2, #1
 800105c:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3354      	adds	r3, #84	@ 0x54
 8001062:	4618      	mov	r0, r3
 8001064:	f001 fa28 	bl	80024b8 <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 8001068:	bf00      	nop
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b08b      	sub	sp, #44	@ 0x2c
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 800107c:	2301      	movs	r3, #1
 800107e:	627b      	str	r3, [r7, #36]	@ 0x24
    int len = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8001084:	2304      	movs	r3, #4
 8001086:	61fb      	str	r3, [r7, #28]

    *value = 0;
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8001094:	6a3b      	ldr	r3, [r7, #32]
 8001096:	3301      	adds	r3, #1
 8001098:	623b      	str	r3, [r7, #32]
 800109a:	6a3a      	ldr	r2, [r7, #32]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	429a      	cmp	r2, r3
 80010a0:	dd03      	ble.n	80010aa <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	61bb      	str	r3, [r7, #24]
            goto exit;
 80010a8:	e021      	b.n	80010ee <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010ae:	685c      	ldr	r4, [r3, #4]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80010b4:	f107 0117 	add.w	r1, r7, #23
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	47a0      	blx	r4
 80010be:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d112      	bne.n	80010ec <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
 80010cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80010d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80010d2:	fb01 f303 	mul.w	r3, r1, r3
 80010d6:	441a      	add	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 80010dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010de:	01db      	lsls	r3, r3, #7
 80010e0:	627b      	str	r3, [r7, #36]	@ 0x24
    } while ((i & 128) != 0);
 80010e2:	7dfb      	ldrb	r3, [r7, #23]
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	dbd1      	blt.n	800108e <decodePacket+0x1e>
exit:
 80010ea:	e000      	b.n	80010ee <decodePacket+0x7e>
            goto exit;
 80010ec:	bf00      	nop
    return len;
 80010ee:	6a3b      	ldr	r3, [r7, #32]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	372c      	adds	r7, #44	@ 0x2c
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd90      	pop	{r4, r7, pc}

080010f8 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 80010f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010fa:	b089      	sub	sp, #36	@ 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
    int len = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001118:	685c      	ldr	r4, [r3, #4]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6d1d      	ldr	r5, [r3, #80]	@ 0x50
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	695e      	ldr	r6, [r3, #20]
 8001122:	68b8      	ldr	r0, [r7, #8]
 8001124:	f001 fa18 	bl	8002558 <TimerLeftMS>
 8001128:	4603      	mov	r3, r0
 800112a:	2201      	movs	r2, #1
 800112c:	4631      	mov	r1, r6
 800112e:	4628      	mov	r0, r5
 8001130:	47a0      	blx	r4
 8001132:	4603      	mov	r3, r0
 8001134:	2b01      	cmp	r3, #1
 8001136:	d13b      	bne.n	80011b0 <readPacket+0xb8>
        goto exit;

    len = 1;
 8001138:	2301      	movs	r3, #1
 800113a:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 800113c:	68b8      	ldr	r0, [r7, #8]
 800113e:	f001 fa0b 	bl	8002558 <TimerLeftMS>
 8001142:	4602      	mov	r2, r0
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	4619      	mov	r1, r3
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f7ff ff90 	bl	8001070 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	3301      	adds	r3, #1
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4611      	mov	r1, r2
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fe49 	bl	8001df2 <MQTTPacket_encode>
 8001160:	4602      	mov	r2, r0
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	4413      	add	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	2b00      	cmp	r3, #0
 800116c:	dd16      	ble.n	800119c <readPacket+0xa4>
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001172:	685c      	ldr	r4, [r3, #4]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6d1d      	ldr	r5, [r3, #80]	@ 0x50
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	695a      	ldr	r2, [r3, #20]
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	18d6      	adds	r6, r2, r3
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	68b8      	ldr	r0, [r7, #8]
 8001186:	f001 f9e7 	bl	8002558 <TimerLeftMS>
 800118a:	4603      	mov	r3, r0
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	4631      	mov	r1, r6
 8001190:	4628      	mov	r0, r5
 8001192:	47a0      	blx	r4
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	429a      	cmp	r2, r3
 800119a:	d10b      	bne.n	80011b4 <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 80011a4:	7d3b      	ldrb	r3, [r7, #20]
 80011a6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	61fb      	str	r3, [r7, #28]
 80011ae:	e002      	b.n	80011b6 <readPacket+0xbe>
        goto exit;
 80011b0:	bf00      	nop
 80011b2:	e000      	b.n	80011b6 <readPacket+0xbe>
        goto exit;
 80011b4:	bf00      	nop
exit:
    return rc;
 80011b6:	69fb      	ldr	r3, [r7, #28]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3724      	adds	r7, #36	@ 0x24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011c0 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b087      	sub	sp, #28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	461a      	mov	r2, r3
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4413      	add	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 80011e0:	e039      	b.n	8001256 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b2f      	cmp	r3, #47	@ 0x2f
 80011e8:	d103      	bne.n	80011f2 <isTopicMatched+0x32>
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b2f      	cmp	r3, #47	@ 0x2f
 80011f0:	d13a      	bne.n	8001268 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b2b      	cmp	r3, #43	@ 0x2b
 80011f8:	d009      	beq.n	800120e <isTopicMatched+0x4e>
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b23      	cmp	r3, #35	@ 0x23
 8001200:	d005      	beq.n	800120e <isTopicMatched+0x4e>
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	781a      	ldrb	r2, [r3, #0]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	d12e      	bne.n	800126c <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b2b      	cmp	r3, #43	@ 0x2b
 8001214:	d112      	bne.n	800123c <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	3301      	adds	r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800121c:	e005      	b.n	800122a <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	3301      	adds	r3, #1
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	3301      	adds	r3, #1
 8001228:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	429a      	cmp	r2, r3
 8001230:	d20b      	bcs.n	800124a <isTopicMatched+0x8a>
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b2f      	cmp	r3, #47	@ 0x2f
 8001238:	d1f1      	bne.n	800121e <isTopicMatched+0x5e>
 800123a:	e006      	b.n	800124a <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b23      	cmp	r3, #35	@ 0x23
 8001242:	d102      	bne.n	800124a <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	3b01      	subs	r3, #1
 8001248:	613b      	str	r3, [r7, #16]
        curf++;
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3301      	adds	r3, #1
 800124e:	617b      	str	r3, [r7, #20]
        curn++;
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	3301      	adds	r3, #1
 8001254:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d007      	beq.n	800126e <isTopicMatched+0xae>
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	429a      	cmp	r2, r3
 8001264:	d3bd      	bcc.n	80011e2 <isTopicMatched+0x22>
 8001266:	e002      	b.n	800126e <isTopicMatched+0xae>
            break;
 8001268:	bf00      	nop
 800126a:	e000      	b.n	800126e <isTopicMatched+0xae>
            break;
 800126c:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	429a      	cmp	r2, r3
 8001274:	d105      	bne.n	8001282 <isTopicMatched+0xc2>
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <isTopicMatched+0xc2>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <isTopicMatched+0xc4>
 8001282:	2300      	movs	r3, #0
 8001284:	b2db      	uxtb	r3, r3
}
 8001286:	4618      	mov	r0, r3
 8001288:	371c      	adds	r7, #28
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b08a      	sub	sp, #40	@ 0x28
 8001296:	af00      	add	r7, sp, #0
 8001298:	60f8      	str	r0, [r7, #12]
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80012a8:	e03f      	b.n	800132a <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ae:	3304      	adds	r3, #4
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	4413      	add	r3, r2
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d034      	beq.n	8001324 <deliverMessage+0x92>
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012be:	3304      	adds	r3, #4
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	4413      	add	r3, r2
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	4619      	mov	r1, r3
 80012c8:	68b8      	ldr	r0, [r7, #8]
 80012ca:	f000 ff61 	bl	8002190 <MQTTPacket_equals>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d10c      	bne.n	80012ee <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d8:	3304      	adds	r3, #4
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	4413      	add	r3, r2
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff6c 	bl	80011c0 <isTopicMatched>
 80012e8:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d01a      	beq.n	8001324 <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f2:	3304      	adds	r3, #4
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	4413      	add	r3, r2
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d012      	beq.n	8001324 <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 80012fe:	f107 0318 	add.w	r3, r7, #24
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fe00 	bl	8000f0c <NewMessageData>
                c->messageHandlers[i].fp(&md);
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001310:	3304      	adds	r3, #4
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4413      	add	r3, r2
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f107 0218 	add.w	r2, r7, #24
 800131c:	4610      	mov	r0, r2
 800131e:	4798      	blx	r3
                rc = MQTT_SUCCESS;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8001324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001326:	3301      	adds	r3, #1
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
 800132a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132c:	2b04      	cmp	r3, #4
 800132e:	ddbc      	ble.n	80012aa <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001336:	d112      	bne.n	800135e <deliverMessage+0xcc>
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00e      	beq.n	800135e <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	68b9      	ldr	r1, [r7, #8]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fddf 	bl	8000f0c <NewMessageData>
        c->defaultMessageHandler(&md);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	f107 0210 	add.w	r2, r7, #16
 8001356:	4610      	mov	r0, r2
 8001358:	4798      	blx	r3
        rc = MQTT_SUCCESS;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
    }

    return rc;
 800135e:	6a3b      	ldr	r3, [r7, #32]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3728      	adds	r7, #40	@ 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <keepalive>:


int keepalive(MQTTClient* c)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8001370:	f04f 33ff 	mov.w	r3, #4294967295
 8001374:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d102      	bne.n	8001384 <keepalive+0x1c>
    {
        rc = MQTT_SUCCESS;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
        goto exit;
 8001382:	e033      	b.n	80013ec <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3354      	adds	r3, #84	@ 0x54
 8001388:	4618      	mov	r0, r3
 800138a:	f001 f8a3 	bl	80024d4 <TimerIsExpired>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d02a      	beq.n	80013ea <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7f1b      	ldrb	r3, [r3, #28]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d126      	bne.n	80013ea <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 800139c:	f107 0308 	add.w	r3, r7, #8
 80013a0:	4618      	mov	r0, r3
 80013a2:	f001 f889 	bl	80024b8 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 f8a6 	bl	8002500 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691a      	ldr	r2, [r3, #16]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	4619      	mov	r1, r3
 80013be:	4610      	mov	r0, r2
 80013c0:	f000 fc4b 	bl	8001c5a <MQTTSerialize_pingreq>
 80013c4:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQTT_SUCCESS) // send the ping packet
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	dd0f      	ble.n	80013ec <keepalive+0x84>
 80013cc:	f107 0308 	add.w	r3, r7, #8
 80013d0:	461a      	mov	r2, r3
 80013d2:	6939      	ldr	r1, [r7, #16]
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fdc4 	bl	8000f62 <sendPacket>
 80013da:	6178      	str	r0, [r7, #20]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d104      	bne.n	80013ec <keepalive+0x84>
                c->ping_outstanding = 1;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	771a      	strb	r2, [r3, #28]
 80013e8:	e000      	b.n	80013ec <keepalive+0x84>
        }
    }

exit:
 80013ea:	bf00      	nop
    return rc;
 80013ec:	697b      	ldr	r3, [r7, #20]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	b095      	sub	sp, #84	@ 0x54
 80013fc:	af06      	add	r7, sp, #24
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 8001402:	6839      	ldr	r1, [r7, #0]
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff fe77 	bl	80010f8 <readPacket>
 800140a:	4603      	mov	r3, r0
 800140c:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    int len = 0,
 800140e:	2300      	movs	r3, #0
 8001410:	637b      	str	r3, [r7, #52]	@ 0x34
        rc = MQTT_SUCCESS;
 8001412:	2300      	movs	r3, #0
 8001414:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (packet_type)
 8001416:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001418:	3b02      	subs	r3, #2
 800141a:	2b0b      	cmp	r3, #11
 800141c:	f200 80c0 	bhi.w	80015a0 <cycle+0x1a8>
 8001420:	a201      	add	r2, pc, #4	@ (adr r2, 8001428 <cycle+0x30>)
 8001422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001426:	bf00      	nop
 8001428:	080015a1 	.word	0x080015a1
 800142c:	08001459 	.word	0x08001459
 8001430:	080015a1 	.word	0x080015a1
 8001434:	08001521 	.word	0x08001521
 8001438:	080015a1 	.word	0x080015a1
 800143c:	080015a1 	.word	0x080015a1
 8001440:	080015a1 	.word	0x080015a1
 8001444:	080015a1 	.word	0x080015a1
 8001448:	080015a1 	.word	0x080015a1
 800144c:	080015a1 	.word	0x080015a1
 8001450:	080015a1 	.word	0x080015a1
 8001454:	08001593 	.word	0x08001593
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8001460:	4616      	mov	r6, r2
 8001462:	f107 0210 	add.w	r2, r7, #16
 8001466:	1d15      	adds	r5, r2, #4
 8001468:	f107 0210 	add.w	r2, r7, #16
 800146c:	1c54      	adds	r4, r2, #1
 800146e:	f107 010c 	add.w	r1, r7, #12
 8001472:	f107 0210 	add.w	r2, r7, #16
 8001476:	1c90      	adds	r0, r2, #2
 8001478:	9604      	str	r6, [sp, #16]
 800147a:	9303      	str	r3, [sp, #12]
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	330c      	adds	r3, #12
 8001482:	9302      	str	r3, [sp, #8]
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	3308      	adds	r3, #8
 800148a:	9301      	str	r3, [sp, #4]
 800148c:	f107 0320 	add.w	r3, r7, #32
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	462b      	mov	r3, r5
 8001494:	4622      	mov	r2, r4
 8001496:	f000 fbef 	bl	8001c78 <MQTTDeserialize_publish>
 800149a:	4603      	mov	r3, r0
 800149c:	2b01      	cmp	r3, #1
 800149e:	f040 8083 	bne.w	80015a8 <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 80014a8:	f107 0210 	add.w	r2, r7, #16
 80014ac:	f107 0320 	add.w	r3, r7, #32
 80014b0:	4619      	mov	r1, r3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff feed 	bl	8001292 <deliverMessage>
            if (msg.qos != QOS0)
 80014b8:	7c3b      	ldrb	r3, [r7, #16]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d06d      	beq.n	800159a <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 80014be:	7c3b      	ldrb	r3, [r7, #16]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d10c      	bne.n	80014de <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6918      	ldr	r0, [r3, #16]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	4619      	mov	r1, r3
 80014ce:	8abb      	ldrh	r3, [r7, #20]
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	2300      	movs	r3, #0
 80014d4:	2204      	movs	r2, #4
 80014d6:	f000 fe92 	bl	80021fe <MQTTSerialize_ack>
 80014da:	6378      	str	r0, [r7, #52]	@ 0x34
 80014dc:	e00e      	b.n	80014fc <cycle+0x104>
                else if (msg.qos == QOS2)
 80014de:	7c3b      	ldrb	r3, [r7, #16]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d10b      	bne.n	80014fc <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6918      	ldr	r0, [r3, #16]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	4619      	mov	r1, r3
 80014ee:	8abb      	ldrh	r3, [r7, #20]
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	2300      	movs	r3, #0
 80014f4:	2205      	movs	r2, #5
 80014f6:	f000 fe82 	bl	80021fe <MQTTSerialize_ack>
 80014fa:	6378      	str	r0, [r7, #52]	@ 0x34
                if (len <= 0)
 80014fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014fe:	2b00      	cmp	r3, #0
 8001500:	dc03      	bgt.n	800150a <cycle+0x112>
                    rc = FAILURE;
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	633b      	str	r3, [r7, #48]	@ 0x30
 8001508:	e005      	b.n	8001516 <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff fd27 	bl	8000f62 <sendPacket>
 8001514:	6338      	str	r0, [r7, #48]	@ 0x30
                if (rc == FAILURE)
 8001516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151c:	d13d      	bne.n	800159a <cycle+0x1a2>
                    goto exit; // there was a problem
 800151e:	e044      	b.n	80015aa <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	695c      	ldr	r4, [r3, #20]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	f107 020a 	add.w	r2, r7, #10
 800152c:	f107 0109 	add.w	r1, r7, #9
 8001530:	f107 0008 	add.w	r0, r7, #8
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	4623      	mov	r3, r4
 8001538:	f000 fc10 	bl	8001d5c <MQTTDeserialize_ack>
 800153c:	4603      	mov	r3, r0
 800153e:	2b01      	cmp	r3, #1
 8001540:	d003      	beq.n	800154a <cycle+0x152>
                rc = FAILURE;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	633b      	str	r3, [r7, #48]	@ 0x30
 8001548:	e01e      	b.n	8001588 <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6918      	ldr	r0, [r3, #16]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	4619      	mov	r1, r3
 8001554:	897b      	ldrh	r3, [r7, #10]
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	2300      	movs	r3, #0
 800155a:	2206      	movs	r2, #6
 800155c:	f000 fe4f 	bl	80021fe <MQTTSerialize_ack>
 8001560:	6378      	str	r0, [r7, #52]	@ 0x34
 8001562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001564:	2b00      	cmp	r3, #0
 8001566:	dc03      	bgt.n	8001570 <cycle+0x178>
                rc = FAILURE;
 8001568:	f04f 33ff 	mov.w	r3, #4294967295
 800156c:	633b      	str	r3, [r7, #48]	@ 0x30
 800156e:	e00b      	b.n	8001588 <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != MQTT_SUCCESS) // send the PUBREL packet
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff fcf4 	bl	8000f62 <sendPacket>
 800157a:	6338      	str	r0, [r7, #48]	@ 0x30
 800157c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800157e:	2b00      	cmp	r3, #0
 8001580:	d002      	beq.n	8001588 <cycle+0x190>
                rc = FAILURE; // there was a problem
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	633b      	str	r3, [r7, #48]	@ 0x30
            if (rc == FAILURE)
 8001588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800158a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158e:	d106      	bne.n	800159e <cycle+0x1a6>
                goto exit; // there was a problem
 8001590:	e00b      	b.n	80015aa <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	771a      	strb	r2, [r3, #28]
            break;
 8001598:	e002      	b.n	80015a0 <cycle+0x1a8>
            break;
 800159a:	bf00      	nop
 800159c:	e000      	b.n	80015a0 <cycle+0x1a8>
            break;
 800159e:	bf00      	nop
    }
    keepalive(c);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff fee1 	bl	8001368 <keepalive>
 80015a6:	e000      	b.n	80015aa <cycle+0x1b2>
                goto exit;
 80015a8:	bf00      	nop
exit:
    if (rc == MQTT_SUCCESS)
 80015aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <cycle+0x1bc>
        rc = packet_type;
 80015b0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80015b2:	633b      	str	r3, [r7, #48]	@ 0x30
    return rc;
 80015b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	373c      	adds	r7, #60	@ 0x3c
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015be:	bf00      	nop

080015c0 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
    int rc = MQTT_SUCCESS;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 ff70 	bl	80024b8 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 ff8d 	bl	8002500 <TimerCountdownMS>

    if (cycle(c, &timer) == FAILURE)
 80015e6:	f107 030c 	add.w	r3, r7, #12
 80015ea:	4619      	mov	r1, r3
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ff03 	bl	80013f8 <cycle>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f8:	d102      	bne.n	8001600 <MQTTYield+0x40>
    {
        rc = FAILURE;
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
 80015fe:	617b      	str	r3, [r7, #20]
    }

    return rc;
 8001600:	697b      	ldr	r3, [r7, #20]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	60f8      	str	r0, [r7, #12]
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 ff59 	bl	80024d4 <TimerIsExpired>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d109      	bne.n	800163c <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f7ff fee4 	bl	80013f8 <cycle>
 8001630:	6178      	str	r0, [r7, #20]
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	429a      	cmp	r2, r3
 8001638:	d1f0      	bne.n	800161c <waitfor+0x12>
 800163a:	e000      	b.n	800163e <waitfor+0x34>
            break; // we timed out
 800163c:	bf00      	nop

    return rc;
 800163e:	697b      	ldr	r3, [r7, #20]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b09e      	sub	sp, #120	@ 0x78
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	677b      	str	r3, [r7, #116]	@ 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8001658:	4a3d      	ldr	r2, [pc, #244]	@ (8001750 <MQTTConnect+0x108>)
 800165a:	f107 0310 	add.w	r3, r7, #16
 800165e:	4611      	mov	r1, r2
 8001660:	2258      	movs	r2, #88	@ 0x58
 8001662:	4618      	mov	r0, r3
 8001664:	f004 ff63 	bl	800652e <memcpy>
    int len = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	673b      	str	r3, [r7, #112]	@ 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d15d      	bne.n	8001730 <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 8001674:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001678:	4618      	mov	r0, r3
 800167a:	f000 ff1d 	bl	80024b8 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f000 ff39 	bl	8002500 <TimerCountdownMS>

    if (options == 0)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	8b1b      	ldrh	r3, [r3, #24]
 800169e:	461a      	mov	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	4619      	mov	r1, r3
 80016b0:	4610      	mov	r0, r2
 80016b2:	f000 ff39 	bl	8002528 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6918      	ldr	r0, [r3, #16]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f000 f951 	bl	8001968 <MQTTSerialize_connect>
 80016c6:	6738      	str	r0, [r7, #112]	@ 0x70
 80016c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	dd32      	ble.n	8001734 <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != MQTT_SUCCESS)  // send the connect packet
 80016ce:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80016d2:	461a      	mov	r2, r3
 80016d4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fc43 	bl	8000f62 <sendPacket>
 80016dc:	6778      	str	r0, [r7, #116]	@ 0x74
 80016de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d129      	bne.n	8001738 <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 80016e4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80016e8:	461a      	mov	r2, r3
 80016ea:	2102      	movs	r1, #2
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff8c 	bl	800160a <waitfor>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d117      	bne.n	8001728 <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 80016f8:	23ff      	movs	r3, #255	@ 0xff
 80016fa:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	695a      	ldr	r2, [r3, #20]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f107 010f 	add.w	r1, r7, #15
 800170c:	f107 000e 	add.w	r0, r7, #14
 8001710:	f000 fa16 	bl	8001b40 <MQTTDeserialize_connack>
 8001714:	4603      	mov	r3, r0
 8001716:	2b01      	cmp	r3, #1
 8001718:	d102      	bne.n	8001720 <MQTTConnect+0xd8>
            rc = connack_rc;
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	677b      	str	r3, [r7, #116]	@ 0x74
 800171e:	e00c      	b.n	800173a <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
 8001724:	677b      	str	r3, [r7, #116]	@ 0x74
 8001726:	e008      	b.n	800173a <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
 800172c:	677b      	str	r3, [r7, #116]	@ 0x74
 800172e:	e004      	b.n	800173a <MQTTConnect+0xf2>
		goto exit;
 8001730:	bf00      	nop
 8001732:	e002      	b.n	800173a <MQTTConnect+0xf2>
        goto exit;
 8001734:	bf00      	nop
 8001736:	e000      	b.n	800173a <MQTTConnect+0xf2>
        goto exit; // there was a problem
 8001738:	bf00      	nop

exit:
    if (rc == MQTT_SUCCESS)
 800173a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800173c:	2b00      	cmp	r3, #0
 800173e:	d102      	bne.n	8001746 <MQTTConnect+0xfe>
        c->isconnected = 1;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 8001746:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 8001748:	4618      	mov	r0, r3
 800174a:	3778      	adds	r7, #120	@ 0x78
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	08007220 	.word	0x08007220

08001754 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{
 8001754:	b5b0      	push	{r4, r5, r7, lr}
 8001756:	b094      	sub	sp, #80	@ 0x50
 8001758:	af04      	add	r7, sp, #16
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	4613      	mov	r3, r2
 8001762:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
 8001768:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Timer timer;
    int len = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	637b      	str	r3, [r7, #52]	@ 0x34
    MQTTString topic = MQTTString_initializer;
 800176e:	2300      	movs	r3, #0
 8001770:	623b      	str	r3, [r7, #32]
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
 8001776:	2300      	movs	r3, #0
 8001778:	62bb      	str	r3, [r7, #40]	@ 0x28
    topic.cstring = (char *)topicFilter;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	623b      	str	r3, [r7, #32]
    // This was added because enum QoS was previously typed to *int which resulted in HardFault and unaligned integer read.
    // This coping below makes sure the parameter for MQTTSerialize_subscribe is always char no matter what compiler is using for enums
    char charQos = (char)qos;
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	77fb      	strb	r3, [r7, #31]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 8083 	beq.w	8001892 <MQTTSubscribe+0x13e>
		goto exit;

    TimerInit(&timer);
 800178c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fe91 	bl	80024b8 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 fead 	bl	8002500 <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, &charQos);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	691c      	ldr	r4, [r3, #16]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	461d      	mov	r5, r3
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f7ff fbbd 	bl	8000f30 <getNextPacketId>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	f107 031f 	add.w	r3, r7, #31
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	f107 0320 	add.w	r3, r7, #32
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	2301      	movs	r3, #1
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	4613      	mov	r3, r2
 80017cc:	2200      	movs	r2, #0
 80017ce:	4629      	mov	r1, r5
 80017d0:	4620      	mov	r0, r4
 80017d2:	f000 fd90 	bl	80022f6 <MQTTSerialize_subscribe>
 80017d6:	6378      	str	r0, [r7, #52]	@ 0x34
    if (len <= 0)
 80017d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017da:	2b00      	cmp	r3, #0
 80017dc:	dd5b      	ble.n	8001896 <MQTTSubscribe+0x142>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 80017de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017e2:	461a      	mov	r2, r3
 80017e4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f7ff fbbb 	bl	8000f62 <sendPacket>
 80017ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80017ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d152      	bne.n	800189a <MQTTSubscribe+0x146>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 80017f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017f8:	461a      	mov	r2, r3
 80017fa:	2109      	movs	r1, #9
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f7ff ff04 	bl	800160a <waitfor>
 8001802:	4603      	mov	r3, r0
 8001804:	2b09      	cmp	r3, #9
 8001806:	d140      	bne.n	800188a <MQTTSubscribe+0x136>
    {
        int count = 0, grantedQoS = -1;
 8001808:	2300      	movs	r3, #0
 800180a:	61bb      	str	r3, [r7, #24]
 800180c:	f04f 33ff 	mov.w	r3, #4294967295
 8001810:	617b      	str	r3, [r7, #20]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	68d2      	ldr	r2, [r2, #12]
 800181a:	4614      	mov	r4, r2
 800181c:	f107 0114 	add.w	r1, r7, #20
 8001820:	f107 0218 	add.w	r2, r7, #24
 8001824:	f107 0012 	add.w	r0, r7, #18
 8001828:	9401      	str	r4, [sp, #4]
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	460b      	mov	r3, r1
 800182e:	2101      	movs	r1, #1
 8001830:	f000 fddb 	bl	80023ea <MQTTDeserialize_suback>
 8001834:	4603      	mov	r3, r0
 8001836:	2b01      	cmp	r3, #1
 8001838:	d101      	bne.n	800183e <MQTTSubscribe+0xea>
            rc = grantedQoS; // 0, 1, 2 or 0x80
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (rc != 0x80)
 800183e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001840:	2b80      	cmp	r3, #128	@ 0x80
 8001842:	d02b      	beq.n	800189c <MQTTSubscribe+0x148>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8001844:	2300      	movs	r3, #0
 8001846:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001848:	e01b      	b.n	8001882 <MQTTSubscribe+0x12e>
            {
                if (c->messageHandlers[i].topicFilter == 0)
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800184e:	3304      	adds	r3, #4
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4413      	add	r3, r2
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d110      	bne.n	800187c <MQTTSubscribe+0x128>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800185e:	3304      	adds	r3, #4
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	4413      	add	r3, r2
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	605a      	str	r2, [r3, #4]
                    c->messageHandlers[i].fp = messageHandler;
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800186c:	3304      	adds	r3, #4
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4413      	add	r3, r2
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	609a      	str	r2, [r3, #8]
                    rc = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 800187a:	e00f      	b.n	800189c <MQTTSubscribe+0x148>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800187c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800187e:	3301      	adds	r3, #1
 8001880:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001884:	2b04      	cmp	r3, #4
 8001886:	dde0      	ble.n	800184a <MQTTSubscribe+0xf6>
 8001888:	e008      	b.n	800189c <MQTTSubscribe+0x148>
                }
            }
        }
    }
    else
        rc = FAILURE;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001890:	e004      	b.n	800189c <MQTTSubscribe+0x148>
		goto exit;
 8001892:	bf00      	nop
 8001894:	e002      	b.n	800189c <MQTTSubscribe+0x148>
        goto exit;
 8001896:	bf00      	nop
 8001898:	e000      	b.n	800189c <MQTTSubscribe+0x148>
        goto exit;             // there was a problem
 800189a:	bf00      	nop

exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 800189c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3740      	adds	r7, #64	@ 0x40
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bdb0      	pop	{r4, r5, r7, pc}

080018a6 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 80018a6:	b590      	push	{r4, r7, lr}
 80018a8:	b085      	sub	sp, #20
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
	int len = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7a1b      	ldrb	r3, [r3, #8]
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d102      	bne.n	80018c0 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 80018ba:	230c      	movs	r3, #12
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	e005      	b.n	80018cc <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	7a1b      	ldrb	r3, [r3, #8]
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d101      	bne.n	80018cc <MQTTSerialize_connectLength+0x26>
		len = 10;
 80018c8:	230a      	movs	r3, #10
 80018ca:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	330c      	adds	r3, #12
 80018d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80018d4:	f000 fc43 	bl	800215e <MQTTstrlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	3302      	adds	r3, #2
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	4413      	add	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7edb      	ldrb	r3, [r3, #27]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d013      	beq.n	8001912 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3324      	adds	r3, #36	@ 0x24
 80018ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80018f2:	f000 fc34 	bl	800215e <MQTTstrlen>
 80018f6:	4603      	mov	r3, r0
 80018f8:	1c9c      	adds	r4, r3, #2
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3330      	adds	r3, #48	@ 0x30
 80018fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001902:	f000 fc2c 	bl	800215e <MQTTstrlen>
 8001906:	4603      	mov	r3, r0
 8001908:	4423      	add	r3, r4
 800190a:	3302      	adds	r3, #2
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	4413      	add	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	2b00      	cmp	r3, #0
 8001918:	d103      	bne.n	8001922 <MQTTSerialize_connectLength+0x7c>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00a      	beq.n	8001938 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3340      	adds	r3, #64	@ 0x40
 8001926:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800192a:	f000 fc18 	bl	800215e <MQTTstrlen>
 800192e:	4603      	mov	r3, r0
 8001930:	3302      	adds	r3, #2
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4413      	add	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193c:	2b00      	cmp	r3, #0
 800193e:	d103      	bne.n	8001948 <MQTTSerialize_connectLength+0xa2>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00a      	beq.n	800195e <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	334c      	adds	r3, #76	@ 0x4c
 800194c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001950:	f000 fc05 	bl	800215e <MQTTstrlen>
 8001954:	4603      	mov	r3, r0
 8001956:	3302      	adds	r3, #2
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	4413      	add	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 800195e:	68fb      	ldr	r3, [r7, #12]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	bd90      	pop	{r4, r7, pc}

08001968 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	@ 0x28
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8001978:	2300      	movs	r3, #0
 800197a:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
	int len = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8001984:	f04f 33ff 	mov.w	r3, #4294967295
 8001988:	627b      	str	r3, [r7, #36]	@ 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ff8b 	bl	80018a6 <MQTTSerialize_connectLength>
 8001990:	6238      	str	r0, [r7, #32]
 8001992:	6a38      	ldr	r0, [r7, #32]
 8001994:	f000 fa98 	bl	8001ec8 <MQTTPacket_len>
 8001998:	4602      	mov	r2, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	4293      	cmp	r3, r2
 800199e:	da03      	bge.n	80019a8 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80019a0:	f06f 0301 	mvn.w	r3, #1
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 80019a6:	e0c2      	b.n	8001b2e <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 80019ac:	7e3b      	ldrb	r3, [r7, #24]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f362 1307 	bfi	r3, r2, #4, #4
 80019b4:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80019b6:	7e3a      	ldrb	r2, [r7, #24]
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	4611      	mov	r1, r2
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fb11 	bl	8001fe6 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	6a39      	ldr	r1, [r7, #32]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 fa12 	bl	8001df2 <MQTTPacket_encode>
 80019ce:	4602      	mov	r2, r0
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	4413      	add	r3, r2
 80019d4:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	7a1b      	ldrb	r3, [r3, #8]
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d10c      	bne.n	80019f8 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	4955      	ldr	r1, [pc, #340]	@ (8001b38 <MQTTSerialize_connect+0x1d0>)
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 fb3c 	bl	8002062 <writeCString>
		writeChar(&ptr, (char) 4);
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	2104      	movs	r1, #4
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 faf8 	bl	8001fe6 <writeChar>
 80019f6:	e00b      	b.n	8001a10 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	494f      	ldr	r1, [pc, #316]	@ (8001b3c <MQTTSerialize_connect+0x1d4>)
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 fb2f 	bl	8002062 <writeCString>
		writeChar(&ptr, (char) 3);
 8001a04:	f107 031c 	add.w	r3, r7, #28
 8001a08:	2103      	movs	r1, #3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 faeb 	bl	8001fe6 <writeChar>
	}

	flags.all = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7e9b      	ldrb	r3, [r3, #26]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	7d3b      	ldrb	r3, [r7, #20]
 8001a20:	f362 0341 	bfi	r3, r2, #1, #1
 8001a24:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	7edb      	ldrb	r3, [r3, #27]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	bf14      	ite	ne
 8001a2e:	2301      	movne	r3, #1
 8001a30:	2300      	moveq	r3, #0
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	7d3b      	ldrb	r3, [r7, #20]
 8001a36:	f362 0382 	bfi	r3, r2, #2, #1
 8001a3a:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8001a3c:	7d3b      	ldrb	r3, [r7, #20]
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d013      	beq.n	8001a70 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	7d3b      	ldrb	r3, [r7, #20]
 8001a56:	f362 03c4 	bfi	r3, r2, #3, #2
 8001a5a:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	7d3b      	ldrb	r3, [r7, #20]
 8001a6a:	f362 1345 	bfi	r3, r2, #5, #1
 8001a6e:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d103      	bne.n	8001a80 <MQTTSerialize_connect+0x118>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8001a80:	7d3b      	ldrb	r3, [r7, #20]
 8001a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a86:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d103      	bne.n	8001a98 <MQTTSerialize_connect+0x130>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8001a98:	7d3b      	ldrb	r3, [r7, #20]
 8001a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a9e:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8001aa0:	7d3a      	ldrb	r2, [r7, #20]
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fa9c 	bl	8001fe6 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	8b1b      	ldrh	r3, [r3, #24]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	f107 031c 	add.w	r3, r7, #28
 8001ab8:	4611      	mov	r1, r2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 faa8 	bl	8002010 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f107 001c 	add.w	r0, r7, #28
 8001ac6:	330c      	adds	r3, #12
 8001ac8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aca:	f000 fae9 	bl	80020a0 <writeMQTTString>
	if (options->willFlag)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7edb      	ldrb	r3, [r3, #27]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00d      	beq.n	8001af2 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f107 001c 	add.w	r0, r7, #28
 8001adc:	3324      	adds	r3, #36	@ 0x24
 8001ade:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ae0:	f000 fade 	bl	80020a0 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f107 001c 	add.w	r0, r7, #28
 8001aea:	3330      	adds	r3, #48	@ 0x30
 8001aec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aee:	f000 fad7 	bl	80020a0 <writeMQTTString>
	}
	if (flags.bits.username)
 8001af2:	7d3b      	ldrb	r3, [r7, #20]
 8001af4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d006      	beq.n	8001b0c <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f107 001c 	add.w	r0, r7, #28
 8001b04:	3340      	adds	r3, #64	@ 0x40
 8001b06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b08:	f000 faca 	bl	80020a0 <writeMQTTString>
	if (flags.bits.password)
 8001b0c:	7d3b      	ldrb	r3, [r7, #20]
 8001b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d006      	beq.n	8001b26 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f107 001c 	add.w	r0, r7, #28
 8001b1e:	334c      	adds	r3, #76	@ 0x4c
 8001b20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b22:	f000 fabd 	bl	80020a0 <writeMQTTString>

	rc = ptr - buf;
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	627b      	str	r3, [r7, #36]	@ 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3728      	adds	r7, #40	@ 0x28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	08007278 	.word	0x08007278
 8001b3c:	08007280 	.word	0x08007280

08001b40 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	@ 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8001b62:	f107 0318 	add.w	r3, r7, #24
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 fa29 	bl	8001fbe <readChar>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8001b70:	7f3b      	ldrb	r3, [r7, #28]
 8001b72:	f023 030f 	bic.w	r3, r3, #15
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b20      	cmp	r3, #32
 8001b7a:	d12e      	bne.n	8001bda <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	f107 0214 	add.w	r2, r7, #20
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 f9e9 	bl	8001f5c <MQTTPacket_decodeBuf>
 8001b8a:	6278      	str	r0, [r7, #36]	@ 0x24
 8001b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	4413      	add	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	4413      	add	r3, r2
 8001b9a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6a3a      	ldr	r2, [r7, #32]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	dd1b      	ble.n	8001bde <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 8001ba6:	f107 0318 	add.w	r3, r7, #24
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 fa07 	bl	8001fbe <readChar>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8001bb4:	7c3b      	ldrb	r3, [r7, #16]
 8001bb6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 8001bc2:	f107 0318 	add.w	r3, r7, #24
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 f9f9 	bl	8001fbe <readChar>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bd8:	e002      	b.n	8001be0 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8001bda:	bf00      	nop
 8001bdc:	e000      	b.n	8001be0 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8001bde:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3728      	adds	r7, #40	@ 0x28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b088      	sub	sp, #32
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 8001bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001c00:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	dc03      	bgt.n	8001c14 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8001c0c:	f06f 0301 	mvn.w	r3, #1
 8001c10:	61fb      	str	r3, [r7, #28]
		goto exit;
 8001c12:	e01d      	b.n	8001c50 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	7e3b      	ldrb	r3, [r7, #24]
 8001c22:	f362 1307 	bfi	r3, r2, #4, #4
 8001c26:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8001c28:	7e3a      	ldrb	r2, [r7, #24]
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 f9d8 	bl	8001fe6 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f8d9 	bl	8001df2 <MQTTPacket_encode>
 8001c40:	4602      	mov	r2, r0
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	4413      	add	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001c50:	69fb      	ldr	r3, [r7, #28]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3720      	adds	r7, #32
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 8001c64:	220c      	movs	r2, #12
 8001c66:	6839      	ldr	r1, [r7, #0]
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ffbe 	bl	8001bea <MQTTSerialize_zero>
 8001c6e:	4603      	mov	r3, r0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	@ 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8001c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c8c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8001c9a:	f107 0318 	add.w	r3, r7, #24
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 f98d 	bl	8001fbe <readChar>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8001ca8:	7f3b      	ldrb	r3, [r7, #28]
 8001caa:	f023 030f 	bic.w	r3, r3, #15
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b30      	cmp	r3, #48	@ 0x30
 8001cb2:	d14b      	bne.n	8001d4c <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8001cb4:	7f3b      	ldrb	r3, [r7, #28]
 8001cb6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8001cc2:	7f3b      	ldrb	r3, [r7, #28]
 8001cc4:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8001cd0:	7f3b      	ldrb	r3, [r7, #28]
 8001cd2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	f107 0214 	add.w	r2, r7, #20
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f938 	bl	8001f5c <MQTTPacket_decodeBuf>
 8001cec:	6278      	str	r0, [r7, #36]	@ 0x24
 8001cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8001cfe:	f107 0318 	add.w	r3, r7, #24
 8001d02:	6a3a      	ldr	r2, [r7, #32]
 8001d04:	4619      	mov	r1, r3
 8001d06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d08:	f000 f9f8 	bl	80020fc <readMQTTLenString>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d01e      	beq.n	8001d50 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	6a3a      	ldr	r2, [r7, #32]
 8001d16:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	db19      	blt.n	8001d50 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	dd08      	ble.n	8001d36 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8001d24:	f107 0318 	add.w	r3, r7, #24
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 f92d 	bl	8001f88 <readInt>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	6a3a      	ldr	r2, [r7, #32]
 8001d3a:	1ad2      	subs	r2, r2, r3
 8001d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d3e:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d44:	601a      	str	r2, [r3, #0]
	rc = 1;
 8001d46:	2301      	movs	r3, #1
 8001d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d4a:	e002      	b.n	8001d52 <MQTTDeserialize_publish+0xda>
		goto exit;
 8001d4c:	bf00      	nop
 8001d4e:	e000      	b.n	8001d52 <MQTTDeserialize_publish+0xda>
		goto exit;
 8001d50:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3728      	adds	r7, #40	@ 0x28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	@ 0x28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
 8001d68:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8001d7a:	f107 0318 	add.w	r3, r7, #24
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 f91d 	bl	8001fbe <readChar>
 8001d84:	4603      	mov	r3, r0
 8001d86:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8001d88:	7f3b      	ldrb	r3, [r7, #28]
 8001d8a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	461a      	mov	r2, r3
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 8001d96:	7f3b      	ldrb	r3, [r7, #28]
 8001d98:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	f107 0214 	add.w	r2, r7, #20
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 f8d5 	bl	8001f5c <MQTTPacket_decodeBuf>
 8001db2:	6278      	str	r0, [r7, #36]	@ 0x24
 8001db4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	4413      	add	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	6a3a      	ldr	r2, [r7, #32]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	dd0b      	ble.n	8001de6 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8001dce:	f107 0318 	add.w	r3, r7, #24
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 f8d8 	bl	8001f88 <readInt>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001de4:	e000      	b.n	8001de8 <MQTTDeserialize_ack+0x8c>
		goto exit;
 8001de6:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8001de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3728      	adds	r7, #40	@ 0x28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b085      	sub	sp, #20
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	425a      	negs	r2, r3
 8001e04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e08:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e0c:	bf58      	it	pl
 8001e0e:	4253      	negpl	r3, r2
 8001e10:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	da00      	bge.n	8001e1a <MQTTPacket_encode+0x28>
 8001e18:	337f      	adds	r3, #127	@ 0x7f
 8001e1a:	11db      	asrs	r3, r3, #7
 8001e1c:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	dd03      	ble.n	8001e2c <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8001e24:	7afb      	ldrb	r3, [r7, #11]
 8001e26:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e2a:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	60fa      	str	r2, [r7, #12]
 8001e32:	461a      	mov	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	7afa      	ldrb	r2, [r7, #11]
 8001e3a:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	dcde      	bgt.n	8001e00 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8001e42:	68fb      	ldr	r3, [r7, #12]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	617b      	str	r3, [r7, #20]
	int len = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6c:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	3301      	adds	r3, #1
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	dd03      	ble.n	8001e82 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	60fb      	str	r3, [r7, #12]
			goto exit;
 8001e80:	e01d      	b.n	8001ebe <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8001e82:	f107 020b 	add.w	r2, r7, #11
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2101      	movs	r1, #1
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	4798      	blx	r3
 8001e8e:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d112      	bne.n	8001ebc <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	7afb      	ldrb	r3, [r7, #11]
 8001e9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ea0:	6979      	ldr	r1, [r7, #20]
 8001ea2:	fb01 f303 	mul.w	r3, r1, r3
 8001ea6:	441a      	add	r2, r3
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	01db      	lsls	r3, r3, #7
 8001eb0:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8001eb2:	7afb      	ldrb	r3, [r7, #11]
 8001eb4:	b25b      	sxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	dbd6      	blt.n	8001e68 <MQTTPacket_decode+0x18>
exit:
 8001eba:	e000      	b.n	8001ebe <MQTTPacket_decode+0x6e>
			goto exit;
 8001ebc:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8001ebe:	693b      	ldr	r3, [r7, #16]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001eda:	dc03      	bgt.n	8001ee4 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	e012      	b.n	8001f0a <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001eea:	da03      	bge.n	8001ef4 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3302      	adds	r3, #2
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	e00a      	b.n	8001f0a <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a08      	ldr	r2, [pc, #32]	@ (8001f18 <MQTTPacket_len+0x50>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	dc03      	bgt.n	8001f04 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3303      	adds	r3, #3
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	e002      	b.n	8001f0a <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3304      	adds	r3, #4
 8001f08:	607b      	str	r3, [r7, #4]
	return rem_len;
 8001f0a:	687b      	ldr	r3, [r7, #4]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	001ffffe 	.word	0x001ffffe

08001f1c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	e00a      	b.n	8001f42 <bufchar+0x26>
		*c = *bufptr++;
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <bufchar+0x3c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	4909      	ldr	r1, [pc, #36]	@ (8001f58 <bufchar+0x3c>)
 8001f34:	600a      	str	r2, [r1, #0]
 8001f36:	781a      	ldrb	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	dbf0      	blt.n	8001f2c <bufchar+0x10>
	return count;
 8001f4a:	683b      	ldr	r3, [r7, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	20000494 	.word	0x20000494

08001f5c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8001f66:	4a06      	ldr	r2, [pc, #24]	@ (8001f80 <MQTTPacket_decodeBuf+0x24>)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8001f6c:	6839      	ldr	r1, [r7, #0]
 8001f6e:	4805      	ldr	r0, [pc, #20]	@ (8001f84 <MQTTPacket_decodeBuf+0x28>)
 8001f70:	f7ff ff6e 	bl	8001e50 <MQTTPacket_decode>
 8001f74:	4603      	mov	r3, r0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000494 	.word	0x20000494
 8001f84:	08001f1d 	.word	0x08001f1d

08001f88 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	021b      	lsls	r3, r3, #8
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	3201      	adds	r2, #1
 8001fa0:	7812      	ldrb	r2, [r2, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	1c9a      	adds	r2, r3, #2
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	601a      	str	r2, [r3, #0]
	return len;
 8001fb0:	68bb      	ldr	r3, [r7, #8]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b085      	sub	sp, #20
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	601a      	str	r2, [r3, #0]
	return c;
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	78fa      	ldrb	r2, [r7, #3]
 8001ff8:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	601a      	str	r2, [r3, #0]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	da00      	bge.n	8002022 <writeInt+0x12>
 8002020:	33ff      	adds	r3, #255	@ 0xff
 8002022:	121b      	asrs	r3, r3, #8
 8002024:	461a      	mov	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	425a      	negs	r2, r3
 800203c:	b2db      	uxtb	r3, r3
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	bf58      	it	pl
 8002042:	4253      	negpl	r3, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	601a      	str	r2, [r3, #0]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 800206c:	6838      	ldr	r0, [r7, #0]
 800206e:	f7fe f8cf 	bl	8000210 <strlen>
 8002072:	4603      	mov	r3, r0
 8002074:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8002076:	68f9      	ldr	r1, [r7, #12]
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff ffc9 	bl	8002010 <writeInt>
	memcpy(*pptr, string, len);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	6839      	ldr	r1, [r7, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f004 fa51 	bl	800652e <memcpy>
	*pptr += len;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	441a      	add	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	601a      	str	r2, [r3, #0]
}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	4638      	mov	r0, r7
 80020aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	dd12      	ble.n	80020da <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4619      	mov	r1, r3
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f7ff ffa9 	bl	8002010 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68b9      	ldr	r1, [r7, #8]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f004 fa31 	bl	800652e <memcpy>
		*pptr += mqttstring.lenstring.len;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	441a      	add	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 80020d8:	e00c      	b.n	80020f4 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	4619      	mov	r1, r3
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f7ff ffbc 	bl	8002062 <writeCString>
}
 80020ea:	e003      	b.n	80020f4 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 80020ec:	2100      	movs	r1, #0
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f7ff ff8e 	bl	8002010 <writeInt>
}
 80020f4:	bf00      	nop
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b01      	cmp	r3, #1
 8002116:	dd1a      	ble.n	800214e <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8002118:	68b8      	ldr	r0, [r7, #8]
 800211a:	f7ff ff35 	bl	8001f88 <readInt>
 800211e:	4602      	mov	r2, r0
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	6852      	ldr	r2, [r2, #4]
 800212c:	4413      	add	r3, r2
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	429a      	cmp	r2, r3
 8002132:	d30c      	bcc.n	800214e <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	6852      	ldr	r2, [r2, #4]
 8002144:	441a      	add	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	601a      	str	r2, [r3, #0]
			rc = 1;
 800214a:	2301      	movs	r3, #1
 800214c:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8002154:	697b      	ldr	r3, [r7, #20]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b086      	sub	sp, #24
 8002162:	af00      	add	r7, sp, #0
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d006      	beq.n	8002182 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe f84a 	bl	8000210 <strlen>
 800217c:	4603      	mov	r3, r0
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	e001      	b.n	8002186 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	617b      	str	r3, [r7, #20]
	return rc;
 8002186:	697b      	ldr	r3, [r7, #20]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
	int alen = 0,
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
		blen = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe f82b 	bl	8000210 <strlen>
 80021ba:	4603      	mov	r3, r0
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	e005      	b.n	80021cc <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 80021cc:	6838      	ldr	r0, [r7, #0]
 80021ce:	f7fe f81f 	bl	8000210 <strlen>
 80021d2:	4603      	mov	r3, r0
 80021d4:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d10a      	bne.n	80021f4 <MQTTPacket_equals+0x64>
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	461a      	mov	r2, r3
 80021e2:	6839      	ldr	r1, [r7, #0]
 80021e4:	6938      	ldr	r0, [r7, #16]
 80021e6:	f004 f91d 	bl	8006424 <strncmp>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <MQTTPacket_equals+0x64>
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <MQTTPacket_equals+0x66>
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b088      	sub	sp, #32
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	4611      	mov	r1, r2
 800220a:	461a      	mov	r2, r3
 800220c:	460b      	mov	r3, r1
 800220e:	71fb      	strb	r3, [r7, #7]
 8002210:	4613      	mov	r3, r2
 8002212:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 8002214:	2300      	movs	r3, #0
 8002216:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b03      	cmp	r3, #3
 8002224:	dc03      	bgt.n	800222e <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8002226:	f06f 0301 	mvn.w	r3, #1
 800222a:	61fb      	str	r3, [r7, #28]
		goto exit;
 800222c:	e037      	b.n	800229e <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	b2da      	uxtb	r2, r3
 8002236:	7e3b      	ldrb	r3, [r7, #24]
 8002238:	f362 1307 	bfi	r3, r2, #4, #4
 800223c:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 800223e:	79bb      	ldrb	r3, [r7, #6]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	b2da      	uxtb	r2, r3
 8002246:	7e3b      	ldrb	r3, [r7, #24]
 8002248:	f362 03c3 	bfi	r3, r2, #3, #1
 800224c:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	2b06      	cmp	r3, #6
 8002252:	bf0c      	ite	eq
 8002254:	2301      	moveq	r3, #1
 8002256:	2300      	movne	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	b2da      	uxtb	r2, r3
 8002260:	7e3b      	ldrb	r3, [r7, #24]
 8002262:	f362 0342 	bfi	r3, r2, #1, #2
 8002266:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8002268:	7e3a      	ldrb	r2, [r7, #24]
 800226a:	f107 0314 	add.w	r3, r7, #20
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff feb8 	bl	8001fe6 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2102      	movs	r1, #2
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fdb9 	bl	8001df2 <MQTTPacket_encode>
 8002280:	4602      	mov	r2, r0
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	4413      	add	r3, r2
 8002286:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 8002288:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800228a:	f107 0314 	add.w	r3, r7, #20
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff febd 	bl	8002010 <writeInt>
	rc = ptr - buf;
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800229e:	69fb      	ldr	r3, [r7, #28]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3720      	adds	r7, #32
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 80022b2:	2302      	movs	r3, #2
 80022b4:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	e013      	b.n	80022e4 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	4613      	mov	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	461a      	mov	r2, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	4413      	add	r3, r2
 80022cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022d0:	f7ff ff45 	bl	800215e <MQTTstrlen>
 80022d4:	4603      	mov	r3, r0
 80022d6:	3303      	adds	r3, #3
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	4413      	add	r3, r2
 80022dc:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	3301      	adds	r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	dbe7      	blt.n	80022bc <MQTTSerialize_subscribeLength+0x14>
	return len;
 80022ec:	68bb      	ldr	r3, [r7, #8]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], char requestedQoSs[])
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b08a      	sub	sp, #40	@ 0x28
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	4611      	mov	r1, r2
 8002302:	461a      	mov	r2, r3
 8002304:	460b      	mov	r3, r1
 8002306:	71fb      	strb	r3, [r7, #7]
 8002308:	4613      	mov	r3, r2
 800230a:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	627b      	str	r3, [r7, #36]	@ 0x24
	int i = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8002320:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002322:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002324:	f7ff ffc0 	bl	80022a8 <MQTTSerialize_subscribeLength>
 8002328:	61f8      	str	r0, [r7, #28]
 800232a:	69f8      	ldr	r0, [r7, #28]
 800232c:	f7ff fdcc 	bl	8001ec8 <MQTTPacket_len>
 8002330:	4602      	mov	r2, r0
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	4293      	cmp	r3, r2
 8002336:	da03      	bge.n	8002340 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8002338:	f06f 0301 	mvn.w	r3, #1
 800233c:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 800233e:	e04f      	b.n	80023e0 <MQTTSerialize_subscribe+0xea>
	}

	header.byte = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 8002344:	7d3b      	ldrb	r3, [r7, #20]
 8002346:	2208      	movs	r2, #8
 8002348:	f362 1307 	bfi	r3, r2, #4, #4
 800234c:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	b2da      	uxtb	r2, r3
 8002356:	7d3b      	ldrb	r3, [r7, #20]
 8002358:	f362 03c3 	bfi	r3, r2, #3, #1
 800235c:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 800235e:	7d3b      	ldrb	r3, [r7, #20]
 8002360:	2201      	movs	r2, #1
 8002362:	f362 0342 	bfi	r3, r2, #1, #2
 8002366:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 8002368:	7d3a      	ldrb	r2, [r7, #20]
 800236a:	f107 0318 	add.w	r3, r7, #24
 800236e:	4611      	mov	r1, r2
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fe38 	bl	8001fe6 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	69f9      	ldr	r1, [r7, #28]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fd39 	bl	8001df2 <MQTTPacket_encode>
 8002380:	4602      	mov	r2, r0
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	4413      	add	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 8002388:	88ba      	ldrh	r2, [r7, #4]
 800238a:	f107 0318 	add.w	r3, r7, #24
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fe3d 	bl	8002010 <writeInt>

	for (i = 0; i < count; ++i)
 8002396:	2300      	movs	r3, #0
 8002398:	623b      	str	r3, [r7, #32]
 800239a:	e019      	b.n	80023d0 <MQTTSerialize_subscribe+0xda>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 800239c:	6a3a      	ldr	r2, [r7, #32]
 800239e:	4613      	mov	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	461a      	mov	r2, r3
 80023a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023aa:	4413      	add	r3, r2
 80023ac:	f107 0018 	add.w	r0, r7, #24
 80023b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023b2:	f7ff fe75 	bl	80020a0 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80023ba:	4413      	add	r3, r2
 80023bc:	781a      	ldrb	r2, [r3, #0]
 80023be:	f107 0318 	add.w	r3, r7, #24
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fe0e 	bl	8001fe6 <writeChar>
	for (i = 0; i < count; ++i)
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	3301      	adds	r3, #1
 80023ce:	623b      	str	r3, [r7, #32]
 80023d0:	6a3a      	ldr	r2, [r7, #32]
 80023d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d4:	429a      	cmp	r2, r3
 80023d6:	dbe1      	blt.n	800239c <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	627b      	str	r3, [r7, #36]	@ 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80023e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3728      	adds	r7, #40	@ 0x28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b08a      	sub	sp, #40	@ 0x28
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80023fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fe:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8002400:	2300      	movs	r3, #0
 8002402:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8002408:	f107 0318 	add.w	r3, r7, #24
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fdd6 	bl	8001fbe <readChar>
 8002412:	4603      	mov	r3, r0
 8002414:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 8002416:	7f3b      	ldrb	r3, [r7, #28]
 8002418:	f023 030f 	bic.w	r3, r3, #15
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b90      	cmp	r3, #144	@ 0x90
 8002420:	d142      	bne.n	80024a8 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	f107 0214 	add.w	r2, r7, #20
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fd96 	bl	8001f5c <MQTTPacket_decodeBuf>
 8002430:	6278      	str	r0, [r7, #36]	@ 0x24
 8002432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	4413      	add	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	4413      	add	r3, r2
 8002440:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	6a3a      	ldr	r2, [r7, #32]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b01      	cmp	r3, #1
 800244a:	dd2f      	ble.n	80024ac <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 800244c:	f107 0318 	add.w	r3, r7, #24
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fd99 	bl	8001f88 <readInt>
 8002456:	4603      	mov	r3, r0
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	801a      	strh	r2, [r3, #0]

	*count = 0;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8002464:	e019      	b.n	800249a <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	429a      	cmp	r2, r3
 800246e:	da03      	bge.n	8002478 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 8002470:	f04f 33ff 	mov.w	r3, #4294967295
 8002474:	627b      	str	r3, [r7, #36]	@ 0x24
			goto exit;
 8002476:	e01a      	b.n	80024ae <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 8002478:	f107 0318 	add.w	r3, r7, #24
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fd9e 	bl	8001fbe <readChar>
 8002482:	4603      	mov	r3, r0
 8002484:	4618      	mov	r0, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	1c59      	adds	r1, r3, #1
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6011      	str	r1, [r2, #0]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	4413      	add	r3, r2
 8002496:	4602      	mov	r2, r0
 8002498:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	6a3a      	ldr	r2, [r7, #32]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d8e1      	bhi.n	8002466 <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 80024a2:	2301      	movs	r3, #1
 80024a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80024a6:	e002      	b.n	80024ae <MQTTDeserialize_suback+0xc4>
		goto exit;
 80024a8:	bf00      	nop
 80024aa:	e000      	b.n	80024ae <MQTTDeserialize_suback+0xc4>
		goto exit;
 80024ac:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80024ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3728      	adds	r7, #40	@ 0x28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	605a      	str	r2, [r3, #4]
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
	...

080024d4 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <TimerIsExpired+0x28>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	0fdb      	lsrs	r3, r3, #31
 80024ec:	b2db      	uxtb	r3, r3
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20000498 	.word	0x20000498

08002500 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 800250a:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <TimerCountdownMS+0x24>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	441a      	add	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	605a      	str	r2, [r3, #4]
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	20000498 	.word	0x20000498

08002528 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002538:	fb03 f202 	mul.w	r2, r3, r2
 800253c:	4b05      	ldr	r3, [pc, #20]	@ (8002554 <TimerCountdown+0x2c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	441a      	add	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	605a      	str	r2, [r3, #4]
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000498 	.word	0x20000498

08002558 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <TimerLeftMS+0x28>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000498 	.word	0x20000498

08002584 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a07      	ldr	r2, [pc, #28]	@ (80025b4 <NewNetwork+0x30>)
 8002598:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a06      	ldr	r2, [pc, #24]	@ (80025b8 <NewNetwork+0x34>)
 800259e:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a06      	ldr	r2, [pc, #24]	@ (80025bc <NewNetwork+0x38>)
 80025a4:	60da      	str	r2, [r3, #12]
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	080025c1 	.word	0x080025c1
 80025b8:	0800261b 	.word	0x0800261b
 80025bc:	08002663 	.word	0x08002663

080025c0 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	3301      	adds	r3, #1
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 f87b 	bl	80026d8 <WIZCHIP_READ>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b17      	cmp	r3, #23
 80025e6:	d113      	bne.n	8002610 <w5x00_read+0x50>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 fa15 	bl	8002a1e <getSn_RX_RSR>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00a      	beq.n	8002610 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	b292      	uxth	r2, r2
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	4618      	mov	r0, r3
 8002608:	f000 ff84 	bl	8003514 <recv>
 800260c:	4603      	mov	r3, r0
 800260e:	e000      	b.n	8002612 <w5x00_read+0x52>

	return SOCK_ERROR;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]
 8002626:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	3301      	adds	r3, #1
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f84e 	bl	80026d8 <WIZCHIP_READ>
 800263c:	4603      	mov	r3, r0
 800263e:	2b17      	cmp	r3, #23
 8002640:	d10a      	bne.n	8002658 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	b292      	uxth	r2, r2
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	4618      	mov	r0, r3
 8002650:	f000 fe0c 	bl	800326c <send>
 8002654:	4603      	mov	r3, r0
 8002656:	e000      	b.n	800265a <w5x00_write+0x40>

	return SOCK_ERROR;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	4618      	mov	r0, r3
 8002672:	f000 fd79 	bl	8003168 <disconnect>
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b086      	sub	sp, #24
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	4613      	mov	r3, r2
 800268a:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 800268c:	f243 0339 	movw	r3, #12345	@ 0x3039
 8002690:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	b2d8      	uxtb	r0, r3
 8002698:	8afa      	ldrh	r2, [r7, #22]
 800269a:	2300      	movs	r3, #0
 800269c:	2101      	movs	r1, #1
 800269e:	f000 fabb 	bl	8002c18 <socket>
 80026a2:	4603      	mov	r3, r0
 80026a4:	461a      	mov	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d001      	beq.n	80026b2 <ConnectNetwork+0x34>
		return SOCK_ERROR;
 80026ae:	2300      	movs	r3, #0
 80026b0:	e00d      	b.n	80026ce <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	88fa      	ldrh	r2, [r7, #6]
 80026ba:	68b9      	ldr	r1, [r7, #8]
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fc4d 	bl	8002f5c <connect_W5x00>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d001      	beq.n	80026cc <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e000      	b.n	80026ce <ConnectNetwork+0x50>

	return SOCK_OK;
 80026cc:	2301      	movs	r3, #1
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80026e0:	4b22      	ldr	r3, [pc, #136]	@ (800276c <WIZCHIP_READ+0x94>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	4798      	blx	r3
   WIZCHIP.CS._select();
 80026e6:	4b21      	ldr	r3, [pc, #132]	@ (800276c <WIZCHIP_READ+0x94>)
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80026ec:	4b1f      	ldr	r3, [pc, #124]	@ (800276c <WIZCHIP_READ+0x94>)
 80026ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <WIZCHIP_READ+0x24>
 80026f4:	4b1d      	ldr	r3, [pc, #116]	@ (800276c <WIZCHIP_READ+0x94>)
 80026f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d114      	bne.n	8002726 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80026fc:	4b1b      	ldr	r3, [pc, #108]	@ (800276c <WIZCHIP_READ+0x94>)
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	0c12      	lsrs	r2, r2, #16
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	4610      	mov	r0, r2
 8002708:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800270a:	4b18      	ldr	r3, [pc, #96]	@ (800276c <WIZCHIP_READ+0x94>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	0a12      	lsrs	r2, r2, #8
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	4610      	mov	r0, r2
 8002716:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002718:	4b14      	ldr	r3, [pc, #80]	@ (800276c <WIZCHIP_READ+0x94>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	4610      	mov	r0, r2
 8002722:	4798      	blx	r3
 8002724:	e011      	b.n	800274a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	0c1b      	lsrs	r3, r3, #16
 800272a:	b2db      	uxtb	r3, r3
 800272c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	0a1b      	lsrs	r3, r3, #8
 8002732:	b2db      	uxtb	r3, r3
 8002734:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800273c:	4b0b      	ldr	r3, [pc, #44]	@ (800276c <WIZCHIP_READ+0x94>)
 800273e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002740:	f107 020c 	add.w	r2, r7, #12
 8002744:	2103      	movs	r1, #3
 8002746:	4610      	mov	r0, r2
 8002748:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800274a:	4b08      	ldr	r3, [pc, #32]	@ (800276c <WIZCHIP_READ+0x94>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	4798      	blx	r3
 8002750:	4603      	mov	r3, r0
 8002752:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8002754:	4b05      	ldr	r3, [pc, #20]	@ (800276c <WIZCHIP_READ+0x94>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800275a:	4b04      	ldr	r3, [pc, #16]	@ (800276c <WIZCHIP_READ+0x94>)
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	4798      	blx	r3
   return ret;
 8002760:	7bfb      	ldrb	r3, [r7, #15]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000080 	.word	0x20000080

08002770 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 800277c:	4b22      	ldr	r3, [pc, #136]	@ (8002808 <WIZCHIP_WRITE+0x98>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002782:	4b21      	ldr	r3, [pc, #132]	@ (8002808 <WIZCHIP_WRITE+0x98>)
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f043 0304 	orr.w	r3, r3, #4
 800278e:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002790:	4b1d      	ldr	r3, [pc, #116]	@ (8002808 <WIZCHIP_WRITE+0x98>)
 8002792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002794:	2b00      	cmp	r3, #0
 8002796:	d119      	bne.n	80027cc <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002798:	4b1b      	ldr	r3, [pc, #108]	@ (8002808 <WIZCHIP_WRITE+0x98>)
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	0c12      	lsrs	r2, r2, #16
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	4610      	mov	r0, r2
 80027a4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80027a6:	4b18      	ldr	r3, [pc, #96]	@ (8002808 <WIZCHIP_WRITE+0x98>)
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	0a12      	lsrs	r2, r2, #8
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	4610      	mov	r0, r2
 80027b2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80027b4:	4b14      	ldr	r3, [pc, #80]	@ (8002808 <WIZCHIP_WRITE+0x98>)
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	4610      	mov	r0, r2
 80027be:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80027c0:	4b11      	ldr	r3, [pc, #68]	@ (8002808 <WIZCHIP_WRITE+0x98>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	4610      	mov	r0, r2
 80027c8:	4798      	blx	r3
 80027ca:	e013      	b.n	80027f4 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	0c1b      	lsrs	r3, r3, #16
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	0a1b      	lsrs	r3, r3, #8
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80027e2:	78fb      	ldrb	r3, [r7, #3]
 80027e4:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80027e6:	4b08      	ldr	r3, [pc, #32]	@ (8002808 <WIZCHIP_WRITE+0x98>)
 80027e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ea:	f107 020c 	add.w	r2, r7, #12
 80027ee:	2104      	movs	r1, #4
 80027f0:	4610      	mov	r0, r2
 80027f2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80027f4:	4b04      	ldr	r3, [pc, #16]	@ (8002808 <WIZCHIP_WRITE+0x98>)
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80027fa:	4b03      	ldr	r3, [pc, #12]	@ (8002808 <WIZCHIP_WRITE+0x98>)
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	4798      	blx	r3
}
 8002800:	bf00      	nop
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20000080 	.word	0x20000080

0800280c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800280c:	b590      	push	{r4, r7, lr}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	4613      	mov	r3, r2
 8002818:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800281a:	4b2b      	ldr	r3, [pc, #172]	@ (80028c8 <WIZCHIP_READ_BUF+0xbc>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002820:	4b29      	ldr	r3, [pc, #164]	@ (80028c8 <WIZCHIP_READ_BUF+0xbc>)
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002826:	4b28      	ldr	r3, [pc, #160]	@ (80028c8 <WIZCHIP_READ_BUF+0xbc>)
 8002828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <WIZCHIP_READ_BUF+0x2a>
 800282e:	4b26      	ldr	r3, [pc, #152]	@ (80028c8 <WIZCHIP_READ_BUF+0xbc>)
 8002830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002832:	2b00      	cmp	r3, #0
 8002834:	d126      	bne.n	8002884 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002836:	4b24      	ldr	r3, [pc, #144]	@ (80028c8 <WIZCHIP_READ_BUF+0xbc>)
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	0c12      	lsrs	r2, r2, #16
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	4610      	mov	r0, r2
 8002842:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002844:	4b20      	ldr	r3, [pc, #128]	@ (80028c8 <WIZCHIP_READ_BUF+0xbc>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	0a12      	lsrs	r2, r2, #8
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	4610      	mov	r0, r2
 8002850:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002852:	4b1d      	ldr	r3, [pc, #116]	@ (80028c8 <WIZCHIP_READ_BUF+0xbc>)
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	4610      	mov	r0, r2
 800285c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800285e:	2300      	movs	r3, #0
 8002860:	82fb      	strh	r3, [r7, #22]
 8002862:	e00a      	b.n	800287a <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002864:	4b18      	ldr	r3, [pc, #96]	@ (80028c8 <WIZCHIP_READ_BUF+0xbc>)
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	8afa      	ldrh	r2, [r7, #22]
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	188c      	adds	r4, r1, r2
 800286e:	4798      	blx	r3
 8002870:	4603      	mov	r3, r0
 8002872:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8002874:	8afb      	ldrh	r3, [r7, #22]
 8002876:	3301      	adds	r3, #1
 8002878:	82fb      	strh	r3, [r7, #22]
 800287a:	8afa      	ldrh	r2, [r7, #22]
 800287c:	88fb      	ldrh	r3, [r7, #6]
 800287e:	429a      	cmp	r2, r3
 8002880:	d3f0      	bcc.n	8002864 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002882:	e017      	b.n	80028b4 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	0c1b      	lsrs	r3, r3, #16
 8002888:	b2db      	uxtb	r3, r3
 800288a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	b2db      	uxtb	r3, r3
 8002892:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800289a:	4b0b      	ldr	r3, [pc, #44]	@ (80028c8 <WIZCHIP_READ_BUF+0xbc>)
 800289c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289e:	f107 0210 	add.w	r2, r7, #16
 80028a2:	2103      	movs	r1, #3
 80028a4:	4610      	mov	r0, r2
 80028a6:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80028a8:	4b07      	ldr	r3, [pc, #28]	@ (80028c8 <WIZCHIP_READ_BUF+0xbc>)
 80028aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ac:	88fa      	ldrh	r2, [r7, #6]
 80028ae:	4611      	mov	r1, r2
 80028b0:	68b8      	ldr	r0, [r7, #8]
 80028b2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80028b4:	4b04      	ldr	r3, [pc, #16]	@ (80028c8 <WIZCHIP_READ_BUF+0xbc>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80028ba:	4b03      	ldr	r3, [pc, #12]	@ (80028c8 <WIZCHIP_READ_BUF+0xbc>)
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	4798      	blx	r3
}
 80028c0:	bf00      	nop
 80028c2:	371c      	adds	r7, #28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd90      	pop	{r4, r7, pc}
 80028c8:	20000080 	.word	0x20000080

080028cc <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	4613      	mov	r3, r2
 80028d8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80028da:	4b2b      	ldr	r3, [pc, #172]	@ (8002988 <WIZCHIP_WRITE_BUF+0xbc>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	4798      	blx	r3
   WIZCHIP.CS._select();
 80028e0:	4b29      	ldr	r3, [pc, #164]	@ (8002988 <WIZCHIP_WRITE_BUF+0xbc>)
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f043 0304 	orr.w	r3, r3, #4
 80028ec:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80028ee:	4b26      	ldr	r3, [pc, #152]	@ (8002988 <WIZCHIP_WRITE_BUF+0xbc>)
 80028f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d126      	bne.n	8002944 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80028f6:	4b24      	ldr	r3, [pc, #144]	@ (8002988 <WIZCHIP_WRITE_BUF+0xbc>)
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	0c12      	lsrs	r2, r2, #16
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	4610      	mov	r0, r2
 8002902:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002904:	4b20      	ldr	r3, [pc, #128]	@ (8002988 <WIZCHIP_WRITE_BUF+0xbc>)
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	0a12      	lsrs	r2, r2, #8
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	4610      	mov	r0, r2
 8002910:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002912:	4b1d      	ldr	r3, [pc, #116]	@ (8002988 <WIZCHIP_WRITE_BUF+0xbc>)
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	4610      	mov	r0, r2
 800291c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800291e:	2300      	movs	r3, #0
 8002920:	82fb      	strh	r3, [r7, #22]
 8002922:	e00a      	b.n	800293a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002924:	4b18      	ldr	r3, [pc, #96]	@ (8002988 <WIZCHIP_WRITE_BUF+0xbc>)
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	8afa      	ldrh	r2, [r7, #22]
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	440a      	add	r2, r1
 800292e:	7812      	ldrb	r2, [r2, #0]
 8002930:	4610      	mov	r0, r2
 8002932:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002934:	8afb      	ldrh	r3, [r7, #22]
 8002936:	3301      	adds	r3, #1
 8002938:	82fb      	strh	r3, [r7, #22]
 800293a:	8afa      	ldrh	r2, [r7, #22]
 800293c:	88fb      	ldrh	r3, [r7, #6]
 800293e:	429a      	cmp	r2, r3
 8002940:	d3f0      	bcc.n	8002924 <WIZCHIP_WRITE_BUF+0x58>
 8002942:	e017      	b.n	8002974 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	0c1b      	lsrs	r3, r3, #16
 8002948:	b2db      	uxtb	r3, r3
 800294a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	0a1b      	lsrs	r3, r3, #8
 8002950:	b2db      	uxtb	r3, r3
 8002952:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	b2db      	uxtb	r3, r3
 8002958:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800295a:	4b0b      	ldr	r3, [pc, #44]	@ (8002988 <WIZCHIP_WRITE_BUF+0xbc>)
 800295c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295e:	f107 0210 	add.w	r2, r7, #16
 8002962:	2103      	movs	r1, #3
 8002964:	4610      	mov	r0, r2
 8002966:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002968:	4b07      	ldr	r3, [pc, #28]	@ (8002988 <WIZCHIP_WRITE_BUF+0xbc>)
 800296a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296c:	88fa      	ldrh	r2, [r7, #6]
 800296e:	4611      	mov	r1, r2
 8002970:	68b8      	ldr	r0, [r7, #8]
 8002972:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002974:	4b04      	ldr	r3, [pc, #16]	@ (8002988 <WIZCHIP_WRITE_BUF+0xbc>)
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800297a:	4b03      	ldr	r3, [pc, #12]	@ (8002988 <WIZCHIP_WRITE_BUF+0xbc>)
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	4798      	blx	r3
}
 8002980:	bf00      	nop
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000080 	.word	0x20000080

0800298c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 800298c:	b590      	push	{r4, r7, lr}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002996:	2300      	movs	r3, #0
 8002998:	81fb      	strh	r3, [r7, #14]
 800299a:	2300      	movs	r3, #0
 800299c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	3301      	adds	r3, #1
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fe94 	bl	80026d8 <WIZCHIP_READ>
 80029b0:	4603      	mov	r3, r0
 80029b2:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80029b4:	89bb      	ldrh	r3, [r7, #12]
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	b29c      	uxth	r4, r3
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	3301      	adds	r3, #1
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fe86 	bl	80026d8 <WIZCHIP_READ>
 80029cc:	4603      	mov	r3, r0
 80029ce:	4423      	add	r3, r4
 80029d0:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80029d2:	89bb      	ldrh	r3, [r7, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d019      	beq.n	8002a0c <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	3301      	adds	r3, #1
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fe77 	bl	80026d8 <WIZCHIP_READ>
 80029ea:	4603      	mov	r3, r0
 80029ec:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80029ee:	89fb      	ldrh	r3, [r7, #14]
 80029f0:	021b      	lsls	r3, r3, #8
 80029f2:	b29c      	uxth	r4, r3
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	3301      	adds	r3, #1
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fe69 	bl	80026d8 <WIZCHIP_READ>
 8002a06:	4603      	mov	r3, r0
 8002a08:	4423      	add	r3, r4
 8002a0a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002a0c:	89fa      	ldrh	r2, [r7, #14]
 8002a0e:	89bb      	ldrh	r3, [r7, #12]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d1c4      	bne.n	800299e <getSn_TX_FSR+0x12>
   return val;
 8002a14:	89fb      	ldrh	r3, [r7, #14]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd90      	pop	{r4, r7, pc}

08002a1e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8002a1e:	b590      	push	{r4, r7, lr}
 8002a20:	b085      	sub	sp, #20
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	4603      	mov	r3, r0
 8002a26:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	81fb      	strh	r3, [r7, #14]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	3301      	adds	r3, #1
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fe4b 	bl	80026d8 <WIZCHIP_READ>
 8002a42:	4603      	mov	r3, r0
 8002a44:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002a46:	89bb      	ldrh	r3, [r7, #12]
 8002a48:	021b      	lsls	r3, r3, #8
 8002a4a:	b29c      	uxth	r4, r3
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	3301      	adds	r3, #1
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fe3d 	bl	80026d8 <WIZCHIP_READ>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	4423      	add	r3, r4
 8002a62:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002a64:	89bb      	ldrh	r3, [r7, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d019      	beq.n	8002a9e <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	3301      	adds	r3, #1
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fe2e 	bl	80026d8 <WIZCHIP_READ>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002a80:	89fb      	ldrh	r3, [r7, #14]
 8002a82:	021b      	lsls	r3, r3, #8
 8002a84:	b29c      	uxth	r4, r3
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fe20 	bl	80026d8 <WIZCHIP_READ>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	4423      	add	r3, r4
 8002a9c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002a9e:	89fa      	ldrh	r2, [r7, #14]
 8002aa0:	89bb      	ldrh	r3, [r7, #12]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d1c4      	bne.n	8002a30 <getSn_RX_RSR+0x12>
   return val;
 8002aa6:	89fb      	ldrh	r3, [r7, #14]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd90      	pop	{r4, r7, pc}

08002ab0 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	6039      	str	r1, [r7, #0]
 8002aba:	71fb      	strb	r3, [r7, #7]
 8002abc:	4613      	mov	r3, r2
 8002abe:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8002ac8:	88bb      	ldrh	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d046      	beq.n	8002b5c <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fdfc 	bl	80026d8 <WIZCHIP_READ>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	021b      	lsls	r3, r3, #8
 8002ae4:	b29c      	uxth	r4, r3
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	3301      	adds	r3, #1
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fdf0 	bl	80026d8 <WIZCHIP_READ>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4423      	add	r3, r4
 8002afc:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002afe:	89fb      	ldrh	r3, [r7, #14]
 8002b00:	021a      	lsls	r2, r3, #8
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	3302      	adds	r3, #2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002b0e:	88bb      	ldrh	r3, [r7, #4]
 8002b10:	461a      	mov	r2, r3
 8002b12:	6839      	ldr	r1, [r7, #0]
 8002b14:	68b8      	ldr	r0, [r7, #8]
 8002b16:	f7ff fed9 	bl	80028cc <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8002b1a:	89fa      	ldrh	r2, [r7, #14]
 8002b1c:	88bb      	ldrh	r3, [r7, #4]
 8002b1e:	4413      	add	r3, r2
 8002b20:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	3301      	adds	r3, #1
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8002b2e:	461a      	mov	r2, r3
 8002b30:	89fb      	ldrh	r3, [r7, #14]
 8002b32:	0a1b      	lsrs	r3, r3, #8
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	f7ff fe18 	bl	8002770 <WIZCHIP_WRITE>
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	3301      	adds	r3, #1
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	89fb      	ldrh	r3, [r7, #14]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	4619      	mov	r1, r3
 8002b54:	4610      	mov	r0, r2
 8002b56:	f7ff fe0b 	bl	8002770 <WIZCHIP_WRITE>
 8002b5a:	e000      	b.n	8002b5e <wiz_send_data+0xae>
   if(len == 0)  return;
 8002b5c:	bf00      	nop
}
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd90      	pop	{r4, r7, pc}

08002b64 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002b64:	b590      	push	{r4, r7, lr}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	6039      	str	r1, [r7, #0]
 8002b6e:	71fb      	strb	r3, [r7, #7]
 8002b70:	4613      	mov	r3, r2
 8002b72:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8002b7c:	88bb      	ldrh	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d046      	beq.n	8002c10 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	3301      	adds	r3, #1
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fda2 	bl	80026d8 <WIZCHIP_READ>
 8002b94:	4603      	mov	r3, r0
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	b29c      	uxth	r4, r3
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fd96 	bl	80026d8 <WIZCHIP_READ>
 8002bac:	4603      	mov	r3, r0
 8002bae:	4423      	add	r3, r4
 8002bb0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8002bb2:	89fb      	ldrh	r3, [r7, #14]
 8002bb4:	021a      	lsls	r2, r3, #8
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	3303      	adds	r3, #3
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8002bc2:	88bb      	ldrh	r3, [r7, #4]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	6839      	ldr	r1, [r7, #0]
 8002bc8:	68b8      	ldr	r0, [r7, #8]
 8002bca:	f7ff fe1f 	bl	800280c <WIZCHIP_READ_BUF>
   ptr += len;
 8002bce:	89fa      	ldrh	r2, [r7, #14]
 8002bd0:	88bb      	ldrh	r3, [r7, #4]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	3301      	adds	r3, #1
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8002be2:	461a      	mov	r2, r3
 8002be4:	89fb      	ldrh	r3, [r7, #14]
 8002be6:	0a1b      	lsrs	r3, r3, #8
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	4619      	mov	r1, r3
 8002bee:	4610      	mov	r0, r2
 8002bf0:	f7ff fdbe 	bl	8002770 <WIZCHIP_WRITE>
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8002c00:	461a      	mov	r2, r3
 8002c02:	89fb      	ldrh	r3, [r7, #14]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	4619      	mov	r1, r3
 8002c08:	4610      	mov	r0, r2
 8002c0a:	f7ff fdb1 	bl	8002770 <WIZCHIP_WRITE>
 8002c0e:	e000      	b.n	8002c12 <wiz_recv_data+0xae>
   if(len == 0) return;
 8002c10:	bf00      	nop
}
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd90      	pop	{r4, r7, pc}

08002c18 <socket>:




int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{ 
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b089      	sub	sp, #36	@ 0x24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4604      	mov	r4, r0
 8002c20:	4608      	mov	r0, r1
 8002c22:	4611      	mov	r1, r2
 8002c24:	461a      	mov	r2, r3
 8002c26:	4623      	mov	r3, r4
 8002c28:	71fb      	strb	r3, [r7, #7]
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71bb      	strb	r3, [r7, #6]
 8002c2e:	460b      	mov	r3, r1
 8002c30:	80bb      	strh	r3, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	70fb      	strb	r3, [r7, #3]

   uint8_t taddr[16];
   uint16_t local_port=0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	83fb      	strh	r3, [r7, #30]
   CHECK_SOCKNUM(); 
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	2b07      	cmp	r3, #7
 8002c3e:	d902      	bls.n	8002c46 <socket+0x2e>
 8002c40:	f04f 33ff 	mov.w	r3, #4294967295
 8002c44:	e10d      	b.n	8002e62 <socket+0x24a>
   switch (protocol & 0x0F)
 8002c46:	79bb      	ldrb	r3, [r7, #6]
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	2b0d      	cmp	r3, #13
 8002c50:	d82c      	bhi.n	8002cac <socket+0x94>
 8002c52:	a201      	add	r2, pc, #4	@ (adr r2, 8002c58 <socket+0x40>)
 8002c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c58:	08002c91 	.word	0x08002c91
 8002c5c:	08002cb3 	.word	0x08002cb3
 8002c60:	08002cb3 	.word	0x08002cb3
 8002c64:	08002cb3 	.word	0x08002cb3
 8002c68:	08002cad 	.word	0x08002cad
 8002c6c:	08002cad 	.word	0x08002cad
 8002c70:	08002cad 	.word	0x08002cad
 8002c74:	08002cad 	.word	0x08002cad
 8002c78:	08002cad 	.word	0x08002cad
 8002c7c:	08002cb3 	.word	0x08002cb3
 8002c80:	08002cb3 	.word	0x08002cb3
 8002c84:	08002cad 	.word	0x08002cad
 8002c88:	08002cad 	.word	0x08002cad
 8002c8c:	08002cb3 	.word	0x08002cb3
		    /*
            uint8_t taddr[4];
            getSIPR(taddr);
            */
            uint32_t taddr;
            getSIPR((uint8_t*)&taddr);
 8002c90:	f107 0308 	add.w	r3, r7, #8
 8002c94:	2204      	movs	r2, #4
 8002c96:	4619      	mov	r1, r3
 8002c98:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002c9c:	f7ff fdb6 	bl	800280c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d107      	bne.n	8002cb6 <socket+0x9e>
 8002ca6:	f06f 0302 	mvn.w	r3, #2
 8002caa:	e0da      	b.n	8002e62 <socket+0x24a>
      #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
      #endif
      default :
        return SOCKERR_SOCKMODE;
 8002cac:	f06f 0304 	mvn.w	r3, #4
 8002cb0:	e0d7      	b.n	8002e62 <socket+0x24a>
         break; 
 8002cb2:	bf00      	nop
 8002cb4:	e000      	b.n	8002cb8 <socket+0xa0>
            break;
 8002cb6:	bf00      	nop
   } 
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <socket+0xb0>
 8002cc2:	f06f 0305 	mvn.w	r3, #5
 8002cc6:	e0cc      	b.n	8002e62 <socket+0x24a>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
   if(flag != 0)
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d028      	beq.n	8002d20 <socket+0x108>
   {
      switch(protocol)
 8002cce:	79bb      	ldrb	r3, [r7, #6]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d002      	beq.n	8002cda <socket+0xc2>
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d008      	beq.n	8002cea <socket+0xd2>
         break;

#endif 

         default:
            break;
 8002cd8:	e022      	b.n	8002d20 <socket+0x108>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d11a      	bne.n	8002d1a <socket+0x102>
 8002ce4:	f06f 0305 	mvn.w	r3, #5
 8002ce8:	e0bb      	b.n	8002e62 <socket+0x24a>
   	      if(flag & SF_IGMP_VER2)
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	f003 0320 	and.w	r3, r3, #32
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d006      	beq.n	8002d02 <socket+0xea>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002cf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	db02      	blt.n	8002d02 <socket+0xea>
 8002cfc:	f06f 0305 	mvn.w	r3, #5
 8002d00:	e0af      	b.n	8002e62 <socket+0x24a>
      	      if(flag & SF_UNI_BLOCK)
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	f003 0310 	and.w	r3, r3, #16
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <socket+0x106>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002d0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	db04      	blt.n	8002d1e <socket+0x106>
 8002d14:	f06f 0305 	mvn.w	r3, #5
 8002d18:	e0a3      	b.n	8002e62 <socket+0x24a>
   	      break;
 8002d1a:	bf00      	nop
 8002d1c:	e000      	b.n	8002d20 <socket+0x108>
         break;
 8002d1e:	bf00      	nop
      }
   }
   close(sn);
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 f8ac 	bl	8002e80 <close>
	//M20150601
#if _WIZCHIP_ == 5300   
   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
#else
   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	00d8      	lsls	r0, r3, #3
 8002d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d34:	f023 030f 	bic.w	r3, r3, #15
 8002d38:	b25a      	sxtb	r2, r3
 8002d3a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	b25b      	sxtb	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	4619      	mov	r1, r3
 8002d46:	f7ff fd13 	bl	8002770 <WIZCHIP_WRITE>
#endif
#ifdef IPV6_AVAILABLE
   setSn_MR2(sn, flag & 0x03);  
#endif 
   if(!port)
 8002d4a:	88bb      	ldrh	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d110      	bne.n	8002d72 <socket+0x15a>
   {
      port = sock_any_port++;
 8002d50:	4b46      	ldr	r3, [pc, #280]	@ (8002e6c <socket+0x254>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	b291      	uxth	r1, r2
 8002d58:	4a44      	ldr	r2, [pc, #272]	@ (8002e6c <socket+0x254>)
 8002d5a:	8011      	strh	r1, [r2, #0]
 8002d5c:	80bb      	strh	r3, [r7, #4]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002d5e:	4b43      	ldr	r3, [pc, #268]	@ (8002e6c <socket+0x254>)
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d103      	bne.n	8002d72 <socket+0x15a>
 8002d6a:	4b40      	ldr	r3, [pc, #256]	@ (8002e6c <socket+0x254>)
 8002d6c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8002d70:	801a      	strh	r2, [r3, #0]
   }
   setSn_PORTR(sn,port);
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	3301      	adds	r3, #1
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d7e:	461a      	mov	r2, r3
 8002d80:	88bb      	ldrh	r3, [r7, #4]
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	f7ff fcf0 	bl	8002770 <WIZCHIP_WRITE>
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	3301      	adds	r3, #1
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	88bb      	ldrh	r3, [r7, #4]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	4619      	mov	r1, r3
 8002da4:	4610      	mov	r0, r2
 8002da6:	f7ff fce3 	bl	8002770 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	3301      	adds	r3, #1
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002db6:	2101      	movs	r1, #1
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fcd9 	bl	8002770 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002dbe:	bf00      	nop
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fc83 	bl	80026d8 <WIZCHIP_READ>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f3      	bne.n	8002dc0 <socket+0x1a8>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	b21b      	sxth	r3, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	b21a      	sxth	r2, r3
 8002de6:	4b22      	ldr	r3, [pc, #136]	@ (8002e70 <socket+0x258>)
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	b21b      	sxth	r3, r3
 8002dec:	4013      	ands	r3, r2
 8002dee:	b21b      	sxth	r3, r3
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	4b1f      	ldr	r3, [pc, #124]	@ (8002e70 <socket+0x258>)
 8002df4:	801a      	strh	r2, [r3, #0]
   //
#ifndef IPV6_AVAILABLE
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002df6:	78fb      	ldrb	r3, [r7, #3]
 8002df8:	f003 0201 	and.w	r2, r3, #1
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	b21a      	sxth	r2, r3
 8002e04:	4b1a      	ldr	r3, [pc, #104]	@ (8002e70 <socket+0x258>)
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	b21b      	sxth	r3, r3
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	b21b      	sxth	r3, r3
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	4b17      	ldr	r3, [pc, #92]	@ (8002e70 <socket+0x258>)
 8002e12:	801a      	strh	r2, [r3, #0]
#else
   sock_io_mode |= ((flag & (SF_IO_NONBLOCK>>3)) << sn);
#endif
   sock_is_sending &= ~(1<<sn);
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	2201      	movs	r2, #1
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	b21b      	sxth	r3, r3
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	b21a      	sxth	r2, r3
 8002e22:	4b14      	ldr	r3, [pc, #80]	@ (8002e74 <socket+0x25c>)
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	b21b      	sxth	r3, r3
 8002e28:	4013      	ands	r3, r2
 8002e2a:	b21b      	sxth	r3, r3
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	4b11      	ldr	r3, [pc, #68]	@ (8002e74 <socket+0x25c>)
 8002e30:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	4a10      	ldr	r2, [pc, #64]	@ (8002e78 <socket+0x260>)
 8002e36:	2100      	movs	r1, #0
 8002e38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;//PACK_COMPLETED //TODO::need verify:LINAN 20250421
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	4a0f      	ldr	r2, [pc, #60]	@ (8002e7c <socket+0x264>)
 8002e40:	2100      	movs	r1, #0
 8002e42:	54d1      	strb	r1, [r2, r3]
  //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002e44:	bf00      	nop
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fc40 	bl	80026d8 <WIZCHIP_READ>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f3      	beq.n	8002e46 <socket+0x22e>
   return (int8_t)sn;
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}  
 8002e62:	4618      	mov	r0, r3
 8002e64:	3724      	adds	r7, #36	@ 0x24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd90      	pop	{r4, r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	2000007c 	.word	0x2000007c
 8002e70:	2000049c 	.word	0x2000049c
 8002e74:	2000049e 	.word	0x2000049e
 8002e78:	200004a0 	.word	0x200004a0
 8002e7c:	200004b0 	.word	0x200004b0

08002e80 <close>:

int8_t close(uint8_t sn)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	2b07      	cmp	r3, #7
 8002e8e:	d902      	bls.n	8002e96 <close+0x16>
 8002e90:	f04f 33ff 	mov.w	r3, #4294967295
 8002e94:	e055      	b.n	8002f42 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
   setSn_CR(sn,Sn_CR_CLOSE);
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002ea2:	2110      	movs	r1, #16
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff fc63 	bl	8002770 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 8002eaa:	bf00      	nop
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fc0d 	bl	80026d8 <WIZCHIP_READ>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f3      	bne.n	8002eac <close+0x2c>
   /* clear all interrupt of SOCKETn. */
   setSn_IR(sn, 0xFF);  	
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	3301      	adds	r3, #1
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002ed0:	211f      	movs	r1, #31
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fc4c 	bl	8002770 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
   sock_io_mode &= ~(1<<sn); 
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	2201      	movs	r2, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	b21b      	sxth	r3, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	b21a      	sxth	r2, r3
 8002ee6:	4b19      	ldr	r3, [pc, #100]	@ (8002f4c <close+0xcc>)
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	b21b      	sxth	r3, r3
 8002eec:	4013      	ands	r3, r2
 8002eee:	b21b      	sxth	r3, r3
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	4b16      	ldr	r3, [pc, #88]	@ (8002f4c <close+0xcc>)
 8002ef4:	801a      	strh	r2, [r3, #0]
	//
   sock_is_sending &= ~(1<<sn);
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	b21b      	sxth	r3, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	b21a      	sxth	r2, r3
 8002f04:	4b12      	ldr	r3, [pc, #72]	@ (8002f50 <close+0xd0>)
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	b21b      	sxth	r3, r3
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	b21b      	sxth	r3, r3
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	4b0f      	ldr	r3, [pc, #60]	@ (8002f50 <close+0xd0>)
 8002f12:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	4a0f      	ldr	r2, [pc, #60]	@ (8002f54 <close+0xd4>)
 8002f18:	2100      	movs	r1, #0
 8002f1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	4a0d      	ldr	r2, [pc, #52]	@ (8002f58 <close+0xd8>)
 8002f22:	2100      	movs	r1, #0
 8002f24:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) != SOCK_CLOSED);
 8002f26:	bf00      	nop
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff fbcf 	bl	80026d8 <WIZCHIP_READ>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1f3      	bne.n	8002f28 <close+0xa8>
   return SOCK_OK;
 8002f40:	2301      	movs	r3, #1
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	2000049c 	.word	0x2000049c
 8002f50:	2000049e 	.word	0x2000049e
 8002f54:	200004a0 	.word	0x200004a0
 8002f58:	200004b0 	.word	0x200004b0

08002f5c <connect_W5x00>:
      return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
}
//int8_t connect (uint8_t sn, uint8_t * addr, uint16_t port )
int8_t connect_W5x00(uint8_t sn, uint8_t * addr, uint16_t port  ){
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	6039      	str	r1, [r7, #0]
 8002f66:	71fb      	strb	r3, [r7, #7]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	80bb      	strh	r3, [r7, #4]
   // printf(" W5x00 - connect - addrlen = %d \r\n" , 4 );
   // #ifdef IPV6_AVAILABLE
   // TODO :define how to work, when IPV6_AVAILABLE is defined
   // #endif 
   return connect_IO_6(sn , addr , port, 4 );
 8002f6c:	88ba      	ldrh	r2, [r7, #4]
 8002f6e:	79f8      	ldrb	r0, [r7, #7]
 8002f70:	2304      	movs	r3, #4
 8002f72:	6839      	ldr	r1, [r7, #0]
 8002f74:	f000 f806 	bl	8002f84 <connect_IO_6>
 8002f78:	4603      	mov	r3, r0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <connect_IO_6>:
   // #endif 
   return connect_IO_6(sn , addr , port ,addrlen );
}

static int8_t connect_IO_6 (uint8_t sn, uint8_t * addr, uint16_t port, uint8_t addrlen )
{ 
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6039      	str	r1, [r7, #0]
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	461a      	mov	r2, r3
 8002f90:	4603      	mov	r3, r0
 8002f92:	71fb      	strb	r3, [r7, #7]
 8002f94:	460b      	mov	r3, r1
 8002f96:	80bb      	strh	r3, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	71bb      	strb	r3, [r7, #6]

   // printf(" connect - addrlen = %d \r\n" , addrlen );

   CHECK_SOCKNUM();
 8002f9c:	79fb      	ldrb	r3, [r7, #7]
 8002f9e:	2b07      	cmp	r3, #7
 8002fa0:	d902      	bls.n	8002fa8 <connect_IO_6+0x24>
 8002fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa6:	e0d9      	b.n	800315c <connect_IO_6+0x1d8>
   CHECK_TCPMODE(); // same macro " CHECK_SOCKMODE(Sn_MR_TCP);"
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	3301      	adds	r3, #1
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff fb91 	bl	80026d8 <WIZCHIP_READ>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d002      	beq.n	8002fc6 <connect_IO_6+0x42>
 8002fc0:	f06f 0304 	mvn.w	r3, #4
 8002fc4:	e0ca      	b.n	800315c <connect_IO_6+0x1d8>
   CHECK_SOCKINIT();
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	3301      	adds	r3, #1
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fb80 	bl	80026d8 <WIZCHIP_READ>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b13      	cmp	r3, #19
 8002fdc:	d002      	beq.n	8002fe4 <connect_IO_6+0x60>
 8002fde:	f06f 0302 	mvn.w	r3, #2
 8002fe2:	e0bb      	b.n	800315c <connect_IO_6+0x1d8>
#else
//M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
   uint32_t taddr;
   taddr = ((uint32_t)addr[0] & 0x000000FF);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	60fb      	str	r3, [r7, #12]
   taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	3201      	adds	r2, #1
 8002ff2:	7812      	ldrb	r2, [r2, #0]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]
   taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	021b      	lsls	r3, r3, #8
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	3202      	adds	r2, #2
 8003000:	7812      	ldrb	r2, [r2, #0]
 8003002:	4413      	add	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]
   taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	021b      	lsls	r3, r3, #8
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	3203      	adds	r2, #3
 800300e:	7812      	ldrb	r2, [r2, #0]
 8003010:	4413      	add	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]
   if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301a:	d002      	beq.n	8003022 <connect_IO_6+0x9e>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d102      	bne.n	8003028 <connect_IO_6+0xa4>
 8003022:	f06f 030b 	mvn.w	r3, #11
 8003026:	e099      	b.n	800315c <connect_IO_6+0x1d8>
   }
   #endif 

   if(port == 0) return SOCKERR_PORTZERO;
 8003028:	88bb      	ldrh	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d102      	bne.n	8003034 <connect_IO_6+0xb0>
 800302e:	f06f 030a 	mvn.w	r3, #10
 8003032:	e093      	b.n	800315c <connect_IO_6+0x1d8>

   setSn_DPORTR(sn, port);
 8003034:	79fb      	ldrb	r3, [r7, #7]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	3301      	adds	r3, #1
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003040:	461a      	mov	r2, r3
 8003042:	88bb      	ldrh	r3, [r7, #4]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	b29b      	uxth	r3, r3
 8003048:	b2db      	uxtb	r3, r3
 800304a:	4619      	mov	r1, r3
 800304c:	4610      	mov	r0, r2
 800304e:	f7ff fb8f 	bl	8002770 <WIZCHIP_WRITE>
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	3301      	adds	r3, #1
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 800305e:	461a      	mov	r2, r3
 8003060:	88bb      	ldrh	r3, [r7, #4]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	4619      	mov	r1, r3
 8003066:	4610      	mov	r0, r2
 8003068:	f7ff fb82 	bl	8002770 <WIZCHIP_WRITE>
  
   if (addrlen == 16)     // addrlen=16, Sn_MR_TCP6(1001), Sn_MR_TCPD(1101))
 800306c:	79bb      	ldrb	r3, [r7, #6]
 800306e:	2b10      	cmp	r3, #16
 8003070:	d102      	bne.n	8003078 <connect_IO_6+0xf4>
         setSn_DIP6R(sn,addr);
         setSn_CR(sn,Sn_CR_CONNECT6);
      }
      else 
#endif 
      return SOCKERR_SOCKMODE;
 8003072:	f06f 0304 	mvn.w	r3, #4
 8003076:	e071      	b.n	800315c <connect_IO_6+0x1d8>
   } 
   else           // addrlen=4, Sn_MR_TCP4(0001), Sn_MR_TCPD(1101)
   {
      if(getSn_MR(sn) == Sn_MR_TCP6) return SOCKERR_SOCKMODE;
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	3301      	adds	r3, #1
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fb29 	bl	80026d8 <WIZCHIP_READ>
 8003086:	4603      	mov	r3, r0
 8003088:	2b09      	cmp	r3, #9
 800308a:	d102      	bne.n	8003092 <connect_IO_6+0x10e>
 800308c:	f06f 0304 	mvn.w	r3, #4
 8003090:	e064      	b.n	800315c <connect_IO_6+0x1d8>
      setSn_DIPR(sn,addr);
 8003092:	79fb      	ldrb	r3, [r7, #7]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	3301      	adds	r3, #1
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 800309e:	2204      	movs	r2, #4
 80030a0:	6839      	ldr	r1, [r7, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fc12 	bl	80028cc <WIZCHIP_WRITE_BUF>
	   //setSn_DPORT(sn,port); //TODO::need verify:LINAN 20250421
      setSn_CR(sn,Sn_CR_CONNECT);
 80030a8:	79fb      	ldrb	r3, [r7, #7]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	3301      	adds	r3, #1
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80030b4:	2104      	movs	r1, #4
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff fb5a 	bl	8002770 <WIZCHIP_WRITE>
   }
   while(getSn_CR(sn));
 80030bc:	bf00      	nop
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	3301      	adds	r3, #1
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fb04 	bl	80026d8 <WIZCHIP_READ>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f3      	bne.n	80030be <connect_IO_6+0x13a>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80030d6:	4b23      	ldr	r3, [pc, #140]	@ (8003164 <connect_IO_6+0x1e0>)
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	fa42 f303 	asr.w	r3, r2, r3
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d02b      	beq.n	8003142 <connect_IO_6+0x1be>
 80030ea:	2300      	movs	r3, #0
 80030ec:	e036      	b.n	800315c <connect_IO_6+0x1d8>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
      if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	3301      	adds	r3, #1
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff faec 	bl	80026d8 <WIZCHIP_READ>
 8003100:	4603      	mov	r3, r0
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00c      	beq.n	8003124 <connect_IO_6+0x1a0>
      {
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	3301      	adds	r3, #1
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003116:	2108      	movs	r1, #8
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fb29 	bl	8002770 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 800311e:	f06f 030c 	mvn.w	r3, #12
 8003122:	e01b      	b.n	800315c <connect_IO_6+0x1d8>
      }

      if (getSn_SR(sn) == SOCK_CLOSED)
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	3301      	adds	r3, #1
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fad1 	bl	80026d8 <WIZCHIP_READ>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d102      	bne.n	8003142 <connect_IO_6+0x1be>
      {
         return SOCKERR_SOCKCLOSED;
 800313c:	f06f 0303 	mvn.w	r3, #3
 8003140:	e00c      	b.n	800315c <connect_IO_6+0x1d8>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	3301      	adds	r3, #1
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fac2 	bl	80026d8 <WIZCHIP_READ>
 8003154:	4603      	mov	r3, r0
 8003156:	2b17      	cmp	r3, #23
 8003158:	d1c9      	bne.n	80030ee <connect_IO_6+0x16a>
      }
   } 
   
   return SOCK_OK;
 800315a:	2301      	movs	r3, #1
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	2000049c 	.word	0x2000049c

08003168 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	2b07      	cmp	r3, #7
 8003176:	d902      	bls.n	800317e <disconnect+0x16>
 8003178:	f04f 33ff 	mov.w	r3, #4294967295
 800317c:	e06e      	b.n	800325c <disconnect+0xf4>
   CHECK_TCPMODE();
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	3301      	adds	r3, #1
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff faa6 	bl	80026d8 <WIZCHIP_READ>
 800318c:	4603      	mov	r3, r0
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b01      	cmp	r3, #1
 8003194:	d002      	beq.n	800319c <disconnect+0x34>
 8003196:	f06f 0304 	mvn.w	r3, #4
 800319a:	e05f      	b.n	800325c <disconnect+0xf4>
   if(getSn_SR(sn) != SOCK_CLOSED)
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	3301      	adds	r3, #1
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fa95 	bl	80026d8 <WIZCHIP_READ>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d052      	beq.n	800325a <disconnect+0xf2>
   {
      setSn_CR(sn,Sn_CR_DISCON);
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	3301      	adds	r3, #1
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80031c0:	2108      	movs	r1, #8
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fad4 	bl	8002770 <WIZCHIP_WRITE>
      /* wait to process the command... */
      while(getSn_CR(sn));
 80031c8:	bf00      	nop
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	3301      	adds	r3, #1
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fa7e 	bl	80026d8 <WIZCHIP_READ>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f3      	bne.n	80031ca <disconnect+0x62>
	   sock_is_sending &= ~(1<<sn);
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	2201      	movs	r2, #1
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	b21b      	sxth	r3, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	b21a      	sxth	r2, r3
 80031f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003264 <disconnect+0xfc>)
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	b21b      	sxth	r3, r3
 80031f6:	4013      	ands	r3, r2
 80031f8:	b21b      	sxth	r3, r3
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	4b19      	ldr	r3, [pc, #100]	@ (8003264 <disconnect+0xfc>)
 80031fe:	801a      	strh	r2, [r3, #0]
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003200:	4b19      	ldr	r3, [pc, #100]	@ (8003268 <disconnect+0x100>)
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	fa42 f303 	asr.w	r3, r2, r3
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d016      	beq.n	8003242 <disconnect+0xda>
 8003214:	2300      	movs	r3, #0
 8003216:	e021      	b.n	800325c <disconnect+0xf4>
      while(getSn_SR(sn) != SOCK_CLOSED)
      {
         if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	3301      	adds	r3, #1
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fa57 	bl	80026d8 <WIZCHIP_READ>
 800322a:	4603      	mov	r3, r0
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b00      	cmp	r3, #0
 8003232:	d006      	beq.n	8003242 <disconnect+0xda>
         {
            close(sn);
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fe22 	bl	8002e80 <close>
            return SOCKERR_TIMEOUT;
 800323c:	f06f 030c 	mvn.w	r3, #12
 8003240:	e00c      	b.n	800325c <disconnect+0xf4>
      while(getSn_SR(sn) != SOCK_CLOSED)
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	3301      	adds	r3, #1
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff fa42 	bl	80026d8 <WIZCHIP_READ>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1de      	bne.n	8003218 <disconnect+0xb0>
         }
      }
   }
   return SOCK_OK;
 800325a:	2301      	movs	r3, #1
}
 800325c:	4618      	mov	r0, r3
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	2000049e 	.word	0x2000049e
 8003268:	2000049c 	.word	0x2000049c

0800326c <send>:


#if 1
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	6039      	str	r1, [r7, #0]
 8003276:	71fb      	strb	r3, [r7, #7]
 8003278:	4613      	mov	r3, r2
 800327a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 800327c:	2300      	movs	r3, #0
 800327e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8003280:	2300      	movs	r3, #0
 8003282:	81bb      	strh	r3, [r7, #12]
    */
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE(Sn_MR_TCP4);
   /************/
#ifndef IPV6_AVAILABLE
   CHECK_SOCKNUM();
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	2b07      	cmp	r3, #7
 8003288:	d902      	bls.n	8003290 <send+0x24>
 800328a:	f04f 33ff 	mov.w	r3, #4294967295
 800328e:	e138      	b.n	8003502 <send+0x296>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	3301      	adds	r3, #1
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff fa1d 	bl	80026d8 <WIZCHIP_READ>
 800329e:	4603      	mov	r3, r0
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d002      	beq.n	80032ae <send+0x42>
 80032a8:	f06f 0304 	mvn.w	r3, #4
 80032ac:	e129      	b.n	8003502 <send+0x296>
   CHECK_SOCKDATA();
 80032ae:	88bb      	ldrh	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d102      	bne.n	80032ba <send+0x4e>
 80032b4:	f06f 030d 	mvn.w	r3, #13
 80032b8:	e123      	b.n	8003502 <send+0x296>
   tmp = getSn_SR(sn);
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	3301      	adds	r3, #1
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fa06 	bl	80026d8 <WIZCHIP_READ>
 80032cc:	4603      	mov	r3, r0
 80032ce:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	2b17      	cmp	r3, #23
 80032d4:	d005      	beq.n	80032e2 <send+0x76>
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	2b1c      	cmp	r3, #28
 80032da:	d002      	beq.n	80032e2 <send+0x76>
 80032dc:	f06f 0306 	mvn.w	r3, #6
 80032e0:	e10f      	b.n	8003502 <send+0x296>
   if( sock_is_sending & (1<<sn) )
 80032e2:	4b8a      	ldr	r3, [pc, #552]	@ (800350c <send+0x2a0>)
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	fa42 f303 	asr.w	r3, r2, r3
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d039      	beq.n	800336a <send+0xfe>
   {
      tmp = getSn_IR(sn);
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	3301      	adds	r3, #1
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff f9e8 	bl	80026d8 <WIZCHIP_READ>
 8003308:	4603      	mov	r3, r0
 800330a:	f003 031f 	and.w	r3, r3, #31
 800330e:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	2b00      	cmp	r3, #0
 8003318:	d019      	beq.n	800334e <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	3301      	adds	r3, #1
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003326:	2110      	movs	r1, #16
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fa21 	bl	8002770 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	2201      	movs	r2, #1
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	b21b      	sxth	r3, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	b21a      	sxth	r2, r3
 800333c:	4b73      	ldr	r3, [pc, #460]	@ (800350c <send+0x2a0>)
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	b21b      	sxth	r3, r3
 8003342:	4013      	ands	r3, r2
 8003344:	b21b      	sxth	r3, r3
 8003346:	b29a      	uxth	r2, r3
 8003348:	4b70      	ldr	r3, [pc, #448]	@ (800350c <send+0x2a0>)
 800334a:	801a      	strh	r2, [r3, #0]
 800334c:	e00d      	b.n	800336a <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800334e:	7bfb      	ldrb	r3, [r7, #15]
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	2b00      	cmp	r3, #0
 8003356:	d006      	beq.n	8003366 <send+0xfa>
      {
         close(sn);
 8003358:	79fb      	ldrb	r3, [r7, #7]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff fd90 	bl	8002e80 <close>
         return SOCKERR_TIMEOUT;
 8003360:	f06f 030c 	mvn.w	r3, #12
 8003364:	e0cd      	b.n	8003502 <send+0x296>
      }
      else return SOCK_BUSY;
 8003366:	2300      	movs	r3, #0
 8003368:	e0cb      	b.n	8003502 <send+0x296>
   }
#endif 
   freesize = getSn_TxMAX(sn);
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	3301      	adds	r3, #1
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff f9ae 	bl	80026d8 <WIZCHIP_READ>
 800337c:	4603      	mov	r3, r0
 800337e:	029b      	lsls	r3, r3, #10
 8003380:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003382:	88ba      	ldrh	r2, [r7, #4]
 8003384:	89bb      	ldrh	r3, [r7, #12]
 8003386:	429a      	cmp	r2, r3
 8003388:	d901      	bls.n	800338e <send+0x122>
 800338a:	89bb      	ldrh	r3, [r7, #12]
 800338c:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = (uint16_t)getSn_TX_FSR(sn);
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fafb 	bl	800298c <getSn_TX_FSR>
 8003396:	4603      	mov	r3, r0
 8003398:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	3301      	adds	r3, #1
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff f996 	bl	80026d8 <WIZCHIP_READ>
 80033ac:	4603      	mov	r3, r0
 80033ae:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	2b17      	cmp	r3, #23
 80033b4:	d00c      	beq.n	80033d0 <send+0x164>
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
 80033b8:	2b1c      	cmp	r3, #28
 80033ba:	d009      	beq.n	80033d0 <send+0x164>
      {
         if(tmp == SOCK_CLOSED) close(sn);
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d103      	bne.n	80033ca <send+0x15e>
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff fd5b 	bl	8002e80 <close>
         return SOCKERR_SOCKSTATUS;
 80033ca:	f06f 0306 	mvn.w	r3, #6
 80033ce:	e098      	b.n	8003502 <send+0x296>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY; //TODO::need verify:LINAN 20250421
 80033d0:	4b4f      	ldr	r3, [pc, #316]	@ (8003510 <send+0x2a4>)
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	461a      	mov	r2, r3
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	fa42 f303 	asr.w	r3, r2, r3
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <send+0x184>
 80033e4:	88ba      	ldrh	r2, [r7, #4]
 80033e6:	89bb      	ldrh	r3, [r7, #12]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d901      	bls.n	80033f0 <send+0x184>
 80033ec:	2300      	movs	r3, #0
 80033ee:	e088      	b.n	8003502 <send+0x296>
     // if( sock_io_mode & (1<<sn) ) return SOCK_BUSY;  //TODO::need verify:LINAN 20250421
      if(len <= freesize) break;
 80033f0:	88ba      	ldrh	r2, [r7, #4]
 80033f2:	89bb      	ldrh	r3, [r7, #12]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d900      	bls.n	80033fa <send+0x18e>
      freesize = (uint16_t)getSn_TX_FSR(sn);
 80033f8:	e7c9      	b.n	800338e <send+0x122>
      if(len <= freesize) break;
 80033fa:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80033fc:	88ba      	ldrh	r2, [r7, #4]
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	6839      	ldr	r1, [r7, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fb54 	bl	8002ab0 <wiz_send_data>
#endif

#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn,len);
#endif
   if(sock_is_sending & (1<<sn))
 8003408:	4b40      	ldr	r3, [pc, #256]	@ (800350c <send+0x2a0>)
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	461a      	mov	r2, r3
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	fa42 f303 	asr.w	r3, r2, r3
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d04d      	beq.n	80034b8 <send+0x24c>
   {
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 800341c:	e034      	b.n	8003488 <send+0x21c>
      {    
         tmp = getSn_SR(sn);
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	3301      	adds	r3, #1
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff f954 	bl	80026d8 <WIZCHIP_READ>
 8003430:	4603      	mov	r3, r0
 8003432:	73fb      	strb	r3, [r7, #15]
         if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT) )
 8003434:	7bfb      	ldrb	r3, [r7, #15]
 8003436:	2b17      	cmp	r3, #23
 8003438:	d01a      	beq.n	8003470 <send+0x204>
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	2b1c      	cmp	r3, #28
 800343e:	d017      	beq.n	8003470 <send+0x204>
         {
            if( (tmp == SOCK_CLOSED) || (getSn_IR(sn) & Sn_IR_TIMEOUT) ) close(sn);
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00d      	beq.n	8003462 <send+0x1f6>
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	3301      	adds	r3, #1
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff f940 	bl	80026d8 <WIZCHIP_READ>
 8003458:	4603      	mov	r3, r0
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <send+0x1fe>
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fd0b 	bl	8002e80 <close>
            return SOCKERR_SOCKSTATUS;
 800346a:	f06f 0306 	mvn.w	r3, #6
 800346e:	e048      	b.n	8003502 <send+0x296>
         }
         if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8003470:	4b27      	ldr	r3, [pc, #156]	@ (8003510 <send+0x2a4>)
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	79fb      	ldrb	r3, [r7, #7]
 8003478:	fa42 f303 	asr.w	r3, r2, r3
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <send+0x21c>
 8003484:	2300      	movs	r3, #0
 8003486:	e03c      	b.n	8003502 <send+0x296>
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	3301      	adds	r3, #1
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff f91f 	bl	80026d8 <WIZCHIP_READ>
 800349a:	4603      	mov	r3, r0
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0bc      	beq.n	800341e <send+0x1b2>
      } 
      setSn_IR(sn, Sn_IR_SENDOK);
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	3301      	adds	r3, #1
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80034b0:	2110      	movs	r1, #16
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff f95c 	bl	8002770 <WIZCHIP_WRITE>
   }
   setSn_CR(sn,Sn_CR_SEND);
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	3301      	adds	r3, #1
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80034c4:	2120      	movs	r1, #32
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff f952 	bl	8002770 <WIZCHIP_WRITE>
 
   while(getSn_CR(sn));   // wait to process the command...
 80034cc:	bf00      	nop
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	3301      	adds	r3, #1
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff f8fc 	bl	80026d8 <WIZCHIP_READ>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f3      	bne.n	80034ce <send+0x262>
   sock_is_sending |= (1<<sn);
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	2201      	movs	r2, #1
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	b21a      	sxth	r2, r3
 80034f0:	4b06      	ldr	r3, [pc, #24]	@ (800350c <send+0x2a0>)
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	b21b      	sxth	r3, r3
 80034f6:	4313      	orrs	r3, r2
 80034f8:	b21b      	sxth	r3, r3
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	4b03      	ldr	r3, [pc, #12]	@ (800350c <send+0x2a0>)
 80034fe:	801a      	strh	r2, [r3, #0]
 
   return len;
 8003500:	88bb      	ldrh	r3, [r7, #4]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	2000049e 	.word	0x2000049e
 8003510:	2000049c 	.word	0x2000049c

08003514 <recv>:
 
   return len;
}
#endif 
int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)//lihan
{
 8003514:	b590      	push	{r4, r7, lr}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	6039      	str	r1, [r7, #0]
 800351e:	71fb      	strb	r3, [r7, #7]
 8003520:	4613      	mov	r3, r2
 8003522:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	2b07      	cmp	r3, #7
 8003530:	d902      	bls.n	8003538 <recv+0x24>
 8003532:	f04f 33ff 	mov.w	r3, #4294967295
 8003536:	e098      	b.n	800366a <recv+0x156>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003538:	79fb      	ldrb	r3, [r7, #7]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	3301      	adds	r3, #1
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff f8c9 	bl	80026d8 <WIZCHIP_READ>
 8003546:	4603      	mov	r3, r0
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	2b01      	cmp	r3, #1
 800354e:	d002      	beq.n	8003556 <recv+0x42>
 8003550:	f06f 0304 	mvn.w	r3, #4
 8003554:	e089      	b.n	800366a <recv+0x156>
   CHECK_SOCKDATA();
 8003556:	88bb      	ldrh	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d102      	bne.n	8003562 <recv+0x4e>
 800355c:	f06f 030d 	mvn.w	r3, #13
 8003560:	e083      	b.n	800366a <recv+0x156>
   
   recvsize = getSn_RxMAX(sn); 
 8003562:	79fb      	ldrb	r3, [r7, #7]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	3301      	adds	r3, #1
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff f8b2 	bl	80026d8 <WIZCHIP_READ>
 8003574:	4603      	mov	r3, r0
 8003576:	029b      	lsls	r3, r3, #10
 8003578:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 800357a:	89ba      	ldrh	r2, [r7, #12]
 800357c:	88bb      	ldrh	r3, [r7, #4]
 800357e:	429a      	cmp	r2, r3
 8003580:	d201      	bcs.n	8003586 <recv+0x72>
 8003582:	89bb      	ldrh	r3, [r7, #12]
 8003584:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
   while(1)
   {
      recvsize = (uint16_t)getSn_RX_RSR(sn);
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff fa48 	bl	8002a1e <getSn_RX_RSR>
 800358e:	4603      	mov	r3, r0
 8003590:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	3301      	adds	r3, #1
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff f89a 	bl	80026d8 <WIZCHIP_READ>
 80035a4:	4603      	mov	r3, r0
 80035a6:	73fb      	strb	r3, [r7, #15]
      if (tmp != SOCK_ESTABLISHED)
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	2b17      	cmp	r3, #23
 80035ac:	d026      	beq.n	80035fc <recv+0xe8>
      {
         if(tmp == SOCK_CLOSE_WAIT)
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
 80035b0:	2b1c      	cmp	r3, #28
 80035b2:	d11c      	bne.n	80035ee <recv+0xda>
         {
            if(recvsize != 0) break;
 80035b4:	89bb      	ldrh	r3, [r7, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d130      	bne.n	800361c <recv+0x108>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff f9e5 	bl	800298c <getSn_TX_FSR>
 80035c2:	4603      	mov	r3, r0
 80035c4:	461c      	mov	r4, r3
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	3301      	adds	r3, #1
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff f880 	bl	80026d8 <WIZCHIP_READ>
 80035d8:	4603      	mov	r3, r0
 80035da:	029b      	lsls	r3, r3, #10
 80035dc:	429c      	cmp	r4, r3
 80035de:	d10d      	bne.n	80035fc <recv+0xe8>
            {
               close(sn);
 80035e0:	79fb      	ldrb	r3, [r7, #7]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff fc4c 	bl	8002e80 <close>
               return SOCKERR_SOCKSTATUS;
 80035e8:	f06f 0306 	mvn.w	r3, #6
 80035ec:	e03d      	b.n	800366a <recv+0x156>
            }
         }
         else
         {
            close(sn);
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fc45 	bl	8002e80 <close>
            return SOCKERR_SOCKSTATUS;
 80035f6:	f06f 0306 	mvn.w	r3, #6
 80035fa:	e036      	b.n	800366a <recv+0x156>
      }
#ifdef IPV6_AVAILABLE
      if(recvsize != 0) break;
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
#else
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80035fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003674 <recv+0x160>)
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	461a      	mov	r2, r3
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	fa42 f303 	asr.w	r3, r2, r3
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <recv+0x100>
 8003610:	2300      	movs	r3, #0
 8003612:	e02a      	b.n	800366a <recv+0x156>
      if(recvsize != 0) break;
 8003614:	89bb      	ldrh	r3, [r7, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d102      	bne.n	8003620 <recv+0x10c>
      recvsize = (uint16_t)getSn_RX_RSR(sn);
 800361a:	e7b4      	b.n	8003586 <recv+0x72>
            if(recvsize != 0) break;
 800361c:	bf00      	nop
 800361e:	e000      	b.n	8003622 <recv+0x10e>
      if(recvsize != 0) break;
 8003620:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;
 8003622:	89ba      	ldrh	r2, [r7, #12]
 8003624:	88bb      	ldrh	r3, [r7, #4]
 8003626:	429a      	cmp	r2, r3
 8003628:	d201      	bcs.n	800362e <recv+0x11a>
 800362a:	89bb      	ldrh	r3, [r7, #12]
 800362c:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len); 
 800362e:	88ba      	ldrh	r2, [r7, #4]
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	6839      	ldr	r1, [r7, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff fa95 	bl	8002b64 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV); 
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	3301      	adds	r3, #1
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003646:	2140      	movs	r1, #64	@ 0x40
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff f891 	bl	8002770 <WIZCHIP_WRITE>
   while(getSn_CR(sn));  
 800364e:	bf00      	nop
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	3301      	adds	r3, #1
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff f83b 	bl	80026d8 <WIZCHIP_READ>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f3      	bne.n	8003650 <recv+0x13c>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003668:	88bb      	ldrh	r3, [r7, #4]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	bd90      	pop	{r4, r7, pc}
 8003672:	bf00      	nop
 8003674:	2000049c 	.word	0x2000049c

08003678 <SPIReadWrite>:
#include "stdio.h"

extern SPI_HandleTypeDef hspi2;

uint8_t SPIReadWrite(uint8_t data)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	71fb      	strb	r3, [r7, #7]
	//spi üzerinden bir byte veri gönderiliyor ve gelen cevap bekleniyor.
	//gönderdiğimiz data baytı spi sayesinde(full-dublex) aynı anda cevap döner
//	wait till FIFO has a free slot
	while ((hspi2.Instance ->SR & SPI_FLAG_TXE )!= SPI_FLAG_TXE); //txe: spi gönderme tamponu boşsa veri yazılır
 8003682:	bf00      	nop
 8003684:	4b0f      	ldr	r3, [pc, #60]	@ (80036c4 <SPIReadWrite+0x4c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b02      	cmp	r3, #2
 8003690:	d1f8      	bne.n	8003684 <SPIReadWrite+0xc>

	*(__IO uint8_t*)&hspi2.Instance->DR=data; //veriyi data register'a(dr) yazar,spi ile gönderir
 8003692:	4b0c      	ldr	r3, [pc, #48]	@ (80036c4 <SPIReadWrite+0x4c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	330c      	adds	r3, #12
 8003698:	79fa      	ldrb	r2, [r7, #7]
 800369a:	701a      	strb	r2, [r3, #0]

	//now wait till data arrives
	while((hspi2.Instance->SR &SPI_FLAG_RXNE)!=SPI_FLAG_RXNE);//rxne: cevap geldi mi diye bekler
 800369c:	bf00      	nop
 800369e:	4b09      	ldr	r3, [pc, #36]	@ (80036c4 <SPIReadWrite+0x4c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d1f8      	bne.n	800369e <SPIReadWrite+0x26>

	return (*(__IO uint8_t*)&hspi2.Instance->DR);//gelen cevabı döner
 80036ac:	4b05      	ldr	r3, [pc, #20]	@ (80036c4 <SPIReadWrite+0x4c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	330c      	adds	r3, #12
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	b2db      	uxtb	r3, r3
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	20000438 	.word	0x20000438

080036c8 <wizchip_select>:

void wizchip_select(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);//MAKES THE PIN LOW yapınca cihaz seçilir
 80036cc:	2200      	movs	r2, #0
 80036ce:	2102      	movs	r1, #2
 80036d0:	4802      	ldr	r0, [pc, #8]	@ (80036dc <wizchip_select+0x14>)
 80036d2:	f001 fa7f 	bl	8004bd4 <HAL_GPIO_WritePin>
}
 80036d6:	bf00      	nop
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40020000 	.word	0x40020000

080036e0 <wizchip_deselect>:

void wizchip_deselect(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); //MAKES THE PİN HIGH yapılınca iletişim kesilir
 80036e4:	2201      	movs	r2, #1
 80036e6:	2102      	movs	r1, #2
 80036e8:	4802      	ldr	r0, [pc, #8]	@ (80036f4 <wizchip_deselect+0x14>)
 80036ea:	f001 fa73 	bl	8004bd4 <HAL_GPIO_WritePin>
}//W5500 ile konuşmadan önce select(),iş bittiğinde deselect() yapılr
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40020000 	.word	0x40020000

080036f8 <wizchip_read>:

uint8_t wizchip_read()
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
	uint8_t rb;
	rb=SPIReadWrite(0x00);//dummy byte(spi'da Biz sadece veri almak isteriz,Ama SPI bir şey göndermeden alamaz.)
 80036fe:	2000      	movs	r0, #0
 8003700:	f7ff ffba 	bl	8003678 <SPIReadWrite>
 8003704:	4603      	mov	r3, r0
 8003706:	71fb      	strb	r3, [r7, #7]
	return rb; //yani burda dummy veri gönder,cevap al
 8003708:	79fb      	ldrb	r3, [r7, #7]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <wizchip_write>:

void wizchip_write(uint8_t wb)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
 8003718:	4603      	mov	r3, r0
 800371a:	71fb      	strb	r3, [r7, #7]
	SPIReadWrite(wb);//1 bayt veri gönder
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff ffaa 	bl	8003678 <SPIReadWrite>
}
 8003724:	bf00      	nop
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <wizchip_readburst>:

void wizchip_readburst(uint8_t* pBuf, uint16_t len)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 8003738:	2300      	movs	r3, #0
 800373a:	81fb      	strh	r3, [r7, #14]
 800373c:	e00c      	b.n	8003758 <wizchip_readburst+0x2c>
	{
		*pBuf=SPIReadWrite(0x00);
 800373e:	2000      	movs	r0, #0
 8003740:	f7ff ff9a 	bl	8003678 <SPIReadWrite>
 8003744:	4603      	mov	r3, r0
 8003746:	461a      	mov	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	701a      	strb	r2, [r3, #0]
		pBuf++;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3301      	adds	r3, #1
 8003750:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 8003752:	89fb      	ldrh	r3, [r7, #14]
 8003754:	3301      	adds	r3, #1
 8003756:	81fb      	strh	r3, [r7, #14]
 8003758:	89fa      	ldrh	r2, [r7, #14]
 800375a:	887b      	ldrh	r3, [r7, #2]
 800375c:	429a      	cmp	r2, r3
 800375e:	d3ee      	bcc.n	800373e <wizchip_readburst+0x12>
	}
}
 8003760:	bf00      	nop
 8003762:	bf00      	nop
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <wizchip_writeburst>:

void wizchip_writeburst(uint8_t* pBuf,uint16_t len)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	460b      	mov	r3, r1
 8003774:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 8003776:	2300      	movs	r3, #0
 8003778:	81fb      	strh	r3, [r7, #14]
 800377a:	e00a      	b.n	8003792 <wizchip_writeburst+0x28>
	{
		SPIReadWrite(*pBuf);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff ff79 	bl	8003678 <SPIReadWrite>
		pBuf++;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3301      	adds	r3, #1
 800378a:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 800378c:	89fb      	ldrh	r3, [r7, #14]
 800378e:	3301      	adds	r3, #1
 8003790:	81fb      	strh	r3, [r7, #14]
 8003792:	89fa      	ldrh	r2, [r7, #14]
 8003794:	887b      	ldrh	r3, [r7, #2]
 8003796:	429a      	cmp	r2, r3
 8003798:	d3f0      	bcc.n	800377c <wizchip_writeburst+0x12>
	}
}//w5500den çoklu veri okuma/yazma işlemlerinde kullanılır
 800379a:	bf00      	nop
 800379c:	bf00      	nop
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <W5500IOInit>:

void W5500IOInit()
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
	//initilize the two GPIO pins
	//reset -> pa
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037aa:	1d3b      	adds	r3, r7, #4
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	60da      	str	r2, [r3, #12]
 80037b6:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE(); //GPIOA portunun saatini aç
 80037b8:	2300      	movs	r3, #0
 80037ba:	603b      	str	r3, [r7, #0]
 80037bc:	4b0e      	ldr	r3, [pc, #56]	@ (80037f8 <W5500IOInit+0x54>)
 80037be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c0:	4a0d      	ldr	r2, [pc, #52]	@ (80037f8 <W5500IOInit+0x54>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80037c8:	4b0b      	ldr	r3, [pc, #44]	@ (80037f8 <W5500IOInit+0x54>)
 80037ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	603b      	str	r3, [r7, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1; //PA0(reset),PA1(CS) RESET pini: W5500'e donanımsal reset atmak için.
 80037d4:	2303      	movs	r3, #3
 80037d6:	607b      	str	r3, [r7, #4]
	//CS pini: SPI haberleşmesinde aktif olan cihazı seçmek için.
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037d8:	2301      	movs	r3, #1
 80037da:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037e0:	2302      	movs	r3, #2
 80037e2:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e4:	1d3b      	adds	r3, r7, #4
 80037e6:	4619      	mov	r1, r3
 80037e8:	4804      	ldr	r0, [pc, #16]	@ (80037fc <W5500IOInit+0x58>)
 80037ea:	f001 f85f 	bl	80048ac <HAL_GPIO_Init>
}
 80037ee:	bf00      	nop
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40020000 	.word	0x40020000

08003800 <w5500_enter_critical>:


void w5500_enter_critical(void)//SPI işlemi sırasında başka bir kesme işleminin araya girip karışıklık yaratmasını engeller.
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003804:	b672      	cpsid	i
}
 8003806:	bf00      	nop
	__disable_irq();// Tüm kesmeleri geçici olarak kapat
}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <w5500_exit_critical>:

void w5500_exit_critical(void)
{
 8003812:	b480      	push	{r7}
 8003814:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8003816:	b662      	cpsie	i
}
 8003818:	bf00      	nop
	__enable_irq();// Kesmeleri tekrar aç
}
 800381a:	bf00      	nop
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <W5500Init>:

void W5500Init()
{
 8003824:	b590      	push	{r4, r7, lr}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
	uint8_t tmp;
	uint8_t memsize[2][8] = { { 2, 2, 2, 2, 2, 2, 2, 2 }, { 2, 2, 2, 2, 2, 2, 2, 2 } };
 800382a:	4b2c      	ldr	r3, [pc, #176]	@ (80038dc <W5500Init+0xb8>)
 800382c:	1d3c      	adds	r4, r7, #4
 800382e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003830:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	W5500IOInit();// GPIO'ları başlat
 8003834:	f7ff ffb6 	bl	80037a4 <W5500IOInit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);//CS high by default,başta pasif
 8003838:	2201      	movs	r2, #1
 800383a:	2102      	movs	r1, #2
 800383c:	4828      	ldr	r0, [pc, #160]	@ (80038e0 <W5500Init+0xbc>)
 800383e:	f001 f9c9 	bl	8004bd4 <HAL_GPIO_WritePin>

	//Send a pulse on reset pin
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // Reset pini LOW
 8003842:	2200      	movs	r2, #0
 8003844:	2101      	movs	r1, #1
 8003846:	4826      	ldr	r0, [pc, #152]	@ (80038e0 <W5500Init+0xbc>)
 8003848:	f001 f9c4 	bl	8004bd4 <HAL_GPIO_WritePin>
	tmp = 0xFF;
 800384c:	23ff      	movs	r3, #255	@ 0xff
 800384e:	75fb      	strb	r3, [r7, #23]
	while(tmp--);// Kısa bekleme
 8003850:	bf00      	nop
 8003852:	7dfb      	ldrb	r3, [r7, #23]
 8003854:	1e5a      	subs	r2, r3, #1
 8003856:	75fa      	strb	r2, [r7, #23]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1fa      	bne.n	8003852 <W5500Init+0x2e>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); // Reset pini HIGH
 800385c:	2201      	movs	r2, #1
 800385e:	2101      	movs	r1, #1
 8003860:	481f      	ldr	r0, [pc, #124]	@ (80038e0 <W5500Init+0xbc>)
 8003862:	f001 f9b7 	bl	8004bd4 <HAL_GPIO_WritePin>

	//Callback fonksiyonları W5500 kütüphanesine tanıtılır:
	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8003866:	491f      	ldr	r1, [pc, #124]	@ (80038e4 <W5500Init+0xc0>)
 8003868:	481f      	ldr	r0, [pc, #124]	@ (80038e8 <W5500Init+0xc4>)
 800386a:	f000 f909 	bl	8003a80 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 800386e:	491f      	ldr	r1, [pc, #124]	@ (80038ec <W5500Init+0xc8>)
 8003870:	481f      	ldr	r0, [pc, #124]	@ (80038f0 <W5500Init+0xcc>)
 8003872:	f000 f92b 	bl	8003acc <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 8003876:	491f      	ldr	r1, [pc, #124]	@ (80038f4 <W5500Init+0xd0>)
 8003878:	481f      	ldr	r0, [pc, #124]	@ (80038f8 <W5500Init+0xd4>)
 800387a:	f000 f953 	bl	8003b24 <reg_wizchip_spiburst_cbfunc>
	reg_wizchip_cris_cbfunc(w5500_enter_critical, w5500_exit_critical);
 800387e:	491f      	ldr	r1, [pc, #124]	@ (80038fc <W5500Init+0xd8>)
 8003880:	481f      	ldr	r0, [pc, #124]	@ (8003900 <W5500Init+0xdc>)
 8003882:	f000 f8d7 	bl	8003a34 <reg_wizchip_cris_cbfunc>
	//W5500 kütüphanesi donanım bağımsızdır. Senin yazdığın SPI, GPIO, kritik bölge fonksiyonlarıyla çalışır.
	//Bu yüzden fonksiyonları bu şekilde "tanıtırsın".

	/* WIZChip Initialize*/
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) memsize) == -1) {
 8003886:	1d3b      	adds	r3, r7, #4
 8003888:	4619      	mov	r1, r3
 800388a:	2004      	movs	r0, #4
 800388c:	f000 f976 	bl	8003b7c <ctlwizchip>
 8003890:	4603      	mov	r3, r0
 8003892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003896:	d104      	bne.n	80038a2 <W5500Init+0x7e>
		printf("WIZCHIP Initialized Failed.\r\n");
 8003898:	481a      	ldr	r0, [pc, #104]	@ (8003904 <W5500Init+0xe0>)
 800389a:	f002 fc1f 	bl	80060dc <puts>
		while (1);
 800389e:	bf00      	nop
 80038a0:	e7fd      	b.n	800389e <W5500Init+0x7a>
	}
	//Her soket (0-7) için 2 KB alana sahip olacak şekilde memsize dizisi verilir.
	//Bu yapı, RX/TX buffer belleği için kullanılır.ctlwizchip(...): W5500'ün temel konfigürasyonunu yapar.
	printf("WIZCHIP Initialization Success.\r\n");
 80038a2:	4819      	ldr	r0, [pc, #100]	@ (8003908 <W5500Init+0xe4>)
 80038a4:	f002 fc1a 	bl	80060dc <puts>

	//Check if SPI is working
	printf("Auto-detecting Ethernet Chip on SPI Port...");
 80038a8:	4818      	ldr	r0, [pc, #96]	@ (800390c <W5500Init+0xe8>)
 80038aa:	f002 fbaf 	bl	800600c <iprintf>
	if(WIZCHIP_READ(VERSIONR)==0x04)
 80038ae:	f44f 5064 	mov.w	r0, #14592	@ 0x3900
 80038b2:	f7fe ff11 	bl	80026d8 <WIZCHIP_READ>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d103      	bne.n	80038c4 <W5500Init+0xa0>
	{
		printf("W5500 Found on SPI\r\n");
 80038bc:	4814      	ldr	r0, [pc, #80]	@ (8003910 <W5500Init+0xec>)
 80038be:	f002 fc0d 	bl	80060dc <puts>
		printf("W5500 NOT Found on SPI\r\n");
		printf("Double Check SPI Cables\r\n");
		while(1);
	}//W5500 entegresinin VERSIONR (Version Register) değeri her zaman 0x04'tür.
	//Eğer bu değer dönmüyorsa, SPI bağlantısı veya donanımda hata var demektir.
}
 80038c2:	e007      	b.n	80038d4 <W5500Init+0xb0>
		printf("W5500 NOT Found on SPI\r\n");
 80038c4:	4813      	ldr	r0, [pc, #76]	@ (8003914 <W5500Init+0xf0>)
 80038c6:	f002 fc09 	bl	80060dc <puts>
		printf("Double Check SPI Cables\r\n");
 80038ca:	4813      	ldr	r0, [pc, #76]	@ (8003918 <W5500Init+0xf4>)
 80038cc:	f002 fc06 	bl	80060dc <puts>
		while(1);
 80038d0:	bf00      	nop
 80038d2:	e7fd      	b.n	80038d0 <W5500Init+0xac>
}
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd90      	pop	{r4, r7, pc}
 80038da:	bf00      	nop
 80038dc:	08007340 	.word	0x08007340
 80038e0:	40020000 	.word	0x40020000
 80038e4:	080036e1 	.word	0x080036e1
 80038e8:	080036c9 	.word	0x080036c9
 80038ec:	08003713 	.word	0x08003713
 80038f0:	080036f9 	.word	0x080036f9
 80038f4:	0800376b 	.word	0x0800376b
 80038f8:	0800372d 	.word	0x0800372d
 80038fc:	08003813 	.word	0x08003813
 8003900:	08003801 	.word	0x08003801
 8003904:	08007288 	.word	0x08007288
 8003908:	080072a8 	.word	0x080072a8
 800390c:	080072cc 	.word	0x080072cc
 8003910:	080072f8 	.word	0x080072f8
 8003914:	0800730c 	.word	0x0800730c
 8003918:	08007324 	.word	0x08007324

0800391c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
 8003920:	bf00      	nop
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800392a:	b480      	push	{r7}
 800392c:	af00      	add	r7, sp, #0
 800392e:	bf00      	nop
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8003946:	b480      	push	{r7}
 8003948:	af00      	add	r7, sp, #0
 800394a:	bf00      	nop
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	4618      	mov	r0, r3
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	460b      	mov	r3, r1
 8003978:	70fb      	strb	r3, [r7, #3]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	78fa      	ldrb	r2, [r7, #3]
 800397e:	701a      	strb	r2, [r3, #0]
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
 8003990:	2300      	movs	r3, #0
 8003992:	4618      	mov	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	71fb      	strb	r3, [r7, #7]
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
	...

080039b4 <wizchip_spi_readburst>:
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
#if 1
// 20231018 taylor
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)
{
 80039b4:	b590      	push	{r4, r7, lr}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0; i<len; i++)
 80039c0:	2300      	movs	r3, #0
 80039c2:	81fb      	strh	r3, [r7, #14]
 80039c4:	e00a      	b.n	80039dc <wizchip_spi_readburst+0x28>
	{
		*pBuf++ = WIZCHIP.IF.SPI._read_byte();
 80039c6:	4b0a      	ldr	r3, [pc, #40]	@ (80039f0 <wizchip_spi_readburst+0x3c>)
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	687c      	ldr	r4, [r7, #4]
 80039cc:	1c62      	adds	r2, r4, #1
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	4798      	blx	r3
 80039d2:	4603      	mov	r3, r0
 80039d4:	7023      	strb	r3, [r4, #0]
	for(uint16_t i=0; i<len; i++)
 80039d6:	89fb      	ldrh	r3, [r7, #14]
 80039d8:	3301      	adds	r3, #1
 80039da:	81fb      	strh	r3, [r7, #14]
 80039dc:	89fa      	ldrh	r2, [r7, #14]
 80039de:	887b      	ldrh	r3, [r7, #2]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d3f0      	bcc.n	80039c6 <wizchip_spi_readburst+0x12>
	}
}
 80039e4:	bf00      	nop
 80039e6:	bf00      	nop
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd90      	pop	{r4, r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000080 	.word	0x20000080

080039f4 <wizchip_spi_writeburst>:
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
#if 1
// 20231018 taylor
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	460b      	mov	r3, r1
 80039fe:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0; i<len; i++)
 8003a00:	2300      	movs	r3, #0
 8003a02:	81fb      	strh	r3, [r7, #14]
 8003a04:	e00a      	b.n	8003a1c <wizchip_spi_writeburst+0x28>
	{
		WIZCHIP.IF.SPI._write_byte(*pBuf++);
 8003a06:	4b0a      	ldr	r3, [pc, #40]	@ (8003a30 <wizchip_spi_writeburst+0x3c>)
 8003a08:	6a1a      	ldr	r2, [r3, #32]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	1c59      	adds	r1, r3, #1
 8003a0e:	6079      	str	r1, [r7, #4]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	4790      	blx	r2
	for(uint16_t i=0; i<len; i++)
 8003a16:	89fb      	ldrh	r3, [r7, #14]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	81fb      	strh	r3, [r7, #14]
 8003a1c:	89fa      	ldrh	r2, [r7, #14]
 8003a1e:	887b      	ldrh	r3, [r7, #2]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d3f0      	bcc.n	8003a06 <wizchip_spi_writeburst+0x12>
	}
}
 8003a24:	bf00      	nop
 8003a26:	bf00      	nop
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20000080 	.word	0x20000080

08003a34 <reg_wizchip_cris_cbfunc>:
static uint8_t      _DNS6_[16];    ///< DSN server IPv6 address
static ipconf_mode  _IPMODE_;      ///< IP configuration mode
#endif

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <reg_wizchip_cris_cbfunc+0x16>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d106      	bne.n	8003a58 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 8003a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a74 <reg_wizchip_cris_cbfunc+0x40>)
 8003a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8003a78 <reg_wizchip_cris_cbfunc+0x44>)
 8003a4e:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 8003a50:	4b08      	ldr	r3, [pc, #32]	@ (8003a74 <reg_wizchip_cris_cbfunc+0x40>)
 8003a52:	4a0a      	ldr	r2, [pc, #40]	@ (8003a7c <reg_wizchip_cris_cbfunc+0x48>)
 8003a54:	611a      	str	r2, [r3, #16]
 8003a56:	e006      	b.n	8003a66 <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8003a58:	4a06      	ldr	r2, [pc, #24]	@ (8003a74 <reg_wizchip_cris_cbfunc+0x40>)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 8003a5e:	4a05      	ldr	r2, [pc, #20]	@ (8003a74 <reg_wizchip_cris_cbfunc+0x40>)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	6113      	str	r3, [r2, #16]
   }
}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	20000080 	.word	0x20000080
 8003a78:	0800391d 	.word	0x0800391d
 8003a7c:	0800392b 	.word	0x0800392b

08003a80 <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <reg_wizchip_cs_cbfunc+0x16>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8003a96:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac0 <reg_wizchip_cs_cbfunc+0x40>)
 8003a98:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac4 <reg_wizchip_cs_cbfunc+0x44>)
 8003a9a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003a9c:	4b08      	ldr	r3, [pc, #32]	@ (8003ac0 <reg_wizchip_cs_cbfunc+0x40>)
 8003a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac8 <reg_wizchip_cs_cbfunc+0x48>)
 8003aa0:	619a      	str	r2, [r3, #24]
 8003aa2:	e006      	b.n	8003ab2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003aa4:	4a06      	ldr	r2, [pc, #24]	@ (8003ac0 <reg_wizchip_cs_cbfunc+0x40>)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8003aaa:	4a05      	ldr	r2, [pc, #20]	@ (8003ac0 <reg_wizchip_cs_cbfunc+0x40>)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	6193      	str	r3, [r2, #24]
   }
}
 8003ab0:	bf00      	nop
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	20000080 	.word	0x20000080
 8003ac4:	08003939 	.word	0x08003939
 8003ac8:	08003947 	.word	0x08003947

08003acc <reg_wizchip_spi_cbfunc>:
   else           WIZCHIP.IF.SPI._write_burst = spi_wbuf;
}
#else 

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003ad6:	bf00      	nop
 8003ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8003b18 <reg_wizchip_spi_cbfunc+0x4c>)
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f9      	beq.n	8003ad8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <reg_wizchip_spi_cbfunc+0x24>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d106      	bne.n	8003afe <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003af0:	4b09      	ldr	r3, [pc, #36]	@ (8003b18 <reg_wizchip_spi_cbfunc+0x4c>)
 8003af2:	4a0a      	ldr	r2, [pc, #40]	@ (8003b1c <reg_wizchip_spi_cbfunc+0x50>)
 8003af4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003af6:	4b08      	ldr	r3, [pc, #32]	@ (8003b18 <reg_wizchip_spi_cbfunc+0x4c>)
 8003af8:	4a09      	ldr	r2, [pc, #36]	@ (8003b20 <reg_wizchip_spi_cbfunc+0x54>)
 8003afa:	621a      	str	r2, [r3, #32]
 8003afc:	e006      	b.n	8003b0c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8003afe:	4a06      	ldr	r2, [pc, #24]	@ (8003b18 <reg_wizchip_spi_cbfunc+0x4c>)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003b04:	4a04      	ldr	r2, [pc, #16]	@ (8003b18 <reg_wizchip_spi_cbfunc+0x4c>)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	6213      	str	r3, [r2, #32]
   }
}
 8003b0a:	bf00      	nop
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	20000080 	.word	0x20000080
 8003b1c:	0800398d 	.word	0x0800398d
 8003b20:	0800399d 	.word	0x0800399d

08003b24 <reg_wizchip_spiburst_cbfunc>:
#endif 

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003b2e:	bf00      	nop
 8003b30:	4b0f      	ldr	r3, [pc, #60]	@ (8003b70 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f9      	beq.n	8003b30 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <reg_wizchip_spiburst_cbfunc+0x24>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8003b48:	4b09      	ldr	r3, [pc, #36]	@ (8003b70 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b74 <reg_wizchip_spiburst_cbfunc+0x50>)
 8003b4c:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8003b4e:	4b08      	ldr	r3, [pc, #32]	@ (8003b70 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003b50:	4a09      	ldr	r2, [pc, #36]	@ (8003b78 <reg_wizchip_spiburst_cbfunc+0x54>)
 8003b52:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b54:	e006      	b.n	8003b64 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8003b56:	4a06      	ldr	r2, [pc, #24]	@ (8003b70 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8003b5c:	4a04      	ldr	r2, [pc, #16]	@ (8003b70 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8003b62:	bf00      	nop
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	20000080 	.word	0x20000080
 8003b74:	080039b5 	.word	0x080039b5
 8003b78:	080039f5 	.word	0x080039f5

08003b7c <ctlwizchip>:
   }
}
#endif

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003b7c:	b590      	push	{r4, r7, lr}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	6039      	str	r1, [r7, #0]
 8003b86:	71fb      	strb	r3, [r7, #7]
//teddy 240122
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500 || _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
   uint8_t tmp = *(uint8_t*) arg;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	2300      	movs	r3, #0
 8003b94:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	3b03      	subs	r3, #3
 8003b9a:	2b14      	cmp	r3, #20
 8003b9c:	f200 80d3 	bhi.w	8003d46 <ctlwizchip+0x1ca>
 8003ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba8 <ctlwizchip+0x2c>)
 8003ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba6:	bf00      	nop
 8003ba8:	08003bfd 	.word	0x08003bfd
 8003bac:	08003c03 	.word	0x08003c03
 8003bb0:	08003c2f 	.word	0x08003c2f
 8003bb4:	08003c23 	.word	0x08003c23
 8003bb8:	08003c3d 	.word	0x08003c3d
 8003bbc:	08003c49 	.word	0x08003c49
 8003bc0:	08003c57 	.word	0x08003c57
 8003bc4:	08003c7d 	.word	0x08003c7d
 8003bc8:	08003d47 	.word	0x08003d47
 8003bcc:	08003d47 	.word	0x08003d47
 8003bd0:	08003c9f 	.word	0x08003c9f
 8003bd4:	08003d47 	.word	0x08003d47
 8003bd8:	08003d47 	.word	0x08003d47
 8003bdc:	08003d47 	.word	0x08003d47
 8003be0:	08003ce3 	.word	0x08003ce3
 8003be4:	08003ce9 	.word	0x08003ce9
 8003be8:	08003cf1 	.word	0x08003cf1
 8003bec:	08003cf9 	.word	0x08003cf9
 8003bf0:	08003d01 	.word	0x08003d01
 8003bf4:	08003d0f 	.word	0x08003d0f
 8003bf8:	08003d2b 	.word	0x08003d2b
      case CW_GET_SYSLOCK:
         *(uint8_t*)arg = getSYSR() >> 5;
         break;
#endif
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003bfc:	f000 f8ec 	bl	8003dd8 <wizchip_sw_reset>
         break;
 8003c00:	e0a4      	b.n	8003d4c <ctlwizchip+0x1d0>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d004      	beq.n	8003c12 <ctlwizchip+0x96>
         {
            ptmp[0] = (uint8_t*)arg;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	3308      	adds	r3, #8
 8003c10:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4611      	mov	r1, r2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 f929 	bl	8003e70 <wizchip_init>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	e095      	b.n	8003d4e <ctlwizchip+0x1d2>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 f9ae 	bl	8003f88 <wizchip_clrinterrupt>
         break;
 8003c2c:	e08e      	b.n	8003d4c <ctlwizchip+0x1d0>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003c2e:	f000 f9df 	bl	8003ff0 <wizchip_getinterrupt>
 8003c32:	4603      	mov	r3, r0
 8003c34:	461a      	mov	r2, r3
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	801a      	strh	r2, [r3, #0]
         break;
 8003c3a:	e087      	b.n	8003d4c <ctlwizchip+0x1d0>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 f9f9 	bl	8004038 <wizchip_setinterruptmask>
         break;         
 8003c46:	e081      	b.n	8003d4c <ctlwizchip+0x1d0>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003c48:	f000 fa11 	bl	800406e <wizchip_getinterruptmask>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	461a      	mov	r2, r3
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	801a      	strh	r2, [r3, #0]
         break;
 8003c54:	e07a      	b.n	8003d4c <ctlwizchip+0x1d0>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	0a1b      	lsrs	r3, r3, #8
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	4619      	mov	r1, r3
 8003c62:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8003c66:	f7fe fd83 	bl	8002770 <WIZCHIP_WRITE>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	4619      	mov	r1, r3
 8003c72:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8003c76:	f7fe fd7b 	bl	8002770 <WIZCHIP_WRITE>
         break;
 8003c7a:	e067      	b.n	8003d4c <ctlwizchip+0x1d0>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003c7c:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8003c80:	f7fe fd2a 	bl	80026d8 <WIZCHIP_READ>
 8003c84:	4603      	mov	r3, r0
 8003c86:	021b      	lsls	r3, r3, #8
 8003c88:	b29c      	uxth	r4, r3
 8003c8a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8003c8e:	f7fe fd23 	bl	80026d8 <WIZCHIP_READ>
 8003c92:	4603      	mov	r3, r0
 8003c94:	4423      	add	r3, r4
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	801a      	strh	r2, [r3, #0]
         break;
 8003c9c:	e056      	b.n	8003d4c <ctlwizchip+0x1d0>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTPTMR();
         break;   
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8003c9e:	4b2e      	ldr	r3, [pc, #184]	@ (8003d58 <ctlwizchip+0x1dc>)
 8003ca0:	789a      	ldrb	r2, [r3, #2]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	4a2b      	ldr	r2, [pc, #172]	@ (8003d58 <ctlwizchip+0x1dc>)
 8003cac:	78d2      	ldrb	r2, [r2, #3]
 8003cae:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	3302      	adds	r3, #2
 8003cb4:	4a28      	ldr	r2, [pc, #160]	@ (8003d58 <ctlwizchip+0x1dc>)
 8003cb6:	7912      	ldrb	r2, [r2, #4]
 8003cb8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	3303      	adds	r3, #3
 8003cbe:	4a26      	ldr	r2, [pc, #152]	@ (8003d58 <ctlwizchip+0x1dc>)
 8003cc0:	7952      	ldrb	r2, [r2, #5]
 8003cc2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	4a23      	ldr	r2, [pc, #140]	@ (8003d58 <ctlwizchip+0x1dc>)
 8003cca:	7992      	ldrb	r2, [r2, #6]
 8003ccc:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	3305      	adds	r3, #5
 8003cd2:	4a21      	ldr	r2, [pc, #132]	@ (8003d58 <ctlwizchip+0x1dc>)
 8003cd4:	79d2      	ldrb	r2, [r2, #7]
 8003cd6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	3306      	adds	r3, #6
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
         break;
 8003ce0:	e034      	b.n	8003d4c <ctlwizchip+0x1d0>
   #endif
#endif
//teddy 240122
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500 || _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
      case CW_RESET_PHY:
         wizphy_reset();
 8003ce2:	f000 fa15 	bl	8004110 <wizphy_reset>
         break;
 8003ce6:	e031      	b.n	8003d4c <ctlwizchip+0x1d0>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8003ce8:	6838      	ldr	r0, [r7, #0]
 8003cea:	f000 fa38 	bl	800415e <wizphy_setphyconf>
         break;
 8003cee:	e02d      	b.n	8003d4c <ctlwizchip+0x1d0>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003cf0:	6838      	ldr	r0, [r7, #0]
 8003cf2:	f000 fa77 	bl	80041e4 <wizphy_getphyconf>
         break;
 8003cf6:	e029      	b.n	8003d4c <ctlwizchip+0x1d0>
      case CW_GET_PHYSTATUS:
#if 1
    	  // 20231012 taylor
   #if _WIZCHIP_ == W5500
         wizphy_getphystat((wiz_PhyConf*)arg);
 8003cf8:	6838      	ldr	r0, [r7, #0]
 8003cfa:	f000 fadd 	bl	80042b8 <wizphy_getphystat>
   #endif
#else
         wizphy_getphystat((wiz_PhyConf*)arg);
#endif
         break;
 8003cfe:	e025      	b.n	8003d4c <ctlwizchip+0x1d0>
	  //teddy 240122
      #if _WIZCHIP_ == W6100 ||_WIZCHIP_ == W6300
        wizphy_setphypmode(*(uint8_t*)arg);
        break;
      #else
         return wizphy_setphypmode(*(uint8_t*)arg);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 faf5 	bl	80042f4 <wizphy_setphypmode>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	e01f      	b.n	8003d4e <ctlwizchip+0x1d2>
      #endif
   #endif
   //teddy 240122
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500 || _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8003d0e:	f000 f9e6 	bl	80040de <wizphy_getphypmode>
 8003d12:	4603      	mov	r3, r0
 8003d14:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003d16:	7dfb      	ldrb	r3, [r7, #23]
 8003d18:	2bff      	cmp	r3, #255	@ 0xff
 8003d1a:	d102      	bne.n	8003d22 <ctlwizchip+0x1a6>
 8003d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d20:	e015      	b.n	8003d4e <ctlwizchip+0x1d2>
         *(uint8_t*)arg = tmp;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	7dfa      	ldrb	r2, [r7, #23]
 8003d26:	701a      	strb	r2, [r3, #0]
         break;
 8003d28:	e010      	b.n	8003d4c <ctlwizchip+0x1d0>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8003d2a:	f000 f9c2 	bl	80040b2 <wizphy_getphylink>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003d32:	7dfb      	ldrb	r3, [r7, #23]
 8003d34:	2bff      	cmp	r3, #255	@ 0xff
 8003d36:	d102      	bne.n	8003d3e <ctlwizchip+0x1c2>
 8003d38:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3c:	e007      	b.n	8003d4e <ctlwizchip+0x1d2>
         *(uint8_t*)arg = tmp;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	7dfa      	ldrb	r2, [r7, #23]
 8003d42:	701a      	strb	r2, [r3, #0]
         break;
 8003d44:	e002      	b.n	8003d4c <ctlwizchip+0x1d0>
   #endif      
      default:
         return -1;
 8003d46:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4a:	e000      	b.n	8003d4e <ctlwizchip+0x1d2>
   }
   return 0;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	371c      	adds	r7, #28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd90      	pop	{r4, r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000080 	.word	0x20000080

08003d5c <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	6039      	str	r1, [r7, #0]
 8003d66:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	2b05      	cmp	r3, #5
 8003d6c:	d82c      	bhi.n	8003dc8 <ctlnetwork+0x6c>
 8003d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d74 <ctlnetwork+0x18>)
 8003d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d74:	08003d8d 	.word	0x08003d8d
 8003d78:	08003d95 	.word	0x08003d95
 8003d7c:	08003d9d 	.word	0x08003d9d
 8003d80:	08003dab 	.word	0x08003dab
 8003d84:	08003db9 	.word	0x08003db9
 8003d88:	08003dc1 	.word	0x08003dc1
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8003d8c:	6838      	ldr	r0, [r7, #0]
 8003d8e:	f000 fafb 	bl	8004388 <wizchip_setnetinfo>
         break;
 8003d92:	e01c      	b.n	8003dce <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8003d94:	6838      	ldr	r0, [r7, #0]
 8003d96:	f000 fb37 	bl	8004408 <wizchip_getnetinfo>
         break;
 8003d9a:	e018      	b.n	8003dce <ctlnetwork+0x72>
      case CN_SET_NETMODE:
#if (_WIZCHIP_ == W5100 || _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5300 || _WIZCHIP_ == W5500)
         return wizchip_setnetmode(*(netmode_type*)arg);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 fb71 	bl	8004488 <wizchip_setnetmode>
 8003da6:	4603      	mov	r3, r0
 8003da8:	e012      	b.n	8003dd0 <ctlnetwork+0x74>
		 //teddy 240122
      #elif ((_WIZCHIP_ == 6100)||(_WIZCHIP_ == W6300))
         wizchip_setnetmode(*(netmode_type*)arg);
      #endif
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8003daa:	f000 fb8f 	bl	80044cc <wizchip_getnetmode>
 8003dae:	4603      	mov	r3, r0
 8003db0:	461a      	mov	r2, r3
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	701a      	strb	r2, [r3, #0]
         break;
 8003db6:	e00a      	b.n	8003dce <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8003db8:	6838      	ldr	r0, [r7, #0]
 8003dba:	f000 fb8f 	bl	80044dc <wizchip_settimeout>
         break;
 8003dbe:	e006      	b.n	8003dce <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8003dc0:	6838      	ldr	r0, [r7, #0]
 8003dc2:	f000 fbac 	bl	800451e <wizchip_gettimeout>
         break;
 8003dc6:	e002      	b.n	8003dce <ctlnetwork+0x72>
      case CN_GET_PREFER:
    	  *(uint8_t*)arg= getSLPSR();
         break;
#endif   
      default:
         return -1;
 8003dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dcc:	e000      	b.n	8003dd0 <ctlnetwork+0x74>
   }
   return 0;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003dde:	1d3b      	adds	r3, r7, #4
 8003de0:	2206      	movs	r2, #6
 8003de2:	4619      	mov	r1, r3
 8003de4:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003de8:	f7fe fd10 	bl	800280c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003dec:	f107 0314 	add.w	r3, r7, #20
 8003df0:	2204      	movs	r2, #4
 8003df2:	4619      	mov	r1, r3
 8003df4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003df8:	f7fe fd08 	bl	800280c <WIZCHIP_READ_BUF>
 8003dfc:	f107 0310 	add.w	r3, r7, #16
 8003e00:	2204      	movs	r2, #4
 8003e02:	4619      	mov	r1, r3
 8003e04:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003e08:	f7fe fd00 	bl	800280c <WIZCHIP_READ_BUF>
 8003e0c:	f107 030c 	add.w	r3, r7, #12
 8003e10:	2204      	movs	r2, #4
 8003e12:	4619      	mov	r1, r3
 8003e14:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003e18:	f7fe fcf8 	bl	800280c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8003e1c:	2180      	movs	r1, #128	@ 0x80
 8003e1e:	2000      	movs	r0, #0
 8003e20:	f7fe fca6 	bl	8002770 <WIZCHIP_WRITE>
   getMR(); // for delay
 8003e24:	2000      	movs	r0, #0
 8003e26:	f7fe fc57 	bl	80026d8 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8003e2a:	1d3b      	adds	r3, r7, #4
 8003e2c:	2206      	movs	r2, #6
 8003e2e:	4619      	mov	r1, r3
 8003e30:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003e34:	f7fe fd4a 	bl	80028cc <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003e38:	f107 0314 	add.w	r3, r7, #20
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	4619      	mov	r1, r3
 8003e40:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003e44:	f7fe fd42 	bl	80028cc <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003e48:	f107 0310 	add.w	r3, r7, #16
 8003e4c:	2204      	movs	r2, #4
 8003e4e:	4619      	mov	r1, r3
 8003e50:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8003e54:	f7fe fd3a 	bl	80028cc <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003e58:	f107 030c 	add.w	r3, r7, #12
 8003e5c:	2204      	movs	r2, #4
 8003e5e:	4619      	mov	r1, r3
 8003e60:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003e64:	f7fe fd32 	bl	80028cc <WIZCHIP_WRITE_BUF>
  setLLAR(lla);
  setGUAR(gua);
  if(islock & SYSR_CHPL) CHIPLOCK();
  if(islock & SYSR_NETL) NETLOCK();
#endif
}
 8003e68:	bf00      	nop
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003e7e:	f7ff ffab 	bl	8003dd8 <wizchip_sw_reset>
   if(txsize)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d03b      	beq.n	8003f00 <wizchip_init+0x90>
   {
      tmp = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	73fb      	strb	r3, [r7, #15]
 8003e90:	e015      	b.n	8003ebe <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8003e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	4413      	add	r3, r2
 8003e9a:	781a      	ldrb	r2, [r3, #0]
 8003e9c:	7bbb      	ldrb	r3, [r7, #14]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 8003ea4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ea8:	2b10      	cmp	r3, #16
 8003eaa:	dd02      	ble.n	8003eb2 <wizchip_init+0x42>
 8003eac:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb0:	e066      	b.n	8003f80 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	3301      	adds	r3, #1
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	73fb      	strb	r3, [r7, #15]
 8003ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ec2:	2b07      	cmp	r3, #7
 8003ec4:	dde5      	ble.n	8003e92 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	73fb      	strb	r3, [r7, #15]
 8003eca:	e015      	b.n	8003ef8 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8003ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8003eda:	4618      	mov	r0, r3
 8003edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	f7fe fc42 	bl	8002770 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	73fb      	strb	r3, [r7, #15]
 8003ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003efc:	2b07      	cmp	r3, #7
 8003efe:	dde5      	ble.n	8003ecc <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d03b      	beq.n	8003f7e <wizchip_init+0x10e>
   {
      tmp = 0;
 8003f06:	2300      	movs	r3, #0
 8003f08:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	73fb      	strb	r3, [r7, #15]
 8003f0e:	e015      	b.n	8003f3c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8003f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	4413      	add	r3, r2
 8003f18:	781a      	ldrb	r2, [r3, #0]
 8003f1a:	7bbb      	ldrb	r3, [r7, #14]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 8003f22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f26:	2b10      	cmp	r3, #16
 8003f28:	dd02      	ble.n	8003f30 <wizchip_init+0xc0>
 8003f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2e:	e027      	b.n	8003f80 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	3301      	adds	r3, #1
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	73fb      	strb	r3, [r7, #15]
 8003f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f40:	2b07      	cmp	r3, #7
 8003f42:	dde5      	ble.n	8003f10 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003f44:	2300      	movs	r3, #0
 8003f46:	73fb      	strb	r3, [r7, #15]
 8003f48:	e015      	b.n	8003f76 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8003f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	3301      	adds	r3, #1
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	4413      	add	r3, r2
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	4619      	mov	r1, r3
 8003f66:	f7fe fc03 	bl	8002770 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	3301      	adds	r3, #1
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	73fb      	strb	r3, [r7, #15]
 8003f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f7a:	2b07      	cmp	r3, #7
 8003f7c:	dde5      	ble.n	8003f4a <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8003f96:	88fb      	ldrh	r3, [r7, #6]
 8003f98:	0a1b      	lsrs	r3, r3, #8
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
 8003fa0:	f023 030f 	bic.w	r3, r3, #15
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8003fac:	f7fe fbe0 	bl	8002770 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	73fb      	strb	r3, [r7, #15]
 8003fb4:	e014      	b.n	8003fe0 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8003fb6:	7bba      	ldrb	r2, [r7, #14]
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
 8003fba:	fa42 f303 	asr.w	r3, r2, r3
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <wizchip_clrinterrupt+0x52>
 8003fc6:	7bfb      	ldrb	r3, [r7, #15]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	3301      	adds	r3, #1
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003fd2:	211f      	movs	r1, #31
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fe fbcb 	bl	8002770 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	2b07      	cmp	r3, #7
 8003fe4:	d9e7      	bls.n	8003fb6 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8003fe6:	bf00      	nop
 8003fe8:	bf00      	nop
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	71bb      	strb	r3, [r7, #6]
   uint32_t ret = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	603b      	str	r3, [r7, #0]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8004002:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8004006:	f7fe fb67 	bl	80026d8 <WIZCHIP_READ>
 800400a:	4603      	mov	r3, r0
 800400c:	f023 030f 	bic.w	r3, r3, #15
 8004010:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8004012:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8004016:	f7fe fb5f 	bl	80026d8 <WIZCHIP_READ>
 800401a:	4603      	mov	r3, r0
 800401c:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800401e:	79bb      	ldrb	r3, [r7, #6]
 8004020:	603b      	str	r3, [r7, #0]
  ret = (ret << 8) + ir;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	021a      	lsls	r2, r3, #8
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	4413      	add	r3, r2
 800402a:	603b      	str	r3, [r7, #0]
  //teddy 240122
#if _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
  ret = (((uint32_t)getSLIR())<<16) | ret;
#endif

  return (intr_kind)ret;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	b29b      	uxth	r3, r3
}
 8004030:	4618      	mov	r0, r3
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8004046:	88fb      	ldrh	r3, [r7, #6]
 8004048:	0a1b      	lsrs	r3, r3, #8
 800404a:	b29b      	uxth	r3, r3
 800404c:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 800404e:	7bfb      	ldrb	r3, [r7, #15]
 8004050:	4619      	mov	r1, r3
 8004052:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8004056:	f7fe fb8b 	bl	8002770 <WIZCHIP_WRITE>
   setSIMR(simr);
 800405a:	7bbb      	ldrb	r3, [r7, #14]
 800405c:	4619      	mov	r1, r3
 800405e:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8004062:	f7fe fb85 	bl	8002770 <WIZCHIP_WRITE>
#if _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
   uint8_t slimr = (uint8_t)((uint32_t)intr >> 16);
   setSLIMR(slimr);
#endif
#endif   
}
 8004066:	bf00      	nop
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8004074:	2300      	movs	r3, #0
 8004076:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8004078:	2300      	movs	r3, #0
 800407a:	71bb      	strb	r3, [r7, #6]
   uint32_t ret = 0;
 800407c:	2300      	movs	r3, #0
 800407e:	603b      	str	r3, [r7, #0]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8004080:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8004084:	f7fe fb28 	bl	80026d8 <WIZCHIP_READ>
 8004088:	4603      	mov	r3, r0
 800408a:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 800408c:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8004090:	f7fe fb22 	bl	80026d8 <WIZCHIP_READ>
 8004094:	4603      	mov	r3, r0
 8004096:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8004098:	79bb      	ldrb	r3, [r7, #6]
 800409a:	603b      	str	r3, [r7, #0]
  ret = (ret << 8) + imr;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	021a      	lsls	r2, r3, #8
 80040a0:	79fb      	ldrb	r3, [r7, #7]
 80040a2:	4413      	add	r3, r2
 80040a4:	603b      	str	r3, [r7, #0]
  //teddy 240122
#if _WIZCHIP_ == W6100 || _WIZCHIP_ == W6300
  ret = (((uint32_t)getSLIMR())<<16) | ret;
#endif
  
  return (intr_kind)ret;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	b29b      	uxth	r3, r3
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b082      	sub	sp, #8
 80040b6:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80040b8:	2300      	movs	r3, #0
 80040ba:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80040bc:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80040c0:	f7fe fb0a 	bl	80026d8 <WIZCHIP_READ>
 80040c4:	4603      	mov	r3, r0
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80040ce:	2301      	movs	r3, #1
 80040d0:	71fb      	strb	r3, [r7, #7]
#endif

#else
   tmp = -1;
#endif
   return tmp;
 80040d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b082      	sub	sp, #8
 80040e2:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80040e8:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80040ec:	f7fe faf4 	bl	80026d8 <WIZCHIP_READ>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040f6:	2b30      	cmp	r3, #48	@ 0x30
 80040f8:	d102      	bne.n	8004100 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80040fa:	2301      	movs	r3, #1
 80040fc:	71fb      	strb	r3, [r7, #7]
 80040fe:	e001      	b.n	8004104 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8004100:	2300      	movs	r3, #0
 8004102:	71fb      	strb	r3, [r7, #7]
   #endif   
      return PHY_POWER_NORM;
   #else
      tmp = -1;
   #endif
   return tmp;
 8004104:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <wizphy_reset>:
   return -1;
}

#elif _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8004116:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800411a:	f7fe fadd 	bl	80026d8 <WIZCHIP_READ>
 800411e:	4603      	mov	r3, r0
 8004120:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8004122:	79fb      	ldrb	r3, [r7, #7]
 8004124:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004128:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800412a:	79fb      	ldrb	r3, [r7, #7]
 800412c:	4619      	mov	r1, r3
 800412e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004132:	f7fe fb1d 	bl	8002770 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8004136:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800413a:	f7fe facd 	bl	80026d8 <WIZCHIP_READ>
 800413e:	4603      	mov	r3, r0
 8004140:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8004142:	79fb      	ldrb	r3, [r7, #7]
 8004144:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004148:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	4619      	mov	r1, r3
 800414e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004152:	f7fe fb0d 	bl	8002770 <WIZCHIP_WRITE>
}
 8004156:	bf00      	nop
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b084      	sub	sp, #16
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004166:	2300      	movs	r3, #0
 8004168:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d104      	bne.n	800417c <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004178:	73fb      	strb	r3, [r7, #15]
 800417a:	e003      	b.n	8004184 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004182:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	785b      	ldrb	r3, [r3, #1]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d104      	bne.n	8004196 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 800418c:	7bfb      	ldrb	r3, [r7, #15]
 800418e:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8004192:	73fb      	strb	r3, [r7, #15]
 8004194:	e019      	b.n	80041ca <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	78db      	ldrb	r3, [r3, #3]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d10d      	bne.n	80041ba <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	789b      	ldrb	r3, [r3, #2]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d104      	bne.n	80041b0 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	f043 0318 	orr.w	r3, r3, #24
 80041ac:	73fb      	strb	r3, [r7, #15]
 80041ae:	e00c      	b.n	80041ca <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
 80041b2:	f043 0308 	orr.w	r3, r3, #8
 80041b6:	73fb      	strb	r3, [r7, #15]
 80041b8:	e007      	b.n	80041ca <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	789b      	ldrb	r3, [r3, #2]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d103      	bne.n	80041ca <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	f043 0310 	orr.w	r3, r3, #16
 80041c8:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	4619      	mov	r1, r3
 80041ce:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80041d2:	f7fe facd 	bl	8002770 <WIZCHIP_WRITE>
   wizphy_reset();
 80041d6:	f7ff ff9b 	bl	8004110 <wizphy_reset>
}
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80041f0:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80041f4:	f7fe fa70 	bl	80026d8 <WIZCHIP_READ>
 80041f8:	4603      	mov	r3, r0
 80041fa:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	119b      	asrs	r3, r3, #6
 8004200:	b2db      	uxtb	r3, r3
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	b2da      	uxtb	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004212:	2b20      	cmp	r3, #32
 8004214:	d001      	beq.n	800421a <wizphy_getphyconf+0x36>
 8004216:	2b38      	cmp	r3, #56	@ 0x38
 8004218:	d103      	bne.n	8004222 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	705a      	strb	r2, [r3, #1]
         break;
 8004220:	e003      	b.n	800422a <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	705a      	strb	r2, [r3, #1]
         break;
 8004228:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800422a:	7bfb      	ldrb	r3, [r7, #15]
 800422c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004230:	3b10      	subs	r3, #16
 8004232:	2b10      	cmp	r3, #16
 8004234:	bf8c      	ite	hi
 8004236:	2201      	movhi	r2, #1
 8004238:	2200      	movls	r2, #0
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	2a00      	cmp	r2, #0
 800423e:	d10f      	bne.n	8004260 <wizphy_getphyconf+0x7c>
 8004240:	4a1b      	ldr	r2, [pc, #108]	@ (80042b0 <wizphy_getphyconf+0xcc>)
 8004242:	fa22 f303 	lsr.w	r3, r2, r3
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	bf14      	ite	ne
 800424e:	2301      	movne	r3, #1
 8004250:	2300      	moveq	r3, #0
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	709a      	strb	r2, [r3, #2]
         break;
 800425e:	e003      	b.n	8004268 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	709a      	strb	r2, [r3, #2]
         break;
 8004266:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800426e:	3b08      	subs	r3, #8
 8004270:	2b18      	cmp	r3, #24
 8004272:	bf8c      	ite	hi
 8004274:	2201      	movhi	r2, #1
 8004276:	2200      	movls	r2, #0
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	2a00      	cmp	r2, #0
 800427c:	d10f      	bne.n	800429e <wizphy_getphyconf+0xba>
 800427e:	4a0d      	ldr	r2, [pc, #52]	@ (80042b4 <wizphy_getphyconf+0xd0>)
 8004280:	fa22 f303 	lsr.w	r3, r2, r3
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	bf14      	ite	ne
 800428c:	2301      	movne	r3, #1
 800428e:	2300      	moveq	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	70da      	strb	r2, [r3, #3]
         break;
 800429c:	e003      	b.n	80042a6 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	70da      	strb	r2, [r3, #3]
         break;
 80042a4:	bf00      	nop
   }
}
 80042a6:	bf00      	nop
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	00010101 	.word	0x00010101
 80042b4:	01010001 	.word	0x01010001

080042b8 <wizphy_getphystat>:

void wizphy_getphystat(wiz_PhyConf* phyconf)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
   uint8_t tmp = getPHYCFGR();
 80042c0:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80042c4:	f7fe fa08 	bl	80026d8 <WIZCHIP_READ>
 80042c8:	4603      	mov	r3, r0
 80042ca:	73fb      	strb	r3, [r7, #15]
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	109b      	asrs	r3, r3, #2
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	70da      	strb	r2, [r3, #3]
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	105b      	asrs	r3, r3, #1
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	709a      	strb	r2, [r3, #2]
}
 80042ec:	bf00      	nop
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004302:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004306:	f7fe f9e7 	bl	80026d8 <WIZCHIP_READ>
 800430a:	4603      	mov	r3, r0
 800430c:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004314:	2b00      	cmp	r3, #0
 8004316:	d102      	bne.n	800431e <wizphy_setphypmode+0x2a>
 8004318:	f04f 33ff 	mov.w	r3, #4294967295
 800431c:	e030      	b.n	8004380 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800431e:	7bfb      	ldrb	r3, [r7, #15]
 8004320:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8004324:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8004326:	79fb      	ldrb	r3, [r7, #7]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d104      	bne.n	8004336 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8004332:	73fb      	strb	r3, [r7, #15]
 8004334:	e003      	b.n	800433e <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8004336:	7bfb      	ldrb	r3, [r7, #15]
 8004338:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800433c:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 800433e:	7bfb      	ldrb	r3, [r7, #15]
 8004340:	4619      	mov	r1, r3
 8004342:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004346:	f7fe fa13 	bl	8002770 <WIZCHIP_WRITE>
   wizphy_reset();
 800434a:	f7ff fee1 	bl	8004110 <wizphy_reset>
   tmp = getPHYCFGR();
 800434e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004352:	f7fe f9c1 	bl	80026d8 <WIZCHIP_READ>
 8004356:	4603      	mov	r3, r0
 8004358:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800435a:	79fb      	ldrb	r3, [r7, #7]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d106      	bne.n	800436e <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004366:	2b00      	cmp	r3, #0
 8004368:	d008      	beq.n	800437c <wizphy_setphypmode+0x88>
 800436a:	2300      	movs	r3, #0
 800436c:	e008      	b.n	8004380 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <wizphy_setphypmode+0x88>
 8004378:	2300      	movs	r3, #0
 800437a:	e001      	b.n	8004380 <wizphy_setphypmode+0x8c>
   }
   return -1;
 800437c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <wizchip_setnetinfo>:

#endif

#if (_WIZCHIP_ == W5100 || _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5300 || _WIZCHIP_ == W5500)
void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2206      	movs	r2, #6
 8004394:	4619      	mov	r1, r3
 8004396:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800439a:	f7fe fa97 	bl	80028cc <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	330e      	adds	r3, #14
 80043a2:	2204      	movs	r2, #4
 80043a4:	4619      	mov	r1, r3
 80043a6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80043aa:	f7fe fa8f 	bl	80028cc <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	330a      	adds	r3, #10
 80043b2:	2204      	movs	r2, #4
 80043b4:	4619      	mov	r1, r3
 80043b6:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80043ba:	f7fe fa87 	bl	80028cc <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3306      	adds	r3, #6
 80043c2:	2204      	movs	r2, #4
 80043c4:	4619      	mov	r1, r3
 80043c6:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80043ca:	f7fe fa7f 	bl	80028cc <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	7c9a      	ldrb	r2, [r3, #18]
 80043d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004400 <wizchip_setnetinfo+0x78>)
 80043d4:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	7cda      	ldrb	r2, [r3, #19]
 80043da:	4b09      	ldr	r3, [pc, #36]	@ (8004400 <wizchip_setnetinfo+0x78>)
 80043dc:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	7d1a      	ldrb	r2, [r3, #20]
 80043e2:	4b07      	ldr	r3, [pc, #28]	@ (8004400 <wizchip_setnetinfo+0x78>)
 80043e4:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	7d5a      	ldrb	r2, [r3, #21]
 80043ea:	4b05      	ldr	r3, [pc, #20]	@ (8004400 <wizchip_setnetinfo+0x78>)
 80043ec:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	7d9a      	ldrb	r2, [r3, #22]
 80043f2:	4b04      	ldr	r3, [pc, #16]	@ (8004404 <wizchip_setnetinfo+0x7c>)
 80043f4:	701a      	strb	r2, [r3, #0]
}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	200004b8 	.word	0x200004b8
 8004404:	200004bc 	.word	0x200004bc

08004408 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2206      	movs	r2, #6
 8004414:	4619      	mov	r1, r3
 8004416:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800441a:	f7fe f9f7 	bl	800280c <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	330e      	adds	r3, #14
 8004422:	2204      	movs	r2, #4
 8004424:	4619      	mov	r1, r3
 8004426:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800442a:	f7fe f9ef 	bl	800280c <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	330a      	adds	r3, #10
 8004432:	2204      	movs	r2, #4
 8004434:	4619      	mov	r1, r3
 8004436:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800443a:	f7fe f9e7 	bl	800280c <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3306      	adds	r3, #6
 8004442:	2204      	movs	r2, #4
 8004444:	4619      	mov	r1, r3
 8004446:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800444a:	f7fe f9df 	bl	800280c <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800444e:	4b0c      	ldr	r3, [pc, #48]	@ (8004480 <wizchip_getnetinfo+0x78>)
 8004450:	781a      	ldrb	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8004456:	4b0a      	ldr	r3, [pc, #40]	@ (8004480 <wizchip_getnetinfo+0x78>)
 8004458:	785a      	ldrb	r2, [r3, #1]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800445e:	4b08      	ldr	r3, [pc, #32]	@ (8004480 <wizchip_getnetinfo+0x78>)
 8004460:	789a      	ldrb	r2, [r3, #2]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8004466:	4b06      	ldr	r3, [pc, #24]	@ (8004480 <wizchip_getnetinfo+0x78>)
 8004468:	78da      	ldrb	r2, [r3, #3]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800446e:	4b05      	ldr	r3, [pc, #20]	@ (8004484 <wizchip_getnetinfo+0x7c>)
 8004470:	781a      	ldrb	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	759a      	strb	r2, [r3, #22]
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	200004b8 	.word	0x200004b8
 8004484:	200004bc 	.word	0x200004bc

08004488 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	4603      	mov	r3, r0
 8004490:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <wizchip_setnetmode+0x1e>
 80044a0:	f04f 33ff 	mov.w	r3, #4294967295
 80044a4:	e00e      	b.n	80044c4 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80044a6:	2000      	movs	r0, #0
 80044a8:	f7fe f916 	bl	80026d8 <WIZCHIP_READ>
 80044ac:	4603      	mov	r3, r0
 80044ae:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80044b0:	7bfa      	ldrb	r2, [r7, #15]
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	4619      	mov	r1, r3
 80044bc:	2000      	movs	r0, #0
 80044be:	f7fe f957 	bl	8002770 <WIZCHIP_WRITE>
   return 0;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 80044d0:	2000      	movs	r0, #0
 80044d2:	f7fe f901 	bl	80026d8 <WIZCHIP_READ>
 80044d6:	4603      	mov	r3, r0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	bd80      	pop	{r7, pc}

080044dc <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	4619      	mov	r1, r3
 80044ea:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80044ee:	f7fe f93f 	bl	8002770 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	885b      	ldrh	r3, [r3, #2]
 80044f6:	0a1b      	lsrs	r3, r3, #8
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	4619      	mov	r1, r3
 80044fe:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8004502:	f7fe f935 	bl	8002770 <WIZCHIP_WRITE>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	885b      	ldrh	r3, [r3, #2]
 800450a:	b2db      	uxtb	r3, r3
 800450c:	4619      	mov	r1, r3
 800450e:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8004512:	f7fe f92d 	bl	8002770 <WIZCHIP_WRITE>
}
 8004516:	bf00      	nop
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800451e:	b590      	push	{r4, r7, lr}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8004526:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800452a:	f7fe f8d5 	bl	80026d8 <WIZCHIP_READ>
 800452e:	4603      	mov	r3, r0
 8004530:	461a      	mov	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8004536:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 800453a:	f7fe f8cd 	bl	80026d8 <WIZCHIP_READ>
 800453e:	4603      	mov	r3, r0
 8004540:	021b      	lsls	r3, r3, #8
 8004542:	b29c      	uxth	r4, r3
 8004544:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8004548:	f7fe f8c6 	bl	80026d8 <WIZCHIP_READ>
 800454c:	4603      	mov	r3, r0
 800454e:	4423      	add	r3, r4
 8004550:	b29a      	uxth	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	805a      	strh	r2, [r3, #2]
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	bd90      	pop	{r4, r7, pc}
	...

08004560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004560:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004598 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004564:	f7fc fcc0 	bl	8000ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004568:	480c      	ldr	r0, [pc, #48]	@ (800459c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800456a:	490d      	ldr	r1, [pc, #52]	@ (80045a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800456c:	4a0d      	ldr	r2, [pc, #52]	@ (80045a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800456e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004570:	e002      	b.n	8004578 <LoopCopyDataInit>

08004572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004576:	3304      	adds	r3, #4

08004578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800457a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800457c:	d3f9      	bcc.n	8004572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800457e:	4a0a      	ldr	r2, [pc, #40]	@ (80045a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004580:	4c0a      	ldr	r4, [pc, #40]	@ (80045ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8004582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004584:	e001      	b.n	800458a <LoopFillZerobss>

08004586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004588:	3204      	adds	r2, #4

0800458a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800458a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800458c:	d3fb      	bcc.n	8004586 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800458e:	f001 ffa7 	bl	80064e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004592:	f7fc f899 	bl	80006c8 <main>
  bx  lr    
 8004596:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004598:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800459c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045a0:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80045a4:	080073ac 	.word	0x080073ac
  ldr r2, =_sbss
 80045a8:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80045ac:	20000610 	.word	0x20000610

080045b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045b0:	e7fe      	b.n	80045b0 <ADC_IRQHandler>
	...

080045b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045b8:	4b0e      	ldr	r3, [pc, #56]	@ (80045f4 <HAL_Init+0x40>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a0d      	ldr	r2, [pc, #52]	@ (80045f4 <HAL_Init+0x40>)
 80045be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045c4:	4b0b      	ldr	r3, [pc, #44]	@ (80045f4 <HAL_Init+0x40>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a0a      	ldr	r2, [pc, #40]	@ (80045f4 <HAL_Init+0x40>)
 80045ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045d0:	4b08      	ldr	r3, [pc, #32]	@ (80045f4 <HAL_Init+0x40>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a07      	ldr	r2, [pc, #28]	@ (80045f4 <HAL_Init+0x40>)
 80045d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045dc:	2003      	movs	r0, #3
 80045de:	f000 f931 	bl	8004844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045e2:	2000      	movs	r0, #0
 80045e4:	f000 f808 	bl	80045f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045e8:	f7fc fb84 	bl	8000cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40023c00 	.word	0x40023c00

080045f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004600:	4b12      	ldr	r3, [pc, #72]	@ (800464c <HAL_InitTick+0x54>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	4b12      	ldr	r3, [pc, #72]	@ (8004650 <HAL_InitTick+0x58>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	4619      	mov	r1, r3
 800460a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800460e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004612:	fbb2 f3f3 	udiv	r3, r2, r3
 8004616:	4618      	mov	r0, r3
 8004618:	f000 f93b 	bl	8004892 <HAL_SYSTICK_Config>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e00e      	b.n	8004644 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b0f      	cmp	r3, #15
 800462a:	d80a      	bhi.n	8004642 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800462c:	2200      	movs	r2, #0
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	f04f 30ff 	mov.w	r0, #4294967295
 8004634:	f000 f911 	bl	800485a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004638:	4a06      	ldr	r2, [pc, #24]	@ (8004654 <HAL_InitTick+0x5c>)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	e000      	b.n	8004644 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
}
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	20000078 	.word	0x20000078
 8004650:	200000b0 	.word	0x200000b0
 8004654:	200000ac 	.word	0x200000ac

08004658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800465c:	4b06      	ldr	r3, [pc, #24]	@ (8004678 <HAL_IncTick+0x20>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	461a      	mov	r2, r3
 8004662:	4b06      	ldr	r3, [pc, #24]	@ (800467c <HAL_IncTick+0x24>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4413      	add	r3, r2
 8004668:	4a04      	ldr	r2, [pc, #16]	@ (800467c <HAL_IncTick+0x24>)
 800466a:	6013      	str	r3, [r2, #0]
}
 800466c:	bf00      	nop
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	200000b0 	.word	0x200000b0
 800467c:	200004c0 	.word	0x200004c0

08004680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  return uwTick;
 8004684:	4b03      	ldr	r3, [pc, #12]	@ (8004694 <HAL_GetTick+0x14>)
 8004686:	681b      	ldr	r3, [r3, #0]
}
 8004688:	4618      	mov	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	200004c0 	.word	0x200004c0

08004698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046a0:	f7ff ffee 	bl	8004680 <HAL_GetTick>
 80046a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b0:	d005      	beq.n	80046be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046b2:	4b0a      	ldr	r3, [pc, #40]	@ (80046dc <HAL_Delay+0x44>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4413      	add	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046be:	bf00      	nop
 80046c0:	f7ff ffde 	bl	8004680 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d8f7      	bhi.n	80046c0 <HAL_Delay+0x28>
  {
  }
}
 80046d0:	bf00      	nop
 80046d2:	bf00      	nop
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	200000b0 	.word	0x200000b0

080046e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004724 <__NVIC_SetPriorityGrouping+0x44>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80046fc:	4013      	ands	r3, r2
 80046fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004708:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800470c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004712:	4a04      	ldr	r2, [pc, #16]	@ (8004724 <__NVIC_SetPriorityGrouping+0x44>)
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	60d3      	str	r3, [r2, #12]
}
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	e000ed00 	.word	0xe000ed00

08004728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800472c:	4b04      	ldr	r3, [pc, #16]	@ (8004740 <__NVIC_GetPriorityGrouping+0x18>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	0a1b      	lsrs	r3, r3, #8
 8004732:	f003 0307 	and.w	r3, r3, #7
}
 8004736:	4618      	mov	r0, r3
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	e000ed00 	.word	0xe000ed00

08004744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	6039      	str	r1, [r7, #0]
 800474e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004754:	2b00      	cmp	r3, #0
 8004756:	db0a      	blt.n	800476e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	b2da      	uxtb	r2, r3
 800475c:	490c      	ldr	r1, [pc, #48]	@ (8004790 <__NVIC_SetPriority+0x4c>)
 800475e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004762:	0112      	lsls	r2, r2, #4
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	440b      	add	r3, r1
 8004768:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800476c:	e00a      	b.n	8004784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	b2da      	uxtb	r2, r3
 8004772:	4908      	ldr	r1, [pc, #32]	@ (8004794 <__NVIC_SetPriority+0x50>)
 8004774:	79fb      	ldrb	r3, [r7, #7]
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	3b04      	subs	r3, #4
 800477c:	0112      	lsls	r2, r2, #4
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	440b      	add	r3, r1
 8004782:	761a      	strb	r2, [r3, #24]
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	e000e100 	.word	0xe000e100
 8004794:	e000ed00 	.word	0xe000ed00

08004798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004798:	b480      	push	{r7}
 800479a:	b089      	sub	sp, #36	@ 0x24
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f1c3 0307 	rsb	r3, r3, #7
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	bf28      	it	cs
 80047b6:	2304      	movcs	r3, #4
 80047b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	3304      	adds	r3, #4
 80047be:	2b06      	cmp	r3, #6
 80047c0:	d902      	bls.n	80047c8 <NVIC_EncodePriority+0x30>
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	3b03      	subs	r3, #3
 80047c6:	e000      	b.n	80047ca <NVIC_EncodePriority+0x32>
 80047c8:	2300      	movs	r3, #0
 80047ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047cc:	f04f 32ff 	mov.w	r2, #4294967295
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	fa02 f303 	lsl.w	r3, r2, r3
 80047d6:	43da      	mvns	r2, r3
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	401a      	ands	r2, r3
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047e0:	f04f 31ff 	mov.w	r1, #4294967295
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	fa01 f303 	lsl.w	r3, r1, r3
 80047ea:	43d9      	mvns	r1, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047f0:	4313      	orrs	r3, r2
         );
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3724      	adds	r7, #36	@ 0x24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3b01      	subs	r3, #1
 800480c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004810:	d301      	bcc.n	8004816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004812:	2301      	movs	r3, #1
 8004814:	e00f      	b.n	8004836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004816:	4a0a      	ldr	r2, [pc, #40]	@ (8004840 <SysTick_Config+0x40>)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3b01      	subs	r3, #1
 800481c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800481e:	210f      	movs	r1, #15
 8004820:	f04f 30ff 	mov.w	r0, #4294967295
 8004824:	f7ff ff8e 	bl	8004744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004828:	4b05      	ldr	r3, [pc, #20]	@ (8004840 <SysTick_Config+0x40>)
 800482a:	2200      	movs	r2, #0
 800482c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800482e:	4b04      	ldr	r3, [pc, #16]	@ (8004840 <SysTick_Config+0x40>)
 8004830:	2207      	movs	r2, #7
 8004832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	e000e010 	.word	0xe000e010

08004844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff ff47 	bl	80046e0 <__NVIC_SetPriorityGrouping>
}
 8004852:	bf00      	nop
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800485a:	b580      	push	{r7, lr}
 800485c:	b086      	sub	sp, #24
 800485e:	af00      	add	r7, sp, #0
 8004860:	4603      	mov	r3, r0
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	607a      	str	r2, [r7, #4]
 8004866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800486c:	f7ff ff5c 	bl	8004728 <__NVIC_GetPriorityGrouping>
 8004870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	6978      	ldr	r0, [r7, #20]
 8004878:	f7ff ff8e 	bl	8004798 <NVIC_EncodePriority>
 800487c:	4602      	mov	r2, r0
 800487e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004882:	4611      	mov	r1, r2
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff ff5d 	bl	8004744 <__NVIC_SetPriority>
}
 800488a:	bf00      	nop
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b082      	sub	sp, #8
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7ff ffb0 	bl	8004800 <SysTick_Config>
 80048a0:	4603      	mov	r3, r0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b089      	sub	sp, #36	@ 0x24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048be:	2300      	movs	r3, #0
 80048c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048c2:	2300      	movs	r3, #0
 80048c4:	61fb      	str	r3, [r7, #28]
 80048c6:	e165      	b.n	8004b94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048c8:	2201      	movs	r2, #1
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	4013      	ands	r3, r2
 80048da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	f040 8154 	bne.w	8004b8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d005      	beq.n	80048fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d130      	bne.n	8004960 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	2203      	movs	r2, #3
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	43db      	mvns	r3, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4013      	ands	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	4313      	orrs	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004934:	2201      	movs	r2, #1
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	43db      	mvns	r3, r3
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	4013      	ands	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	091b      	lsrs	r3, r3, #4
 800494a:	f003 0201 	and.w	r2, r3, #1
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	4313      	orrs	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	2b03      	cmp	r3, #3
 800496a:	d017      	beq.n	800499c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	2203      	movs	r2, #3
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	43db      	mvns	r3, r3
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	4013      	ands	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	fa02 f303 	lsl.w	r3, r2, r3
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	4313      	orrs	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f003 0303 	and.w	r3, r3, #3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d123      	bne.n	80049f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	08da      	lsrs	r2, r3, #3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3208      	adds	r2, #8
 80049b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	220f      	movs	r2, #15
 80049c0:	fa02 f303 	lsl.w	r3, r2, r3
 80049c4:	43db      	mvns	r3, r3
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	4013      	ands	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	fa02 f303 	lsl.w	r3, r2, r3
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	4313      	orrs	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	08da      	lsrs	r2, r3, #3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3208      	adds	r2, #8
 80049ea:	69b9      	ldr	r1, [r7, #24]
 80049ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	2203      	movs	r2, #3
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	43db      	mvns	r3, r3
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4013      	ands	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f003 0203 	and.w	r2, r3, #3
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80ae 	beq.w	8004b8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a32:	2300      	movs	r3, #0
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	4b5d      	ldr	r3, [pc, #372]	@ (8004bac <HAL_GPIO_Init+0x300>)
 8004a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3a:	4a5c      	ldr	r2, [pc, #368]	@ (8004bac <HAL_GPIO_Init+0x300>)
 8004a3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a40:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a42:	4b5a      	ldr	r3, [pc, #360]	@ (8004bac <HAL_GPIO_Init+0x300>)
 8004a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a4e:	4a58      	ldr	r2, [pc, #352]	@ (8004bb0 <HAL_GPIO_Init+0x304>)
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	089b      	lsrs	r3, r3, #2
 8004a54:	3302      	adds	r3, #2
 8004a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	220f      	movs	r2, #15
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	43db      	mvns	r3, r3
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a4f      	ldr	r2, [pc, #316]	@ (8004bb4 <HAL_GPIO_Init+0x308>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d025      	beq.n	8004ac6 <HAL_GPIO_Init+0x21a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a4e      	ldr	r2, [pc, #312]	@ (8004bb8 <HAL_GPIO_Init+0x30c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d01f      	beq.n	8004ac2 <HAL_GPIO_Init+0x216>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a4d      	ldr	r2, [pc, #308]	@ (8004bbc <HAL_GPIO_Init+0x310>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d019      	beq.n	8004abe <HAL_GPIO_Init+0x212>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a4c      	ldr	r2, [pc, #304]	@ (8004bc0 <HAL_GPIO_Init+0x314>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d013      	beq.n	8004aba <HAL_GPIO_Init+0x20e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a4b      	ldr	r2, [pc, #300]	@ (8004bc4 <HAL_GPIO_Init+0x318>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00d      	beq.n	8004ab6 <HAL_GPIO_Init+0x20a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a4a      	ldr	r2, [pc, #296]	@ (8004bc8 <HAL_GPIO_Init+0x31c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d007      	beq.n	8004ab2 <HAL_GPIO_Init+0x206>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a49      	ldr	r2, [pc, #292]	@ (8004bcc <HAL_GPIO_Init+0x320>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d101      	bne.n	8004aae <HAL_GPIO_Init+0x202>
 8004aaa:	2306      	movs	r3, #6
 8004aac:	e00c      	b.n	8004ac8 <HAL_GPIO_Init+0x21c>
 8004aae:	2307      	movs	r3, #7
 8004ab0:	e00a      	b.n	8004ac8 <HAL_GPIO_Init+0x21c>
 8004ab2:	2305      	movs	r3, #5
 8004ab4:	e008      	b.n	8004ac8 <HAL_GPIO_Init+0x21c>
 8004ab6:	2304      	movs	r3, #4
 8004ab8:	e006      	b.n	8004ac8 <HAL_GPIO_Init+0x21c>
 8004aba:	2303      	movs	r3, #3
 8004abc:	e004      	b.n	8004ac8 <HAL_GPIO_Init+0x21c>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e002      	b.n	8004ac8 <HAL_GPIO_Init+0x21c>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <HAL_GPIO_Init+0x21c>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	69fa      	ldr	r2, [r7, #28]
 8004aca:	f002 0203 	and.w	r2, r2, #3
 8004ace:	0092      	lsls	r2, r2, #2
 8004ad0:	4093      	lsls	r3, r2
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ad8:	4935      	ldr	r1, [pc, #212]	@ (8004bb0 <HAL_GPIO_Init+0x304>)
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	089b      	lsrs	r3, r3, #2
 8004ade:	3302      	adds	r3, #2
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ae6:	4b3a      	ldr	r3, [pc, #232]	@ (8004bd0 <HAL_GPIO_Init+0x324>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	43db      	mvns	r3, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	4013      	ands	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b0a:	4a31      	ldr	r2, [pc, #196]	@ (8004bd0 <HAL_GPIO_Init+0x324>)
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b10:	4b2f      	ldr	r3, [pc, #188]	@ (8004bd0 <HAL_GPIO_Init+0x324>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b34:	4a26      	ldr	r2, [pc, #152]	@ (8004bd0 <HAL_GPIO_Init+0x324>)
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b3a:	4b25      	ldr	r3, [pc, #148]	@ (8004bd0 <HAL_GPIO_Init+0x324>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	43db      	mvns	r3, r3
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	4013      	ands	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8004bd0 <HAL_GPIO_Init+0x324>)
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b64:	4b1a      	ldr	r3, [pc, #104]	@ (8004bd0 <HAL_GPIO_Init+0x324>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	4013      	ands	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b88:	4a11      	ldr	r2, [pc, #68]	@ (8004bd0 <HAL_GPIO_Init+0x324>)
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	3301      	adds	r3, #1
 8004b92:	61fb      	str	r3, [r7, #28]
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	2b0f      	cmp	r3, #15
 8004b98:	f67f ae96 	bls.w	80048c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b9c:	bf00      	nop
 8004b9e:	bf00      	nop
 8004ba0:	3724      	adds	r7, #36	@ 0x24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	40013800 	.word	0x40013800
 8004bb4:	40020000 	.word	0x40020000
 8004bb8:	40020400 	.word	0x40020400
 8004bbc:	40020800 	.word	0x40020800
 8004bc0:	40020c00 	.word	0x40020c00
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	40021400 	.word	0x40021400
 8004bcc:	40021800 	.word	0x40021800
 8004bd0:	40013c00 	.word	0x40013c00

08004bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	807b      	strh	r3, [r7, #2]
 8004be0:	4613      	mov	r3, r2
 8004be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004be4:	787b      	ldrb	r3, [r7, #1]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bea:	887a      	ldrh	r2, [r7, #2]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bf0:	e003      	b.n	8004bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bf2:	887b      	ldrh	r3, [r7, #2]
 8004bf4:	041a      	lsls	r2, r3, #16
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	619a      	str	r2, [r3, #24]
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
	...

08004c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e0cc      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c1c:	4b68      	ldr	r3, [pc, #416]	@ (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 030f 	and.w	r3, r3, #15
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d90c      	bls.n	8004c44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2a:	4b65      	ldr	r3, [pc, #404]	@ (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c32:	4b63      	ldr	r3, [pc, #396]	@ (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d001      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0b8      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d020      	beq.n	8004c92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c5c:	4b59      	ldr	r3, [pc, #356]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	4a58      	ldr	r2, [pc, #352]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c74:	4b53      	ldr	r3, [pc, #332]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	4a52      	ldr	r2, [pc, #328]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c80:	4b50      	ldr	r3, [pc, #320]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	494d      	ldr	r1, [pc, #308]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d044      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d107      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca6:	4b47      	ldr	r3, [pc, #284]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d119      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e07f      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d003      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d107      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc6:	4b3f      	ldr	r3, [pc, #252]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d109      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e06f      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd6:	4b3b      	ldr	r3, [pc, #236]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e067      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ce6:	4b37      	ldr	r3, [pc, #220]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f023 0203 	bic.w	r2, r3, #3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	4934      	ldr	r1, [pc, #208]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cf8:	f7ff fcc2 	bl	8004680 <HAL_GetTick>
 8004cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cfe:	e00a      	b.n	8004d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d00:	f7ff fcbe 	bl	8004680 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e04f      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d16:	4b2b      	ldr	r3, [pc, #172]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 020c 	and.w	r2, r3, #12
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d1eb      	bne.n	8004d00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d28:	4b25      	ldr	r3, [pc, #148]	@ (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d20c      	bcs.n	8004d50 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d36:	4b22      	ldr	r3, [pc, #136]	@ (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d3e:	4b20      	ldr	r3, [pc, #128]	@ (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d001      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e032      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d008      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d5c:	4b19      	ldr	r3, [pc, #100]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	4916      	ldr	r1, [pc, #88]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d009      	beq.n	8004d8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d7a:	4b12      	ldr	r3, [pc, #72]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	490e      	ldr	r1, [pc, #56]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d8e:	f000 f855 	bl	8004e3c <HAL_RCC_GetSysClockFreq>
 8004d92:	4602      	mov	r2, r0
 8004d94:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	490a      	ldr	r1, [pc, #40]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004da0:	5ccb      	ldrb	r3, [r1, r3]
 8004da2:	fa22 f303 	lsr.w	r3, r2, r3
 8004da6:	4a09      	ldr	r2, [pc, #36]	@ (8004dcc <HAL_RCC_ClockConfig+0x1c4>)
 8004da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004daa:	4b09      	ldr	r3, [pc, #36]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff fc22 	bl	80045f8 <HAL_InitTick>

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40023c00 	.word	0x40023c00
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	08007350 	.word	0x08007350
 8004dcc:	20000078 	.word	0x20000078
 8004dd0:	200000ac 	.word	0x200000ac

08004dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dd8:	4b03      	ldr	r3, [pc, #12]	@ (8004de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dda:	681b      	ldr	r3, [r3, #0]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	20000078 	.word	0x20000078

08004dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004df0:	f7ff fff0 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8004df4:	4602      	mov	r2, r0
 8004df6:	4b05      	ldr	r3, [pc, #20]	@ (8004e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	0a9b      	lsrs	r3, r3, #10
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	4903      	ldr	r1, [pc, #12]	@ (8004e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e02:	5ccb      	ldrb	r3, [r1, r3]
 8004e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	08007360 	.word	0x08007360

08004e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e18:	f7ff ffdc 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	4b05      	ldr	r3, [pc, #20]	@ (8004e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	0b5b      	lsrs	r3, r3, #13
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	4903      	ldr	r1, [pc, #12]	@ (8004e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e2a:	5ccb      	ldrb	r3, [r1, r3]
 8004e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40023800 	.word	0x40023800
 8004e38:	08007360 	.word	0x08007360

08004e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e40:	b0ae      	sub	sp, #184	@ 0xb8
 8004e42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e44:	2300      	movs	r3, #0
 8004e46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e62:	4bcb      	ldr	r3, [pc, #812]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 030c 	and.w	r3, r3, #12
 8004e6a:	2b0c      	cmp	r3, #12
 8004e6c:	f200 8206 	bhi.w	800527c <HAL_RCC_GetSysClockFreq+0x440>
 8004e70:	a201      	add	r2, pc, #4	@ (adr r2, 8004e78 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e76:	bf00      	nop
 8004e78:	08004ead 	.word	0x08004ead
 8004e7c:	0800527d 	.word	0x0800527d
 8004e80:	0800527d 	.word	0x0800527d
 8004e84:	0800527d 	.word	0x0800527d
 8004e88:	08004eb5 	.word	0x08004eb5
 8004e8c:	0800527d 	.word	0x0800527d
 8004e90:	0800527d 	.word	0x0800527d
 8004e94:	0800527d 	.word	0x0800527d
 8004e98:	08004ebd 	.word	0x08004ebd
 8004e9c:	0800527d 	.word	0x0800527d
 8004ea0:	0800527d 	.word	0x0800527d
 8004ea4:	0800527d 	.word	0x0800527d
 8004ea8:	080050ad 	.word	0x080050ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004eac:	4bb9      	ldr	r3, [pc, #740]	@ (8005194 <HAL_RCC_GetSysClockFreq+0x358>)
 8004eae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004eb2:	e1e7      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eb4:	4bb8      	ldr	r3, [pc, #736]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004eb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004eba:	e1e3      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ebc:	4bb4      	ldr	r3, [pc, #720]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ec8:	4bb1      	ldr	r3, [pc, #708]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x354>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d071      	beq.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ed4:	4bae      	ldr	r3, [pc, #696]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	099b      	lsrs	r3, r3, #6
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ee0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004ee4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ef6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004efa:	4622      	mov	r2, r4
 8004efc:	462b      	mov	r3, r5
 8004efe:	f04f 0000 	mov.w	r0, #0
 8004f02:	f04f 0100 	mov.w	r1, #0
 8004f06:	0159      	lsls	r1, r3, #5
 8004f08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f0c:	0150      	lsls	r0, r2, #5
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4621      	mov	r1, r4
 8004f14:	1a51      	subs	r1, r2, r1
 8004f16:	6439      	str	r1, [r7, #64]	@ 0x40
 8004f18:	4629      	mov	r1, r5
 8004f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8004f1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004f2c:	4649      	mov	r1, r9
 8004f2e:	018b      	lsls	r3, r1, #6
 8004f30:	4641      	mov	r1, r8
 8004f32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f36:	4641      	mov	r1, r8
 8004f38:	018a      	lsls	r2, r1, #6
 8004f3a:	4641      	mov	r1, r8
 8004f3c:	1a51      	subs	r1, r2, r1
 8004f3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f40:	4649      	mov	r1, r9
 8004f42:	eb63 0301 	sbc.w	r3, r3, r1
 8004f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004f54:	4649      	mov	r1, r9
 8004f56:	00cb      	lsls	r3, r1, #3
 8004f58:	4641      	mov	r1, r8
 8004f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f5e:	4641      	mov	r1, r8
 8004f60:	00ca      	lsls	r2, r1, #3
 8004f62:	4610      	mov	r0, r2
 8004f64:	4619      	mov	r1, r3
 8004f66:	4603      	mov	r3, r0
 8004f68:	4622      	mov	r2, r4
 8004f6a:	189b      	adds	r3, r3, r2
 8004f6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f6e:	462b      	mov	r3, r5
 8004f70:	460a      	mov	r2, r1
 8004f72:	eb42 0303 	adc.w	r3, r2, r3
 8004f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f78:	f04f 0200 	mov.w	r2, #0
 8004f7c:	f04f 0300 	mov.w	r3, #0
 8004f80:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004f84:	4629      	mov	r1, r5
 8004f86:	024b      	lsls	r3, r1, #9
 8004f88:	4621      	mov	r1, r4
 8004f8a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f8e:	4621      	mov	r1, r4
 8004f90:	024a      	lsls	r2, r1, #9
 8004f92:	4610      	mov	r0, r2
 8004f94:	4619      	mov	r1, r3
 8004f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fa0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004fa4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004fa8:	f7fb f98a 	bl	80002c0 <__aeabi_uldivmod>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fb6:	e067      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fb8:	4b75      	ldr	r3, [pc, #468]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x354>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	099b      	lsrs	r3, r3, #6
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004fc4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004fc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004fd6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004fda:	4622      	mov	r2, r4
 8004fdc:	462b      	mov	r3, r5
 8004fde:	f04f 0000 	mov.w	r0, #0
 8004fe2:	f04f 0100 	mov.w	r1, #0
 8004fe6:	0159      	lsls	r1, r3, #5
 8004fe8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fec:	0150      	lsls	r0, r2, #5
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4621      	mov	r1, r4
 8004ff4:	1a51      	subs	r1, r2, r1
 8004ff6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004ff8:	4629      	mov	r1, r5
 8004ffa:	eb63 0301 	sbc.w	r3, r3, r1
 8004ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800500c:	4649      	mov	r1, r9
 800500e:	018b      	lsls	r3, r1, #6
 8005010:	4641      	mov	r1, r8
 8005012:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005016:	4641      	mov	r1, r8
 8005018:	018a      	lsls	r2, r1, #6
 800501a:	4641      	mov	r1, r8
 800501c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005020:	4649      	mov	r1, r9
 8005022:	eb63 0b01 	sbc.w	fp, r3, r1
 8005026:	f04f 0200 	mov.w	r2, #0
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005032:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005036:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800503a:	4692      	mov	sl, r2
 800503c:	469b      	mov	fp, r3
 800503e:	4623      	mov	r3, r4
 8005040:	eb1a 0303 	adds.w	r3, sl, r3
 8005044:	623b      	str	r3, [r7, #32]
 8005046:	462b      	mov	r3, r5
 8005048:	eb4b 0303 	adc.w	r3, fp, r3
 800504c:	627b      	str	r3, [r7, #36]	@ 0x24
 800504e:	f04f 0200 	mov.w	r2, #0
 8005052:	f04f 0300 	mov.w	r3, #0
 8005056:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800505a:	4629      	mov	r1, r5
 800505c:	028b      	lsls	r3, r1, #10
 800505e:	4621      	mov	r1, r4
 8005060:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005064:	4621      	mov	r1, r4
 8005066:	028a      	lsls	r2, r1, #10
 8005068:	4610      	mov	r0, r2
 800506a:	4619      	mov	r1, r3
 800506c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005070:	2200      	movs	r2, #0
 8005072:	673b      	str	r3, [r7, #112]	@ 0x70
 8005074:	677a      	str	r2, [r7, #116]	@ 0x74
 8005076:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800507a:	f7fb f921 	bl	80002c0 <__aeabi_uldivmod>
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	4613      	mov	r3, r2
 8005084:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005088:	4b41      	ldr	r3, [pc, #260]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x354>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	0c1b      	lsrs	r3, r3, #16
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	3301      	adds	r3, #1
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800509a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800509e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80050a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80050aa:	e0eb      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050ac:	4b38      	ldr	r3, [pc, #224]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x354>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050b8:	4b35      	ldr	r3, [pc, #212]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x354>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d06b      	beq.n	800519c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050c4:	4b32      	ldr	r3, [pc, #200]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x354>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	099b      	lsrs	r3, r3, #6
 80050ca:	2200      	movs	r2, #0
 80050cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80050d8:	2300      	movs	r3, #0
 80050da:	667b      	str	r3, [r7, #100]	@ 0x64
 80050dc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80050e0:	4622      	mov	r2, r4
 80050e2:	462b      	mov	r3, r5
 80050e4:	f04f 0000 	mov.w	r0, #0
 80050e8:	f04f 0100 	mov.w	r1, #0
 80050ec:	0159      	lsls	r1, r3, #5
 80050ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050f2:	0150      	lsls	r0, r2, #5
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	4621      	mov	r1, r4
 80050fa:	1a51      	subs	r1, r2, r1
 80050fc:	61b9      	str	r1, [r7, #24]
 80050fe:	4629      	mov	r1, r5
 8005100:	eb63 0301 	sbc.w	r3, r3, r1
 8005104:	61fb      	str	r3, [r7, #28]
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005112:	4659      	mov	r1, fp
 8005114:	018b      	lsls	r3, r1, #6
 8005116:	4651      	mov	r1, sl
 8005118:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800511c:	4651      	mov	r1, sl
 800511e:	018a      	lsls	r2, r1, #6
 8005120:	4651      	mov	r1, sl
 8005122:	ebb2 0801 	subs.w	r8, r2, r1
 8005126:	4659      	mov	r1, fp
 8005128:	eb63 0901 	sbc.w	r9, r3, r1
 800512c:	f04f 0200 	mov.w	r2, #0
 8005130:	f04f 0300 	mov.w	r3, #0
 8005134:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005138:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800513c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005140:	4690      	mov	r8, r2
 8005142:	4699      	mov	r9, r3
 8005144:	4623      	mov	r3, r4
 8005146:	eb18 0303 	adds.w	r3, r8, r3
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	462b      	mov	r3, r5
 800514e:	eb49 0303 	adc.w	r3, r9, r3
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005160:	4629      	mov	r1, r5
 8005162:	024b      	lsls	r3, r1, #9
 8005164:	4621      	mov	r1, r4
 8005166:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800516a:	4621      	mov	r1, r4
 800516c:	024a      	lsls	r2, r1, #9
 800516e:	4610      	mov	r0, r2
 8005170:	4619      	mov	r1, r3
 8005172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005176:	2200      	movs	r2, #0
 8005178:	65bb      	str	r3, [r7, #88]	@ 0x58
 800517a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800517c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005180:	f7fb f89e 	bl	80002c0 <__aeabi_uldivmod>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4613      	mov	r3, r2
 800518a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800518e:	e065      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x420>
 8005190:	40023800 	.word	0x40023800
 8005194:	00f42400 	.word	0x00f42400
 8005198:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800519c:	4b3d      	ldr	r3, [pc, #244]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x458>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	099b      	lsrs	r3, r3, #6
 80051a2:	2200      	movs	r2, #0
 80051a4:	4618      	mov	r0, r3
 80051a6:	4611      	mov	r1, r2
 80051a8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80051ae:	2300      	movs	r3, #0
 80051b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80051b2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80051b6:	4642      	mov	r2, r8
 80051b8:	464b      	mov	r3, r9
 80051ba:	f04f 0000 	mov.w	r0, #0
 80051be:	f04f 0100 	mov.w	r1, #0
 80051c2:	0159      	lsls	r1, r3, #5
 80051c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051c8:	0150      	lsls	r0, r2, #5
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4641      	mov	r1, r8
 80051d0:	1a51      	subs	r1, r2, r1
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	4649      	mov	r1, r9
 80051d6:	eb63 0301 	sbc.w	r3, r3, r1
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	f04f 0300 	mov.w	r3, #0
 80051e4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80051e8:	4659      	mov	r1, fp
 80051ea:	018b      	lsls	r3, r1, #6
 80051ec:	4651      	mov	r1, sl
 80051ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051f2:	4651      	mov	r1, sl
 80051f4:	018a      	lsls	r2, r1, #6
 80051f6:	4651      	mov	r1, sl
 80051f8:	1a54      	subs	r4, r2, r1
 80051fa:	4659      	mov	r1, fp
 80051fc:	eb63 0501 	sbc.w	r5, r3, r1
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	00eb      	lsls	r3, r5, #3
 800520a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800520e:	00e2      	lsls	r2, r4, #3
 8005210:	4614      	mov	r4, r2
 8005212:	461d      	mov	r5, r3
 8005214:	4643      	mov	r3, r8
 8005216:	18e3      	adds	r3, r4, r3
 8005218:	603b      	str	r3, [r7, #0]
 800521a:	464b      	mov	r3, r9
 800521c:	eb45 0303 	adc.w	r3, r5, r3
 8005220:	607b      	str	r3, [r7, #4]
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	f04f 0300 	mov.w	r3, #0
 800522a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800522e:	4629      	mov	r1, r5
 8005230:	028b      	lsls	r3, r1, #10
 8005232:	4621      	mov	r1, r4
 8005234:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005238:	4621      	mov	r1, r4
 800523a:	028a      	lsls	r2, r1, #10
 800523c:	4610      	mov	r0, r2
 800523e:	4619      	mov	r1, r3
 8005240:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005244:	2200      	movs	r2, #0
 8005246:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005248:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800524a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800524e:	f7fb f837 	bl	80002c0 <__aeabi_uldivmod>
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	4613      	mov	r3, r2
 8005258:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800525c:	4b0d      	ldr	r3, [pc, #52]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x458>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	0f1b      	lsrs	r3, r3, #28
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800526a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800526e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005272:	fbb2 f3f3 	udiv	r3, r2, r3
 8005276:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800527a:	e003      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800527c:	4b06      	ldr	r3, [pc, #24]	@ (8005298 <HAL_RCC_GetSysClockFreq+0x45c>)
 800527e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005282:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005284:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005288:	4618      	mov	r0, r3
 800528a:	37b8      	adds	r7, #184	@ 0xb8
 800528c:	46bd      	mov	sp, r7
 800528e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005292:	bf00      	nop
 8005294:	40023800 	.word	0x40023800
 8005298:	00f42400 	.word	0x00f42400

0800529c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e28d      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 8083 	beq.w	80053c2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80052bc:	4b94      	ldr	r3, [pc, #592]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f003 030c 	and.w	r3, r3, #12
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d019      	beq.n	80052fc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80052c8:	4b91      	ldr	r3, [pc, #580]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 030c 	and.w	r3, r3, #12
        || \
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d106      	bne.n	80052e2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80052d4:	4b8e      	ldr	r3, [pc, #568]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052e0:	d00c      	beq.n	80052fc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052e2:	4b8b      	ldr	r3, [pc, #556]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d112      	bne.n	8005314 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ee:	4b88      	ldr	r3, [pc, #544]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052fa:	d10b      	bne.n	8005314 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052fc:	4b84      	ldr	r3, [pc, #528]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d05b      	beq.n	80053c0 <HAL_RCC_OscConfig+0x124>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d157      	bne.n	80053c0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e25a      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800531c:	d106      	bne.n	800532c <HAL_RCC_OscConfig+0x90>
 800531e:	4b7c      	ldr	r3, [pc, #496]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a7b      	ldr	r2, [pc, #492]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	e01d      	b.n	8005368 <HAL_RCC_OscConfig+0xcc>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005334:	d10c      	bne.n	8005350 <HAL_RCC_OscConfig+0xb4>
 8005336:	4b76      	ldr	r3, [pc, #472]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a75      	ldr	r2, [pc, #468]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 800533c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	4b73      	ldr	r3, [pc, #460]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a72      	ldr	r2, [pc, #456]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	e00b      	b.n	8005368 <HAL_RCC_OscConfig+0xcc>
 8005350:	4b6f      	ldr	r3, [pc, #444]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a6e      	ldr	r2, [pc, #440]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005356:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800535a:	6013      	str	r3, [r2, #0]
 800535c:	4b6c      	ldr	r3, [pc, #432]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a6b      	ldr	r2, [pc, #428]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d013      	beq.n	8005398 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005370:	f7ff f986 	bl	8004680 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005378:	f7ff f982 	bl	8004680 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b64      	cmp	r3, #100	@ 0x64
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e21f      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800538a:	4b61      	ldr	r3, [pc, #388]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0f0      	beq.n	8005378 <HAL_RCC_OscConfig+0xdc>
 8005396:	e014      	b.n	80053c2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005398:	f7ff f972 	bl	8004680 <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053a0:	f7ff f96e 	bl	8004680 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b64      	cmp	r3, #100	@ 0x64
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e20b      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053b2:	4b57      	ldr	r3, [pc, #348]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1f0      	bne.n	80053a0 <HAL_RCC_OscConfig+0x104>
 80053be:	e000      	b.n	80053c2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d06f      	beq.n	80054ae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80053ce:	4b50      	ldr	r3, [pc, #320]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 030c 	and.w	r3, r3, #12
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d017      	beq.n	800540a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80053da:	4b4d      	ldr	r3, [pc, #308]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 030c 	and.w	r3, r3, #12
        || \
 80053e2:	2b08      	cmp	r3, #8
 80053e4:	d105      	bne.n	80053f2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80053e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00b      	beq.n	800540a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053f2:	4b47      	ldr	r3, [pc, #284]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80053fa:	2b0c      	cmp	r3, #12
 80053fc:	d11c      	bne.n	8005438 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053fe:	4b44      	ldr	r3, [pc, #272]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d116      	bne.n	8005438 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800540a:	4b41      	ldr	r3, [pc, #260]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <HAL_RCC_OscConfig+0x186>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d001      	beq.n	8005422 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e1d3      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005422:	4b3b      	ldr	r3, [pc, #236]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	4937      	ldr	r1, [pc, #220]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005432:	4313      	orrs	r3, r2
 8005434:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005436:	e03a      	b.n	80054ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d020      	beq.n	8005482 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005440:	4b34      	ldr	r3, [pc, #208]	@ (8005514 <HAL_RCC_OscConfig+0x278>)
 8005442:	2201      	movs	r2, #1
 8005444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005446:	f7ff f91b 	bl	8004680 <HAL_GetTick>
 800544a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544c:	e008      	b.n	8005460 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800544e:	f7ff f917 	bl	8004680 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e1b4      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005460:	4b2b      	ldr	r3, [pc, #172]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0f0      	beq.n	800544e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800546c:	4b28      	ldr	r3, [pc, #160]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	4925      	ldr	r1, [pc, #148]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 800547c:	4313      	orrs	r3, r2
 800547e:	600b      	str	r3, [r1, #0]
 8005480:	e015      	b.n	80054ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005482:	4b24      	ldr	r3, [pc, #144]	@ (8005514 <HAL_RCC_OscConfig+0x278>)
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005488:	f7ff f8fa 	bl	8004680 <HAL_GetTick>
 800548c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005490:	f7ff f8f6 	bl	8004680 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e193      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1f0      	bne.n	8005490 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0308 	and.w	r3, r3, #8
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d036      	beq.n	8005528 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d016      	beq.n	80054f0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054c2:	4b15      	ldr	r3, [pc, #84]	@ (8005518 <HAL_RCC_OscConfig+0x27c>)
 80054c4:	2201      	movs	r2, #1
 80054c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c8:	f7ff f8da 	bl	8004680 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054d0:	f7ff f8d6 	bl	8004680 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e173      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005510 <HAL_RCC_OscConfig+0x274>)
 80054e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0f0      	beq.n	80054d0 <HAL_RCC_OscConfig+0x234>
 80054ee:	e01b      	b.n	8005528 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054f0:	4b09      	ldr	r3, [pc, #36]	@ (8005518 <HAL_RCC_OscConfig+0x27c>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f6:	f7ff f8c3 	bl	8004680 <HAL_GetTick>
 80054fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054fc:	e00e      	b.n	800551c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054fe:	f7ff f8bf 	bl	8004680 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d907      	bls.n	800551c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e15c      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
 8005510:	40023800 	.word	0x40023800
 8005514:	42470000 	.word	0x42470000
 8005518:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800551c:	4b8a      	ldr	r3, [pc, #552]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 800551e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1ea      	bne.n	80054fe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 8097 	beq.w	8005664 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005536:	2300      	movs	r3, #0
 8005538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800553a:	4b83      	ldr	r3, [pc, #524]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 800553c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10f      	bne.n	8005566 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005546:	2300      	movs	r3, #0
 8005548:	60bb      	str	r3, [r7, #8]
 800554a:	4b7f      	ldr	r3, [pc, #508]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 800554c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554e:	4a7e      	ldr	r2, [pc, #504]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 8005550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005554:	6413      	str	r3, [r2, #64]	@ 0x40
 8005556:	4b7c      	ldr	r3, [pc, #496]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 8005558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800555e:	60bb      	str	r3, [r7, #8]
 8005560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005562:	2301      	movs	r3, #1
 8005564:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005566:	4b79      	ldr	r3, [pc, #484]	@ (800574c <HAL_RCC_OscConfig+0x4b0>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556e:	2b00      	cmp	r3, #0
 8005570:	d118      	bne.n	80055a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005572:	4b76      	ldr	r3, [pc, #472]	@ (800574c <HAL_RCC_OscConfig+0x4b0>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a75      	ldr	r2, [pc, #468]	@ (800574c <HAL_RCC_OscConfig+0x4b0>)
 8005578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800557c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800557e:	f7ff f87f 	bl	8004680 <HAL_GetTick>
 8005582:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005584:	e008      	b.n	8005598 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005586:	f7ff f87b 	bl	8004680 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d901      	bls.n	8005598 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e118      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005598:	4b6c      	ldr	r3, [pc, #432]	@ (800574c <HAL_RCC_OscConfig+0x4b0>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0f0      	beq.n	8005586 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d106      	bne.n	80055ba <HAL_RCC_OscConfig+0x31e>
 80055ac:	4b66      	ldr	r3, [pc, #408]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80055ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b0:	4a65      	ldr	r2, [pc, #404]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80055b2:	f043 0301 	orr.w	r3, r3, #1
 80055b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80055b8:	e01c      	b.n	80055f4 <HAL_RCC_OscConfig+0x358>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2b05      	cmp	r3, #5
 80055c0:	d10c      	bne.n	80055dc <HAL_RCC_OscConfig+0x340>
 80055c2:	4b61      	ldr	r3, [pc, #388]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80055c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c6:	4a60      	ldr	r2, [pc, #384]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80055c8:	f043 0304 	orr.w	r3, r3, #4
 80055cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80055ce:	4b5e      	ldr	r3, [pc, #376]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80055d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d2:	4a5d      	ldr	r2, [pc, #372]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80055d4:	f043 0301 	orr.w	r3, r3, #1
 80055d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80055da:	e00b      	b.n	80055f4 <HAL_RCC_OscConfig+0x358>
 80055dc:	4b5a      	ldr	r3, [pc, #360]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80055de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e0:	4a59      	ldr	r2, [pc, #356]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80055e2:	f023 0301 	bic.w	r3, r3, #1
 80055e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80055e8:	4b57      	ldr	r3, [pc, #348]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80055ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ec:	4a56      	ldr	r2, [pc, #344]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80055ee:	f023 0304 	bic.w	r3, r3, #4
 80055f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d015      	beq.n	8005628 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fc:	f7ff f840 	bl	8004680 <HAL_GetTick>
 8005600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005602:	e00a      	b.n	800561a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005604:	f7ff f83c 	bl	8004680 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005612:	4293      	cmp	r3, r2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e0d7      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800561a:	4b4b      	ldr	r3, [pc, #300]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 800561c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0ee      	beq.n	8005604 <HAL_RCC_OscConfig+0x368>
 8005626:	e014      	b.n	8005652 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005628:	f7ff f82a 	bl	8004680 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800562e:	e00a      	b.n	8005646 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005630:	f7ff f826 	bl	8004680 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800563e:	4293      	cmp	r3, r2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e0c1      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005646:	4b40      	ldr	r3, [pc, #256]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 8005648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1ee      	bne.n	8005630 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005652:	7dfb      	ldrb	r3, [r7, #23]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d105      	bne.n	8005664 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005658:	4b3b      	ldr	r3, [pc, #236]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 800565a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565c:	4a3a      	ldr	r2, [pc, #232]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 800565e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005662:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 80ad 	beq.w	80057c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800566e:	4b36      	ldr	r3, [pc, #216]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f003 030c 	and.w	r3, r3, #12
 8005676:	2b08      	cmp	r3, #8
 8005678:	d060      	beq.n	800573c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	2b02      	cmp	r3, #2
 8005680:	d145      	bne.n	800570e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005682:	4b33      	ldr	r3, [pc, #204]	@ (8005750 <HAL_RCC_OscConfig+0x4b4>)
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005688:	f7fe fffa 	bl	8004680 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005690:	f7fe fff6 	bl	8004680 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b02      	cmp	r3, #2
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e093      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056a2:	4b29      	ldr	r3, [pc, #164]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1f0      	bne.n	8005690 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69da      	ldr	r2, [r3, #28]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	431a      	orrs	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056bc:	019b      	lsls	r3, r3, #6
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c4:	085b      	lsrs	r3, r3, #1
 80056c6:	3b01      	subs	r3, #1
 80056c8:	041b      	lsls	r3, r3, #16
 80056ca:	431a      	orrs	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d0:	061b      	lsls	r3, r3, #24
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d8:	071b      	lsls	r3, r3, #28
 80056da:	491b      	ldr	r1, [pc, #108]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005750 <HAL_RCC_OscConfig+0x4b4>)
 80056e2:	2201      	movs	r2, #1
 80056e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e6:	f7fe ffcb 	bl	8004680 <HAL_GetTick>
 80056ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056ec:	e008      	b.n	8005700 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ee:	f7fe ffc7 	bl	8004680 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e064      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005700:	4b11      	ldr	r3, [pc, #68]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0f0      	beq.n	80056ee <HAL_RCC_OscConfig+0x452>
 800570c:	e05c      	b.n	80057c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800570e:	4b10      	ldr	r3, [pc, #64]	@ (8005750 <HAL_RCC_OscConfig+0x4b4>)
 8005710:	2200      	movs	r2, #0
 8005712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005714:	f7fe ffb4 	bl	8004680 <HAL_GetTick>
 8005718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800571a:	e008      	b.n	800572e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800571c:	f7fe ffb0 	bl	8004680 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e04d      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800572e:	4b06      	ldr	r3, [pc, #24]	@ (8005748 <HAL_RCC_OscConfig+0x4ac>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1f0      	bne.n	800571c <HAL_RCC_OscConfig+0x480>
 800573a:	e045      	b.n	80057c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d107      	bne.n	8005754 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e040      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
 8005748:	40023800 	.word	0x40023800
 800574c:	40007000 	.word	0x40007000
 8005750:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005754:	4b1f      	ldr	r3, [pc, #124]	@ (80057d4 <HAL_RCC_OscConfig+0x538>)
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d030      	beq.n	80057c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800576c:	429a      	cmp	r2, r3
 800576e:	d129      	bne.n	80057c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800577a:	429a      	cmp	r2, r3
 800577c:	d122      	bne.n	80057c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005784:	4013      	ands	r3, r2
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800578a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800578c:	4293      	cmp	r3, r2
 800578e:	d119      	bne.n	80057c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579a:	085b      	lsrs	r3, r3, #1
 800579c:	3b01      	subs	r3, #1
 800579e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d10f      	bne.n	80057c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d107      	bne.n	80057c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d001      	beq.n	80057c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e000      	b.n	80057ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	40023800 	.word	0x40023800

080057d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e07b      	b.n	80058e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d108      	bne.n	8005804 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057fa:	d009      	beq.n	8005810 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	61da      	str	r2, [r3, #28]
 8005802:	e005      	b.n	8005810 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d106      	bne.n	8005830 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7fb f9ea 	bl	8000c04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005846:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005858:	431a      	orrs	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	431a      	orrs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	431a      	orrs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005894:	ea42 0103 	orr.w	r1, r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	0c1b      	lsrs	r3, r3, #16
 80058ae:	f003 0104 	and.w	r1, r3, #4
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b6:	f003 0210 	and.w	r2, r3, #16
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69da      	ldr	r2, [r3, #28]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b082      	sub	sp, #8
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e042      	b.n	8005982 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d106      	bne.n	8005916 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f83a 	bl	800598a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2224      	movs	r2, #36	@ 0x24
 800591a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800592c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f836 	bl	80059a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691a      	ldr	r2, [r3, #16]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005942:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695a      	ldr	r2, [r3, #20]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005952:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68da      	ldr	r2, [r3, #12]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005962:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2220      	movs	r2, #32
 800596e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2220      	movs	r2, #32
 8005976:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8005992:	bf00      	nop
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
	...

080059a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059a4:	b0c0      	sub	sp, #256	@ 0x100
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80059b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059bc:	68d9      	ldr	r1, [r3, #12]
 80059be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	ea40 0301 	orr.w	r3, r0, r1
 80059c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	431a      	orrs	r2, r3
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80059f8:	f021 010c 	bic.w	r1, r1, #12
 80059fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a06:	430b      	orrs	r3, r1
 8005a08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1a:	6999      	ldr	r1, [r3, #24]
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	ea40 0301 	orr.w	r3, r0, r1
 8005a26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	4b8f      	ldr	r3, [pc, #572]	@ (8005c6c <UART_SetConfig+0x2cc>)
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d005      	beq.n	8005a40 <UART_SetConfig+0xa0>
 8005a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	4b8d      	ldr	r3, [pc, #564]	@ (8005c70 <UART_SetConfig+0x2d0>)
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d104      	bne.n	8005a4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a40:	f7ff f9e8 	bl	8004e14 <HAL_RCC_GetPCLK2Freq>
 8005a44:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a48:	e003      	b.n	8005a52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a4a:	f7ff f9cf 	bl	8004dec <HAL_RCC_GetPCLK1Freq>
 8005a4e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a5c:	f040 810c 	bne.w	8005c78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a64:	2200      	movs	r2, #0
 8005a66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a72:	4622      	mov	r2, r4
 8005a74:	462b      	mov	r3, r5
 8005a76:	1891      	adds	r1, r2, r2
 8005a78:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a7a:	415b      	adcs	r3, r3
 8005a7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a82:	4621      	mov	r1, r4
 8005a84:	eb12 0801 	adds.w	r8, r2, r1
 8005a88:	4629      	mov	r1, r5
 8005a8a:	eb43 0901 	adc.w	r9, r3, r1
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	f04f 0300 	mov.w	r3, #0
 8005a96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005aa2:	4690      	mov	r8, r2
 8005aa4:	4699      	mov	r9, r3
 8005aa6:	4623      	mov	r3, r4
 8005aa8:	eb18 0303 	adds.w	r3, r8, r3
 8005aac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ab0:	462b      	mov	r3, r5
 8005ab2:	eb49 0303 	adc.w	r3, r9, r3
 8005ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ac6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005aca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ace:	460b      	mov	r3, r1
 8005ad0:	18db      	adds	r3, r3, r3
 8005ad2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	eb42 0303 	adc.w	r3, r2, r3
 8005ada:	657b      	str	r3, [r7, #84]	@ 0x54
 8005adc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ae0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ae4:	f7fa fbec 	bl	80002c0 <__aeabi_uldivmod>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4b61      	ldr	r3, [pc, #388]	@ (8005c74 <UART_SetConfig+0x2d4>)
 8005aee:	fba3 2302 	umull	r2, r3, r3, r2
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	011c      	lsls	r4, r3, #4
 8005af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b00:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b08:	4642      	mov	r2, r8
 8005b0a:	464b      	mov	r3, r9
 8005b0c:	1891      	adds	r1, r2, r2
 8005b0e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b10:	415b      	adcs	r3, r3
 8005b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b18:	4641      	mov	r1, r8
 8005b1a:	eb12 0a01 	adds.w	sl, r2, r1
 8005b1e:	4649      	mov	r1, r9
 8005b20:	eb43 0b01 	adc.w	fp, r3, r1
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	f04f 0300 	mov.w	r3, #0
 8005b2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b38:	4692      	mov	sl, r2
 8005b3a:	469b      	mov	fp, r3
 8005b3c:	4643      	mov	r3, r8
 8005b3e:	eb1a 0303 	adds.w	r3, sl, r3
 8005b42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b46:	464b      	mov	r3, r9
 8005b48:	eb4b 0303 	adc.w	r3, fp, r3
 8005b4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b5c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b64:	460b      	mov	r3, r1
 8005b66:	18db      	adds	r3, r3, r3
 8005b68:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	eb42 0303 	adc.w	r3, r2, r3
 8005b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b7a:	f7fa fba1 	bl	80002c0 <__aeabi_uldivmod>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4611      	mov	r1, r2
 8005b84:	4b3b      	ldr	r3, [pc, #236]	@ (8005c74 <UART_SetConfig+0x2d4>)
 8005b86:	fba3 2301 	umull	r2, r3, r3, r1
 8005b8a:	095b      	lsrs	r3, r3, #5
 8005b8c:	2264      	movs	r2, #100	@ 0x64
 8005b8e:	fb02 f303 	mul.w	r3, r2, r3
 8005b92:	1acb      	subs	r3, r1, r3
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b9a:	4b36      	ldr	r3, [pc, #216]	@ (8005c74 <UART_SetConfig+0x2d4>)
 8005b9c:	fba3 2302 	umull	r2, r3, r3, r2
 8005ba0:	095b      	lsrs	r3, r3, #5
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ba8:	441c      	add	r4, r3
 8005baa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bb4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005bb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005bbc:	4642      	mov	r2, r8
 8005bbe:	464b      	mov	r3, r9
 8005bc0:	1891      	adds	r1, r2, r2
 8005bc2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005bc4:	415b      	adcs	r3, r3
 8005bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005bcc:	4641      	mov	r1, r8
 8005bce:	1851      	adds	r1, r2, r1
 8005bd0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005bd2:	4649      	mov	r1, r9
 8005bd4:	414b      	adcs	r3, r1
 8005bd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bd8:	f04f 0200 	mov.w	r2, #0
 8005bdc:	f04f 0300 	mov.w	r3, #0
 8005be0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005be4:	4659      	mov	r1, fp
 8005be6:	00cb      	lsls	r3, r1, #3
 8005be8:	4651      	mov	r1, sl
 8005bea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bee:	4651      	mov	r1, sl
 8005bf0:	00ca      	lsls	r2, r1, #3
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	4642      	mov	r2, r8
 8005bfa:	189b      	adds	r3, r3, r2
 8005bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c00:	464b      	mov	r3, r9
 8005c02:	460a      	mov	r2, r1
 8005c04:	eb42 0303 	adc.w	r3, r2, r3
 8005c08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c20:	460b      	mov	r3, r1
 8005c22:	18db      	adds	r3, r3, r3
 8005c24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c26:	4613      	mov	r3, r2
 8005c28:	eb42 0303 	adc.w	r3, r2, r3
 8005c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c36:	f7fa fb43 	bl	80002c0 <__aeabi_uldivmod>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c74 <UART_SetConfig+0x2d4>)
 8005c40:	fba3 1302 	umull	r1, r3, r3, r2
 8005c44:	095b      	lsrs	r3, r3, #5
 8005c46:	2164      	movs	r1, #100	@ 0x64
 8005c48:	fb01 f303 	mul.w	r3, r1, r3
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	3332      	adds	r3, #50	@ 0x32
 8005c52:	4a08      	ldr	r2, [pc, #32]	@ (8005c74 <UART_SetConfig+0x2d4>)
 8005c54:	fba2 2303 	umull	r2, r3, r2, r3
 8005c58:	095b      	lsrs	r3, r3, #5
 8005c5a:	f003 0207 	and.w	r2, r3, #7
 8005c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4422      	add	r2, r4
 8005c66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c68:	e106      	b.n	8005e78 <UART_SetConfig+0x4d8>
 8005c6a:	bf00      	nop
 8005c6c:	40011000 	.word	0x40011000
 8005c70:	40011400 	.word	0x40011400
 8005c74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c8a:	4642      	mov	r2, r8
 8005c8c:	464b      	mov	r3, r9
 8005c8e:	1891      	adds	r1, r2, r2
 8005c90:	6239      	str	r1, [r7, #32]
 8005c92:	415b      	adcs	r3, r3
 8005c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c9a:	4641      	mov	r1, r8
 8005c9c:	1854      	adds	r4, r2, r1
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	eb43 0501 	adc.w	r5, r3, r1
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	f04f 0300 	mov.w	r3, #0
 8005cac:	00eb      	lsls	r3, r5, #3
 8005cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cb2:	00e2      	lsls	r2, r4, #3
 8005cb4:	4614      	mov	r4, r2
 8005cb6:	461d      	mov	r5, r3
 8005cb8:	4643      	mov	r3, r8
 8005cba:	18e3      	adds	r3, r4, r3
 8005cbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005cc0:	464b      	mov	r3, r9
 8005cc2:	eb45 0303 	adc.w	r3, r5, r3
 8005cc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005cda:	f04f 0200 	mov.w	r2, #0
 8005cde:	f04f 0300 	mov.w	r3, #0
 8005ce2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	008b      	lsls	r3, r1, #2
 8005cea:	4621      	mov	r1, r4
 8005cec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	008a      	lsls	r2, r1, #2
 8005cf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005cf8:	f7fa fae2 	bl	80002c0 <__aeabi_uldivmod>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	460b      	mov	r3, r1
 8005d00:	4b60      	ldr	r3, [pc, #384]	@ (8005e84 <UART_SetConfig+0x4e4>)
 8005d02:	fba3 2302 	umull	r2, r3, r3, r2
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	011c      	lsls	r4, r3, #4
 8005d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d1c:	4642      	mov	r2, r8
 8005d1e:	464b      	mov	r3, r9
 8005d20:	1891      	adds	r1, r2, r2
 8005d22:	61b9      	str	r1, [r7, #24]
 8005d24:	415b      	adcs	r3, r3
 8005d26:	61fb      	str	r3, [r7, #28]
 8005d28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d2c:	4641      	mov	r1, r8
 8005d2e:	1851      	adds	r1, r2, r1
 8005d30:	6139      	str	r1, [r7, #16]
 8005d32:	4649      	mov	r1, r9
 8005d34:	414b      	adcs	r3, r1
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	f04f 0200 	mov.w	r2, #0
 8005d3c:	f04f 0300 	mov.w	r3, #0
 8005d40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d44:	4659      	mov	r1, fp
 8005d46:	00cb      	lsls	r3, r1, #3
 8005d48:	4651      	mov	r1, sl
 8005d4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d4e:	4651      	mov	r1, sl
 8005d50:	00ca      	lsls	r2, r1, #3
 8005d52:	4610      	mov	r0, r2
 8005d54:	4619      	mov	r1, r3
 8005d56:	4603      	mov	r3, r0
 8005d58:	4642      	mov	r2, r8
 8005d5a:	189b      	adds	r3, r3, r2
 8005d5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d60:	464b      	mov	r3, r9
 8005d62:	460a      	mov	r2, r1
 8005d64:	eb42 0303 	adc.w	r3, r2, r3
 8005d68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	f04f 0300 	mov.w	r3, #0
 8005d80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d84:	4649      	mov	r1, r9
 8005d86:	008b      	lsls	r3, r1, #2
 8005d88:	4641      	mov	r1, r8
 8005d8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d8e:	4641      	mov	r1, r8
 8005d90:	008a      	lsls	r2, r1, #2
 8005d92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d96:	f7fa fa93 	bl	80002c0 <__aeabi_uldivmod>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	4611      	mov	r1, r2
 8005da0:	4b38      	ldr	r3, [pc, #224]	@ (8005e84 <UART_SetConfig+0x4e4>)
 8005da2:	fba3 2301 	umull	r2, r3, r3, r1
 8005da6:	095b      	lsrs	r3, r3, #5
 8005da8:	2264      	movs	r2, #100	@ 0x64
 8005daa:	fb02 f303 	mul.w	r3, r2, r3
 8005dae:	1acb      	subs	r3, r1, r3
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	3332      	adds	r3, #50	@ 0x32
 8005db4:	4a33      	ldr	r2, [pc, #204]	@ (8005e84 <UART_SetConfig+0x4e4>)
 8005db6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dba:	095b      	lsrs	r3, r3, #5
 8005dbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dc0:	441c      	add	r4, r3
 8005dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005dca:	677a      	str	r2, [r7, #116]	@ 0x74
 8005dcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005dd0:	4642      	mov	r2, r8
 8005dd2:	464b      	mov	r3, r9
 8005dd4:	1891      	adds	r1, r2, r2
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	415b      	adcs	r3, r3
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005de0:	4641      	mov	r1, r8
 8005de2:	1851      	adds	r1, r2, r1
 8005de4:	6039      	str	r1, [r7, #0]
 8005de6:	4649      	mov	r1, r9
 8005de8:	414b      	adcs	r3, r1
 8005dea:	607b      	str	r3, [r7, #4]
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	f04f 0300 	mov.w	r3, #0
 8005df4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005df8:	4659      	mov	r1, fp
 8005dfa:	00cb      	lsls	r3, r1, #3
 8005dfc:	4651      	mov	r1, sl
 8005dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e02:	4651      	mov	r1, sl
 8005e04:	00ca      	lsls	r2, r1, #3
 8005e06:	4610      	mov	r0, r2
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	189b      	adds	r3, r3, r2
 8005e10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e12:	464b      	mov	r3, r9
 8005e14:	460a      	mov	r2, r1
 8005e16:	eb42 0303 	adc.w	r3, r2, r3
 8005e1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e26:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	f04f 0300 	mov.w	r3, #0
 8005e30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e34:	4649      	mov	r1, r9
 8005e36:	008b      	lsls	r3, r1, #2
 8005e38:	4641      	mov	r1, r8
 8005e3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e3e:	4641      	mov	r1, r8
 8005e40:	008a      	lsls	r2, r1, #2
 8005e42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e46:	f7fa fa3b 	bl	80002c0 <__aeabi_uldivmod>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e84 <UART_SetConfig+0x4e4>)
 8005e50:	fba3 1302 	umull	r1, r3, r3, r2
 8005e54:	095b      	lsrs	r3, r3, #5
 8005e56:	2164      	movs	r1, #100	@ 0x64
 8005e58:	fb01 f303 	mul.w	r3, r1, r3
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	3332      	adds	r3, #50	@ 0x32
 8005e62:	4a08      	ldr	r2, [pc, #32]	@ (8005e84 <UART_SetConfig+0x4e4>)
 8005e64:	fba2 2303 	umull	r2, r3, r2, r3
 8005e68:	095b      	lsrs	r3, r3, #5
 8005e6a:	f003 020f 	and.w	r2, r3, #15
 8005e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4422      	add	r2, r4
 8005e76:	609a      	str	r2, [r3, #8]
}
 8005e78:	bf00      	nop
 8005e7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e84:	51eb851f 	.word	0x51eb851f

08005e88 <std>:
 8005e88:	2300      	movs	r3, #0
 8005e8a:	b510      	push	{r4, lr}
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8005e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e96:	6083      	str	r3, [r0, #8]
 8005e98:	8181      	strh	r1, [r0, #12]
 8005e9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e9c:	81c2      	strh	r2, [r0, #14]
 8005e9e:	6183      	str	r3, [r0, #24]
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	2208      	movs	r2, #8
 8005ea4:	305c      	adds	r0, #92	@ 0x5c
 8005ea6:	f000 fab5 	bl	8006414 <memset>
 8005eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee0 <std+0x58>)
 8005eac:	6263      	str	r3, [r4, #36]	@ 0x24
 8005eae:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee4 <std+0x5c>)
 8005eb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee8 <std+0x60>)
 8005eb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005eec <std+0x64>)
 8005eb8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005eba:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef0 <std+0x68>)
 8005ebc:	6224      	str	r4, [r4, #32]
 8005ebe:	429c      	cmp	r4, r3
 8005ec0:	d006      	beq.n	8005ed0 <std+0x48>
 8005ec2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ec6:	4294      	cmp	r4, r2
 8005ec8:	d002      	beq.n	8005ed0 <std+0x48>
 8005eca:	33d0      	adds	r3, #208	@ 0xd0
 8005ecc:	429c      	cmp	r4, r3
 8005ece:	d105      	bne.n	8005edc <std+0x54>
 8005ed0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ed8:	f000 bb26 	b.w	8006528 <__retarget_lock_init_recursive>
 8005edc:	bd10      	pop	{r4, pc}
 8005ede:	bf00      	nop
 8005ee0:	08006265 	.word	0x08006265
 8005ee4:	08006287 	.word	0x08006287
 8005ee8:	080062bf 	.word	0x080062bf
 8005eec:	080062e3 	.word	0x080062e3
 8005ef0:	200004c4 	.word	0x200004c4

08005ef4 <stdio_exit_handler>:
 8005ef4:	4a02      	ldr	r2, [pc, #8]	@ (8005f00 <stdio_exit_handler+0xc>)
 8005ef6:	4903      	ldr	r1, [pc, #12]	@ (8005f04 <stdio_exit_handler+0x10>)
 8005ef8:	4803      	ldr	r0, [pc, #12]	@ (8005f08 <stdio_exit_handler+0x14>)
 8005efa:	f000 b869 	b.w	8005fd0 <_fwalk_sglue>
 8005efe:	bf00      	nop
 8005f00:	200000b4 	.word	0x200000b4
 8005f04:	08006df1 	.word	0x08006df1
 8005f08:	200000c4 	.word	0x200000c4

08005f0c <cleanup_stdio>:
 8005f0c:	6841      	ldr	r1, [r0, #4]
 8005f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005f40 <cleanup_stdio+0x34>)
 8005f10:	4299      	cmp	r1, r3
 8005f12:	b510      	push	{r4, lr}
 8005f14:	4604      	mov	r4, r0
 8005f16:	d001      	beq.n	8005f1c <cleanup_stdio+0x10>
 8005f18:	f000 ff6a 	bl	8006df0 <_fflush_r>
 8005f1c:	68a1      	ldr	r1, [r4, #8]
 8005f1e:	4b09      	ldr	r3, [pc, #36]	@ (8005f44 <cleanup_stdio+0x38>)
 8005f20:	4299      	cmp	r1, r3
 8005f22:	d002      	beq.n	8005f2a <cleanup_stdio+0x1e>
 8005f24:	4620      	mov	r0, r4
 8005f26:	f000 ff63 	bl	8006df0 <_fflush_r>
 8005f2a:	68e1      	ldr	r1, [r4, #12]
 8005f2c:	4b06      	ldr	r3, [pc, #24]	@ (8005f48 <cleanup_stdio+0x3c>)
 8005f2e:	4299      	cmp	r1, r3
 8005f30:	d004      	beq.n	8005f3c <cleanup_stdio+0x30>
 8005f32:	4620      	mov	r0, r4
 8005f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f38:	f000 bf5a 	b.w	8006df0 <_fflush_r>
 8005f3c:	bd10      	pop	{r4, pc}
 8005f3e:	bf00      	nop
 8005f40:	200004c4 	.word	0x200004c4
 8005f44:	2000052c 	.word	0x2000052c
 8005f48:	20000594 	.word	0x20000594

08005f4c <global_stdio_init.part.0>:
 8005f4c:	b510      	push	{r4, lr}
 8005f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f7c <global_stdio_init.part.0+0x30>)
 8005f50:	4c0b      	ldr	r4, [pc, #44]	@ (8005f80 <global_stdio_init.part.0+0x34>)
 8005f52:	4a0c      	ldr	r2, [pc, #48]	@ (8005f84 <global_stdio_init.part.0+0x38>)
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	4620      	mov	r0, r4
 8005f58:	2200      	movs	r2, #0
 8005f5a:	2104      	movs	r1, #4
 8005f5c:	f7ff ff94 	bl	8005e88 <std>
 8005f60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f64:	2201      	movs	r2, #1
 8005f66:	2109      	movs	r1, #9
 8005f68:	f7ff ff8e 	bl	8005e88 <std>
 8005f6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f70:	2202      	movs	r2, #2
 8005f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f76:	2112      	movs	r1, #18
 8005f78:	f7ff bf86 	b.w	8005e88 <std>
 8005f7c:	200005fc 	.word	0x200005fc
 8005f80:	200004c4 	.word	0x200004c4
 8005f84:	08005ef5 	.word	0x08005ef5

08005f88 <__sfp_lock_acquire>:
 8005f88:	4801      	ldr	r0, [pc, #4]	@ (8005f90 <__sfp_lock_acquire+0x8>)
 8005f8a:	f000 bace 	b.w	800652a <__retarget_lock_acquire_recursive>
 8005f8e:	bf00      	nop
 8005f90:	20000605 	.word	0x20000605

08005f94 <__sfp_lock_release>:
 8005f94:	4801      	ldr	r0, [pc, #4]	@ (8005f9c <__sfp_lock_release+0x8>)
 8005f96:	f000 bac9 	b.w	800652c <__retarget_lock_release_recursive>
 8005f9a:	bf00      	nop
 8005f9c:	20000605 	.word	0x20000605

08005fa0 <__sinit>:
 8005fa0:	b510      	push	{r4, lr}
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	f7ff fff0 	bl	8005f88 <__sfp_lock_acquire>
 8005fa8:	6a23      	ldr	r3, [r4, #32]
 8005faa:	b11b      	cbz	r3, 8005fb4 <__sinit+0x14>
 8005fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb0:	f7ff bff0 	b.w	8005f94 <__sfp_lock_release>
 8005fb4:	4b04      	ldr	r3, [pc, #16]	@ (8005fc8 <__sinit+0x28>)
 8005fb6:	6223      	str	r3, [r4, #32]
 8005fb8:	4b04      	ldr	r3, [pc, #16]	@ (8005fcc <__sinit+0x2c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1f5      	bne.n	8005fac <__sinit+0xc>
 8005fc0:	f7ff ffc4 	bl	8005f4c <global_stdio_init.part.0>
 8005fc4:	e7f2      	b.n	8005fac <__sinit+0xc>
 8005fc6:	bf00      	nop
 8005fc8:	08005f0d 	.word	0x08005f0d
 8005fcc:	200005fc 	.word	0x200005fc

08005fd0 <_fwalk_sglue>:
 8005fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	4688      	mov	r8, r1
 8005fd8:	4614      	mov	r4, r2
 8005fda:	2600      	movs	r6, #0
 8005fdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fe0:	f1b9 0901 	subs.w	r9, r9, #1
 8005fe4:	d505      	bpl.n	8005ff2 <_fwalk_sglue+0x22>
 8005fe6:	6824      	ldr	r4, [r4, #0]
 8005fe8:	2c00      	cmp	r4, #0
 8005fea:	d1f7      	bne.n	8005fdc <_fwalk_sglue+0xc>
 8005fec:	4630      	mov	r0, r6
 8005fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ff2:	89ab      	ldrh	r3, [r5, #12]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d907      	bls.n	8006008 <_fwalk_sglue+0x38>
 8005ff8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	d003      	beq.n	8006008 <_fwalk_sglue+0x38>
 8006000:	4629      	mov	r1, r5
 8006002:	4638      	mov	r0, r7
 8006004:	47c0      	blx	r8
 8006006:	4306      	orrs	r6, r0
 8006008:	3568      	adds	r5, #104	@ 0x68
 800600a:	e7e9      	b.n	8005fe0 <_fwalk_sglue+0x10>

0800600c <iprintf>:
 800600c:	b40f      	push	{r0, r1, r2, r3}
 800600e:	b507      	push	{r0, r1, r2, lr}
 8006010:	4906      	ldr	r1, [pc, #24]	@ (800602c <iprintf+0x20>)
 8006012:	ab04      	add	r3, sp, #16
 8006014:	6808      	ldr	r0, [r1, #0]
 8006016:	f853 2b04 	ldr.w	r2, [r3], #4
 800601a:	6881      	ldr	r1, [r0, #8]
 800601c:	9301      	str	r3, [sp, #4]
 800601e:	f000 fbbf 	bl	80067a0 <_vfiprintf_r>
 8006022:	b003      	add	sp, #12
 8006024:	f85d eb04 	ldr.w	lr, [sp], #4
 8006028:	b004      	add	sp, #16
 800602a:	4770      	bx	lr
 800602c:	200000c0 	.word	0x200000c0

08006030 <_puts_r>:
 8006030:	6a03      	ldr	r3, [r0, #32]
 8006032:	b570      	push	{r4, r5, r6, lr}
 8006034:	6884      	ldr	r4, [r0, #8]
 8006036:	4605      	mov	r5, r0
 8006038:	460e      	mov	r6, r1
 800603a:	b90b      	cbnz	r3, 8006040 <_puts_r+0x10>
 800603c:	f7ff ffb0 	bl	8005fa0 <__sinit>
 8006040:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006042:	07db      	lsls	r3, r3, #31
 8006044:	d405      	bmi.n	8006052 <_puts_r+0x22>
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	0598      	lsls	r0, r3, #22
 800604a:	d402      	bmi.n	8006052 <_puts_r+0x22>
 800604c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800604e:	f000 fa6c 	bl	800652a <__retarget_lock_acquire_recursive>
 8006052:	89a3      	ldrh	r3, [r4, #12]
 8006054:	0719      	lsls	r1, r3, #28
 8006056:	d502      	bpl.n	800605e <_puts_r+0x2e>
 8006058:	6923      	ldr	r3, [r4, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d135      	bne.n	80060ca <_puts_r+0x9a>
 800605e:	4621      	mov	r1, r4
 8006060:	4628      	mov	r0, r5
 8006062:	f000 f981 	bl	8006368 <__swsetup_r>
 8006066:	b380      	cbz	r0, 80060ca <_puts_r+0x9a>
 8006068:	f04f 35ff 	mov.w	r5, #4294967295
 800606c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800606e:	07da      	lsls	r2, r3, #31
 8006070:	d405      	bmi.n	800607e <_puts_r+0x4e>
 8006072:	89a3      	ldrh	r3, [r4, #12]
 8006074:	059b      	lsls	r3, r3, #22
 8006076:	d402      	bmi.n	800607e <_puts_r+0x4e>
 8006078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800607a:	f000 fa57 	bl	800652c <__retarget_lock_release_recursive>
 800607e:	4628      	mov	r0, r5
 8006080:	bd70      	pop	{r4, r5, r6, pc}
 8006082:	2b00      	cmp	r3, #0
 8006084:	da04      	bge.n	8006090 <_puts_r+0x60>
 8006086:	69a2      	ldr	r2, [r4, #24]
 8006088:	429a      	cmp	r2, r3
 800608a:	dc17      	bgt.n	80060bc <_puts_r+0x8c>
 800608c:	290a      	cmp	r1, #10
 800608e:	d015      	beq.n	80060bc <_puts_r+0x8c>
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	6022      	str	r2, [r4, #0]
 8006096:	7019      	strb	r1, [r3, #0]
 8006098:	68a3      	ldr	r3, [r4, #8]
 800609a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800609e:	3b01      	subs	r3, #1
 80060a0:	60a3      	str	r3, [r4, #8]
 80060a2:	2900      	cmp	r1, #0
 80060a4:	d1ed      	bne.n	8006082 <_puts_r+0x52>
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	da11      	bge.n	80060ce <_puts_r+0x9e>
 80060aa:	4622      	mov	r2, r4
 80060ac:	210a      	movs	r1, #10
 80060ae:	4628      	mov	r0, r5
 80060b0:	f000 f91b 	bl	80062ea <__swbuf_r>
 80060b4:	3001      	adds	r0, #1
 80060b6:	d0d7      	beq.n	8006068 <_puts_r+0x38>
 80060b8:	250a      	movs	r5, #10
 80060ba:	e7d7      	b.n	800606c <_puts_r+0x3c>
 80060bc:	4622      	mov	r2, r4
 80060be:	4628      	mov	r0, r5
 80060c0:	f000 f913 	bl	80062ea <__swbuf_r>
 80060c4:	3001      	adds	r0, #1
 80060c6:	d1e7      	bne.n	8006098 <_puts_r+0x68>
 80060c8:	e7ce      	b.n	8006068 <_puts_r+0x38>
 80060ca:	3e01      	subs	r6, #1
 80060cc:	e7e4      	b.n	8006098 <_puts_r+0x68>
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	6022      	str	r2, [r4, #0]
 80060d4:	220a      	movs	r2, #10
 80060d6:	701a      	strb	r2, [r3, #0]
 80060d8:	e7ee      	b.n	80060b8 <_puts_r+0x88>
	...

080060dc <puts>:
 80060dc:	4b02      	ldr	r3, [pc, #8]	@ (80060e8 <puts+0xc>)
 80060de:	4601      	mov	r1, r0
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	f7ff bfa5 	b.w	8006030 <_puts_r>
 80060e6:	bf00      	nop
 80060e8:	200000c0 	.word	0x200000c0

080060ec <setbuf>:
 80060ec:	fab1 f281 	clz	r2, r1
 80060f0:	0952      	lsrs	r2, r2, #5
 80060f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80060f6:	0052      	lsls	r2, r2, #1
 80060f8:	f000 b800 	b.w	80060fc <setvbuf>

080060fc <setvbuf>:
 80060fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006100:	461d      	mov	r5, r3
 8006102:	4b57      	ldr	r3, [pc, #348]	@ (8006260 <setvbuf+0x164>)
 8006104:	681f      	ldr	r7, [r3, #0]
 8006106:	4604      	mov	r4, r0
 8006108:	460e      	mov	r6, r1
 800610a:	4690      	mov	r8, r2
 800610c:	b127      	cbz	r7, 8006118 <setvbuf+0x1c>
 800610e:	6a3b      	ldr	r3, [r7, #32]
 8006110:	b913      	cbnz	r3, 8006118 <setvbuf+0x1c>
 8006112:	4638      	mov	r0, r7
 8006114:	f7ff ff44 	bl	8005fa0 <__sinit>
 8006118:	f1b8 0f02 	cmp.w	r8, #2
 800611c:	d006      	beq.n	800612c <setvbuf+0x30>
 800611e:	f1b8 0f01 	cmp.w	r8, #1
 8006122:	f200 809a 	bhi.w	800625a <setvbuf+0x15e>
 8006126:	2d00      	cmp	r5, #0
 8006128:	f2c0 8097 	blt.w	800625a <setvbuf+0x15e>
 800612c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800612e:	07d9      	lsls	r1, r3, #31
 8006130:	d405      	bmi.n	800613e <setvbuf+0x42>
 8006132:	89a3      	ldrh	r3, [r4, #12]
 8006134:	059a      	lsls	r2, r3, #22
 8006136:	d402      	bmi.n	800613e <setvbuf+0x42>
 8006138:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800613a:	f000 f9f6 	bl	800652a <__retarget_lock_acquire_recursive>
 800613e:	4621      	mov	r1, r4
 8006140:	4638      	mov	r0, r7
 8006142:	f000 fe55 	bl	8006df0 <_fflush_r>
 8006146:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006148:	b141      	cbz	r1, 800615c <setvbuf+0x60>
 800614a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800614e:	4299      	cmp	r1, r3
 8006150:	d002      	beq.n	8006158 <setvbuf+0x5c>
 8006152:	4638      	mov	r0, r7
 8006154:	f000 f9fa 	bl	800654c <_free_r>
 8006158:	2300      	movs	r3, #0
 800615a:	6363      	str	r3, [r4, #52]	@ 0x34
 800615c:	2300      	movs	r3, #0
 800615e:	61a3      	str	r3, [r4, #24]
 8006160:	6063      	str	r3, [r4, #4]
 8006162:	89a3      	ldrh	r3, [r4, #12]
 8006164:	061b      	lsls	r3, r3, #24
 8006166:	d503      	bpl.n	8006170 <setvbuf+0x74>
 8006168:	6921      	ldr	r1, [r4, #16]
 800616a:	4638      	mov	r0, r7
 800616c:	f000 f9ee 	bl	800654c <_free_r>
 8006170:	89a3      	ldrh	r3, [r4, #12]
 8006172:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8006176:	f023 0303 	bic.w	r3, r3, #3
 800617a:	f1b8 0f02 	cmp.w	r8, #2
 800617e:	81a3      	strh	r3, [r4, #12]
 8006180:	d061      	beq.n	8006246 <setvbuf+0x14a>
 8006182:	ab01      	add	r3, sp, #4
 8006184:	466a      	mov	r2, sp
 8006186:	4621      	mov	r1, r4
 8006188:	4638      	mov	r0, r7
 800618a:	f000 fe59 	bl	8006e40 <__swhatbuf_r>
 800618e:	89a3      	ldrh	r3, [r4, #12]
 8006190:	4318      	orrs	r0, r3
 8006192:	81a0      	strh	r0, [r4, #12]
 8006194:	bb2d      	cbnz	r5, 80061e2 <setvbuf+0xe6>
 8006196:	9d00      	ldr	r5, [sp, #0]
 8006198:	4628      	mov	r0, r5
 800619a:	f000 fa21 	bl	80065e0 <malloc>
 800619e:	4606      	mov	r6, r0
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d152      	bne.n	800624a <setvbuf+0x14e>
 80061a4:	f8dd 9000 	ldr.w	r9, [sp]
 80061a8:	45a9      	cmp	r9, r5
 80061aa:	d140      	bne.n	800622e <setvbuf+0x132>
 80061ac:	f04f 35ff 	mov.w	r5, #4294967295
 80061b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061b4:	f043 0202 	orr.w	r2, r3, #2
 80061b8:	81a2      	strh	r2, [r4, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	60a2      	str	r2, [r4, #8]
 80061be:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80061c2:	6022      	str	r2, [r4, #0]
 80061c4:	6122      	str	r2, [r4, #16]
 80061c6:	2201      	movs	r2, #1
 80061c8:	6162      	str	r2, [r4, #20]
 80061ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80061cc:	07d6      	lsls	r6, r2, #31
 80061ce:	d404      	bmi.n	80061da <setvbuf+0xde>
 80061d0:	0598      	lsls	r0, r3, #22
 80061d2:	d402      	bmi.n	80061da <setvbuf+0xde>
 80061d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061d6:	f000 f9a9 	bl	800652c <__retarget_lock_release_recursive>
 80061da:	4628      	mov	r0, r5
 80061dc:	b003      	add	sp, #12
 80061de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061e2:	2e00      	cmp	r6, #0
 80061e4:	d0d8      	beq.n	8006198 <setvbuf+0x9c>
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	b913      	cbnz	r3, 80061f0 <setvbuf+0xf4>
 80061ea:	4638      	mov	r0, r7
 80061ec:	f7ff fed8 	bl	8005fa0 <__sinit>
 80061f0:	f1b8 0f01 	cmp.w	r8, #1
 80061f4:	bf08      	it	eq
 80061f6:	89a3      	ldrheq	r3, [r4, #12]
 80061f8:	6026      	str	r6, [r4, #0]
 80061fa:	bf04      	itt	eq
 80061fc:	f043 0301 	orreq.w	r3, r3, #1
 8006200:	81a3      	strheq	r3, [r4, #12]
 8006202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006206:	f013 0208 	ands.w	r2, r3, #8
 800620a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800620e:	d01e      	beq.n	800624e <setvbuf+0x152>
 8006210:	07d9      	lsls	r1, r3, #31
 8006212:	bf41      	itttt	mi
 8006214:	2200      	movmi	r2, #0
 8006216:	426d      	negmi	r5, r5
 8006218:	60a2      	strmi	r2, [r4, #8]
 800621a:	61a5      	strmi	r5, [r4, #24]
 800621c:	bf58      	it	pl
 800621e:	60a5      	strpl	r5, [r4, #8]
 8006220:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006222:	07d2      	lsls	r2, r2, #31
 8006224:	d401      	bmi.n	800622a <setvbuf+0x12e>
 8006226:	059b      	lsls	r3, r3, #22
 8006228:	d513      	bpl.n	8006252 <setvbuf+0x156>
 800622a:	2500      	movs	r5, #0
 800622c:	e7d5      	b.n	80061da <setvbuf+0xde>
 800622e:	4648      	mov	r0, r9
 8006230:	f000 f9d6 	bl	80065e0 <malloc>
 8006234:	4606      	mov	r6, r0
 8006236:	2800      	cmp	r0, #0
 8006238:	d0b8      	beq.n	80061ac <setvbuf+0xb0>
 800623a:	89a3      	ldrh	r3, [r4, #12]
 800623c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006240:	81a3      	strh	r3, [r4, #12]
 8006242:	464d      	mov	r5, r9
 8006244:	e7cf      	b.n	80061e6 <setvbuf+0xea>
 8006246:	2500      	movs	r5, #0
 8006248:	e7b2      	b.n	80061b0 <setvbuf+0xb4>
 800624a:	46a9      	mov	r9, r5
 800624c:	e7f5      	b.n	800623a <setvbuf+0x13e>
 800624e:	60a2      	str	r2, [r4, #8]
 8006250:	e7e6      	b.n	8006220 <setvbuf+0x124>
 8006252:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006254:	f000 f96a 	bl	800652c <__retarget_lock_release_recursive>
 8006258:	e7e7      	b.n	800622a <setvbuf+0x12e>
 800625a:	f04f 35ff 	mov.w	r5, #4294967295
 800625e:	e7bc      	b.n	80061da <setvbuf+0xde>
 8006260:	200000c0 	.word	0x200000c0

08006264 <__sread>:
 8006264:	b510      	push	{r4, lr}
 8006266:	460c      	mov	r4, r1
 8006268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800626c:	f000 f90e 	bl	800648c <_read_r>
 8006270:	2800      	cmp	r0, #0
 8006272:	bfab      	itete	ge
 8006274:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006276:	89a3      	ldrhlt	r3, [r4, #12]
 8006278:	181b      	addge	r3, r3, r0
 800627a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800627e:	bfac      	ite	ge
 8006280:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006282:	81a3      	strhlt	r3, [r4, #12]
 8006284:	bd10      	pop	{r4, pc}

08006286 <__swrite>:
 8006286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800628a:	461f      	mov	r7, r3
 800628c:	898b      	ldrh	r3, [r1, #12]
 800628e:	05db      	lsls	r3, r3, #23
 8006290:	4605      	mov	r5, r0
 8006292:	460c      	mov	r4, r1
 8006294:	4616      	mov	r6, r2
 8006296:	d505      	bpl.n	80062a4 <__swrite+0x1e>
 8006298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800629c:	2302      	movs	r3, #2
 800629e:	2200      	movs	r2, #0
 80062a0:	f000 f8e2 	bl	8006468 <_lseek_r>
 80062a4:	89a3      	ldrh	r3, [r4, #12]
 80062a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062ae:	81a3      	strh	r3, [r4, #12]
 80062b0:	4632      	mov	r2, r6
 80062b2:	463b      	mov	r3, r7
 80062b4:	4628      	mov	r0, r5
 80062b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062ba:	f000 b8f9 	b.w	80064b0 <_write_r>

080062be <__sseek>:
 80062be:	b510      	push	{r4, lr}
 80062c0:	460c      	mov	r4, r1
 80062c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062c6:	f000 f8cf 	bl	8006468 <_lseek_r>
 80062ca:	1c43      	adds	r3, r0, #1
 80062cc:	89a3      	ldrh	r3, [r4, #12]
 80062ce:	bf15      	itete	ne
 80062d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80062d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80062d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80062da:	81a3      	strheq	r3, [r4, #12]
 80062dc:	bf18      	it	ne
 80062de:	81a3      	strhne	r3, [r4, #12]
 80062e0:	bd10      	pop	{r4, pc}

080062e2 <__sclose>:
 80062e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062e6:	f000 b8af 	b.w	8006448 <_close_r>

080062ea <__swbuf_r>:
 80062ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ec:	460e      	mov	r6, r1
 80062ee:	4614      	mov	r4, r2
 80062f0:	4605      	mov	r5, r0
 80062f2:	b118      	cbz	r0, 80062fc <__swbuf_r+0x12>
 80062f4:	6a03      	ldr	r3, [r0, #32]
 80062f6:	b90b      	cbnz	r3, 80062fc <__swbuf_r+0x12>
 80062f8:	f7ff fe52 	bl	8005fa0 <__sinit>
 80062fc:	69a3      	ldr	r3, [r4, #24]
 80062fe:	60a3      	str	r3, [r4, #8]
 8006300:	89a3      	ldrh	r3, [r4, #12]
 8006302:	071a      	lsls	r2, r3, #28
 8006304:	d501      	bpl.n	800630a <__swbuf_r+0x20>
 8006306:	6923      	ldr	r3, [r4, #16]
 8006308:	b943      	cbnz	r3, 800631c <__swbuf_r+0x32>
 800630a:	4621      	mov	r1, r4
 800630c:	4628      	mov	r0, r5
 800630e:	f000 f82b 	bl	8006368 <__swsetup_r>
 8006312:	b118      	cbz	r0, 800631c <__swbuf_r+0x32>
 8006314:	f04f 37ff 	mov.w	r7, #4294967295
 8006318:	4638      	mov	r0, r7
 800631a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	6922      	ldr	r2, [r4, #16]
 8006320:	1a98      	subs	r0, r3, r2
 8006322:	6963      	ldr	r3, [r4, #20]
 8006324:	b2f6      	uxtb	r6, r6
 8006326:	4283      	cmp	r3, r0
 8006328:	4637      	mov	r7, r6
 800632a:	dc05      	bgt.n	8006338 <__swbuf_r+0x4e>
 800632c:	4621      	mov	r1, r4
 800632e:	4628      	mov	r0, r5
 8006330:	f000 fd5e 	bl	8006df0 <_fflush_r>
 8006334:	2800      	cmp	r0, #0
 8006336:	d1ed      	bne.n	8006314 <__swbuf_r+0x2a>
 8006338:	68a3      	ldr	r3, [r4, #8]
 800633a:	3b01      	subs	r3, #1
 800633c:	60a3      	str	r3, [r4, #8]
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	1c5a      	adds	r2, r3, #1
 8006342:	6022      	str	r2, [r4, #0]
 8006344:	701e      	strb	r6, [r3, #0]
 8006346:	6962      	ldr	r2, [r4, #20]
 8006348:	1c43      	adds	r3, r0, #1
 800634a:	429a      	cmp	r2, r3
 800634c:	d004      	beq.n	8006358 <__swbuf_r+0x6e>
 800634e:	89a3      	ldrh	r3, [r4, #12]
 8006350:	07db      	lsls	r3, r3, #31
 8006352:	d5e1      	bpl.n	8006318 <__swbuf_r+0x2e>
 8006354:	2e0a      	cmp	r6, #10
 8006356:	d1df      	bne.n	8006318 <__swbuf_r+0x2e>
 8006358:	4621      	mov	r1, r4
 800635a:	4628      	mov	r0, r5
 800635c:	f000 fd48 	bl	8006df0 <_fflush_r>
 8006360:	2800      	cmp	r0, #0
 8006362:	d0d9      	beq.n	8006318 <__swbuf_r+0x2e>
 8006364:	e7d6      	b.n	8006314 <__swbuf_r+0x2a>
	...

08006368 <__swsetup_r>:
 8006368:	b538      	push	{r3, r4, r5, lr}
 800636a:	4b29      	ldr	r3, [pc, #164]	@ (8006410 <__swsetup_r+0xa8>)
 800636c:	4605      	mov	r5, r0
 800636e:	6818      	ldr	r0, [r3, #0]
 8006370:	460c      	mov	r4, r1
 8006372:	b118      	cbz	r0, 800637c <__swsetup_r+0x14>
 8006374:	6a03      	ldr	r3, [r0, #32]
 8006376:	b90b      	cbnz	r3, 800637c <__swsetup_r+0x14>
 8006378:	f7ff fe12 	bl	8005fa0 <__sinit>
 800637c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006380:	0719      	lsls	r1, r3, #28
 8006382:	d422      	bmi.n	80063ca <__swsetup_r+0x62>
 8006384:	06da      	lsls	r2, r3, #27
 8006386:	d407      	bmi.n	8006398 <__swsetup_r+0x30>
 8006388:	2209      	movs	r2, #9
 800638a:	602a      	str	r2, [r5, #0]
 800638c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006390:	81a3      	strh	r3, [r4, #12]
 8006392:	f04f 30ff 	mov.w	r0, #4294967295
 8006396:	e033      	b.n	8006400 <__swsetup_r+0x98>
 8006398:	0758      	lsls	r0, r3, #29
 800639a:	d512      	bpl.n	80063c2 <__swsetup_r+0x5a>
 800639c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800639e:	b141      	cbz	r1, 80063b2 <__swsetup_r+0x4a>
 80063a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80063a4:	4299      	cmp	r1, r3
 80063a6:	d002      	beq.n	80063ae <__swsetup_r+0x46>
 80063a8:	4628      	mov	r0, r5
 80063aa:	f000 f8cf 	bl	800654c <_free_r>
 80063ae:	2300      	movs	r3, #0
 80063b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80063b2:	89a3      	ldrh	r3, [r4, #12]
 80063b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80063b8:	81a3      	strh	r3, [r4, #12]
 80063ba:	2300      	movs	r3, #0
 80063bc:	6063      	str	r3, [r4, #4]
 80063be:	6923      	ldr	r3, [r4, #16]
 80063c0:	6023      	str	r3, [r4, #0]
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	f043 0308 	orr.w	r3, r3, #8
 80063c8:	81a3      	strh	r3, [r4, #12]
 80063ca:	6923      	ldr	r3, [r4, #16]
 80063cc:	b94b      	cbnz	r3, 80063e2 <__swsetup_r+0x7a>
 80063ce:	89a3      	ldrh	r3, [r4, #12]
 80063d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80063d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063d8:	d003      	beq.n	80063e2 <__swsetup_r+0x7a>
 80063da:	4621      	mov	r1, r4
 80063dc:	4628      	mov	r0, r5
 80063de:	f000 fd55 	bl	8006e8c <__smakebuf_r>
 80063e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063e6:	f013 0201 	ands.w	r2, r3, #1
 80063ea:	d00a      	beq.n	8006402 <__swsetup_r+0x9a>
 80063ec:	2200      	movs	r2, #0
 80063ee:	60a2      	str	r2, [r4, #8]
 80063f0:	6962      	ldr	r2, [r4, #20]
 80063f2:	4252      	negs	r2, r2
 80063f4:	61a2      	str	r2, [r4, #24]
 80063f6:	6922      	ldr	r2, [r4, #16]
 80063f8:	b942      	cbnz	r2, 800640c <__swsetup_r+0xa4>
 80063fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80063fe:	d1c5      	bne.n	800638c <__swsetup_r+0x24>
 8006400:	bd38      	pop	{r3, r4, r5, pc}
 8006402:	0799      	lsls	r1, r3, #30
 8006404:	bf58      	it	pl
 8006406:	6962      	ldrpl	r2, [r4, #20]
 8006408:	60a2      	str	r2, [r4, #8]
 800640a:	e7f4      	b.n	80063f6 <__swsetup_r+0x8e>
 800640c:	2000      	movs	r0, #0
 800640e:	e7f7      	b.n	8006400 <__swsetup_r+0x98>
 8006410:	200000c0 	.word	0x200000c0

08006414 <memset>:
 8006414:	4402      	add	r2, r0
 8006416:	4603      	mov	r3, r0
 8006418:	4293      	cmp	r3, r2
 800641a:	d100      	bne.n	800641e <memset+0xa>
 800641c:	4770      	bx	lr
 800641e:	f803 1b01 	strb.w	r1, [r3], #1
 8006422:	e7f9      	b.n	8006418 <memset+0x4>

08006424 <strncmp>:
 8006424:	b510      	push	{r4, lr}
 8006426:	b16a      	cbz	r2, 8006444 <strncmp+0x20>
 8006428:	3901      	subs	r1, #1
 800642a:	1884      	adds	r4, r0, r2
 800642c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006430:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006434:	429a      	cmp	r2, r3
 8006436:	d103      	bne.n	8006440 <strncmp+0x1c>
 8006438:	42a0      	cmp	r0, r4
 800643a:	d001      	beq.n	8006440 <strncmp+0x1c>
 800643c:	2a00      	cmp	r2, #0
 800643e:	d1f5      	bne.n	800642c <strncmp+0x8>
 8006440:	1ad0      	subs	r0, r2, r3
 8006442:	bd10      	pop	{r4, pc}
 8006444:	4610      	mov	r0, r2
 8006446:	e7fc      	b.n	8006442 <strncmp+0x1e>

08006448 <_close_r>:
 8006448:	b538      	push	{r3, r4, r5, lr}
 800644a:	4d06      	ldr	r5, [pc, #24]	@ (8006464 <_close_r+0x1c>)
 800644c:	2300      	movs	r3, #0
 800644e:	4604      	mov	r4, r0
 8006450:	4608      	mov	r0, r1
 8006452:	602b      	str	r3, [r5, #0]
 8006454:	f7fa fcde 	bl	8000e14 <_close>
 8006458:	1c43      	adds	r3, r0, #1
 800645a:	d102      	bne.n	8006462 <_close_r+0x1a>
 800645c:	682b      	ldr	r3, [r5, #0]
 800645e:	b103      	cbz	r3, 8006462 <_close_r+0x1a>
 8006460:	6023      	str	r3, [r4, #0]
 8006462:	bd38      	pop	{r3, r4, r5, pc}
 8006464:	20000600 	.word	0x20000600

08006468 <_lseek_r>:
 8006468:	b538      	push	{r3, r4, r5, lr}
 800646a:	4d07      	ldr	r5, [pc, #28]	@ (8006488 <_lseek_r+0x20>)
 800646c:	4604      	mov	r4, r0
 800646e:	4608      	mov	r0, r1
 8006470:	4611      	mov	r1, r2
 8006472:	2200      	movs	r2, #0
 8006474:	602a      	str	r2, [r5, #0]
 8006476:	461a      	mov	r2, r3
 8006478:	f7fa fcf3 	bl	8000e62 <_lseek>
 800647c:	1c43      	adds	r3, r0, #1
 800647e:	d102      	bne.n	8006486 <_lseek_r+0x1e>
 8006480:	682b      	ldr	r3, [r5, #0]
 8006482:	b103      	cbz	r3, 8006486 <_lseek_r+0x1e>
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	bd38      	pop	{r3, r4, r5, pc}
 8006488:	20000600 	.word	0x20000600

0800648c <_read_r>:
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	4d07      	ldr	r5, [pc, #28]	@ (80064ac <_read_r+0x20>)
 8006490:	4604      	mov	r4, r0
 8006492:	4608      	mov	r0, r1
 8006494:	4611      	mov	r1, r2
 8006496:	2200      	movs	r2, #0
 8006498:	602a      	str	r2, [r5, #0]
 800649a:	461a      	mov	r2, r3
 800649c:	f7fa fc81 	bl	8000da2 <_read>
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	d102      	bne.n	80064aa <_read_r+0x1e>
 80064a4:	682b      	ldr	r3, [r5, #0]
 80064a6:	b103      	cbz	r3, 80064aa <_read_r+0x1e>
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
 80064ac:	20000600 	.word	0x20000600

080064b0 <_write_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	4d07      	ldr	r5, [pc, #28]	@ (80064d0 <_write_r+0x20>)
 80064b4:	4604      	mov	r4, r0
 80064b6:	4608      	mov	r0, r1
 80064b8:	4611      	mov	r1, r2
 80064ba:	2200      	movs	r2, #0
 80064bc:	602a      	str	r2, [r5, #0]
 80064be:	461a      	mov	r2, r3
 80064c0:	f7fa fc8c 	bl	8000ddc <_write>
 80064c4:	1c43      	adds	r3, r0, #1
 80064c6:	d102      	bne.n	80064ce <_write_r+0x1e>
 80064c8:	682b      	ldr	r3, [r5, #0]
 80064ca:	b103      	cbz	r3, 80064ce <_write_r+0x1e>
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	bd38      	pop	{r3, r4, r5, pc}
 80064d0:	20000600 	.word	0x20000600

080064d4 <__errno>:
 80064d4:	4b01      	ldr	r3, [pc, #4]	@ (80064dc <__errno+0x8>)
 80064d6:	6818      	ldr	r0, [r3, #0]
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	200000c0 	.word	0x200000c0

080064e0 <__libc_init_array>:
 80064e0:	b570      	push	{r4, r5, r6, lr}
 80064e2:	4d0d      	ldr	r5, [pc, #52]	@ (8006518 <__libc_init_array+0x38>)
 80064e4:	4c0d      	ldr	r4, [pc, #52]	@ (800651c <__libc_init_array+0x3c>)
 80064e6:	1b64      	subs	r4, r4, r5
 80064e8:	10a4      	asrs	r4, r4, #2
 80064ea:	2600      	movs	r6, #0
 80064ec:	42a6      	cmp	r6, r4
 80064ee:	d109      	bne.n	8006504 <__libc_init_array+0x24>
 80064f0:	4d0b      	ldr	r5, [pc, #44]	@ (8006520 <__libc_init_array+0x40>)
 80064f2:	4c0c      	ldr	r4, [pc, #48]	@ (8006524 <__libc_init_array+0x44>)
 80064f4:	f000 fd38 	bl	8006f68 <_init>
 80064f8:	1b64      	subs	r4, r4, r5
 80064fa:	10a4      	asrs	r4, r4, #2
 80064fc:	2600      	movs	r6, #0
 80064fe:	42a6      	cmp	r6, r4
 8006500:	d105      	bne.n	800650e <__libc_init_array+0x2e>
 8006502:	bd70      	pop	{r4, r5, r6, pc}
 8006504:	f855 3b04 	ldr.w	r3, [r5], #4
 8006508:	4798      	blx	r3
 800650a:	3601      	adds	r6, #1
 800650c:	e7ee      	b.n	80064ec <__libc_init_array+0xc>
 800650e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006512:	4798      	blx	r3
 8006514:	3601      	adds	r6, #1
 8006516:	e7f2      	b.n	80064fe <__libc_init_array+0x1e>
 8006518:	080073a4 	.word	0x080073a4
 800651c:	080073a4 	.word	0x080073a4
 8006520:	080073a4 	.word	0x080073a4
 8006524:	080073a8 	.word	0x080073a8

08006528 <__retarget_lock_init_recursive>:
 8006528:	4770      	bx	lr

0800652a <__retarget_lock_acquire_recursive>:
 800652a:	4770      	bx	lr

0800652c <__retarget_lock_release_recursive>:
 800652c:	4770      	bx	lr

0800652e <memcpy>:
 800652e:	440a      	add	r2, r1
 8006530:	4291      	cmp	r1, r2
 8006532:	f100 33ff 	add.w	r3, r0, #4294967295
 8006536:	d100      	bne.n	800653a <memcpy+0xc>
 8006538:	4770      	bx	lr
 800653a:	b510      	push	{r4, lr}
 800653c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006540:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006544:	4291      	cmp	r1, r2
 8006546:	d1f9      	bne.n	800653c <memcpy+0xe>
 8006548:	bd10      	pop	{r4, pc}
	...

0800654c <_free_r>:
 800654c:	b538      	push	{r3, r4, r5, lr}
 800654e:	4605      	mov	r5, r0
 8006550:	2900      	cmp	r1, #0
 8006552:	d041      	beq.n	80065d8 <_free_r+0x8c>
 8006554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006558:	1f0c      	subs	r4, r1, #4
 800655a:	2b00      	cmp	r3, #0
 800655c:	bfb8      	it	lt
 800655e:	18e4      	addlt	r4, r4, r3
 8006560:	f000 f8e8 	bl	8006734 <__malloc_lock>
 8006564:	4a1d      	ldr	r2, [pc, #116]	@ (80065dc <_free_r+0x90>)
 8006566:	6813      	ldr	r3, [r2, #0]
 8006568:	b933      	cbnz	r3, 8006578 <_free_r+0x2c>
 800656a:	6063      	str	r3, [r4, #4]
 800656c:	6014      	str	r4, [r2, #0]
 800656e:	4628      	mov	r0, r5
 8006570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006574:	f000 b8e4 	b.w	8006740 <__malloc_unlock>
 8006578:	42a3      	cmp	r3, r4
 800657a:	d908      	bls.n	800658e <_free_r+0x42>
 800657c:	6820      	ldr	r0, [r4, #0]
 800657e:	1821      	adds	r1, r4, r0
 8006580:	428b      	cmp	r3, r1
 8006582:	bf01      	itttt	eq
 8006584:	6819      	ldreq	r1, [r3, #0]
 8006586:	685b      	ldreq	r3, [r3, #4]
 8006588:	1809      	addeq	r1, r1, r0
 800658a:	6021      	streq	r1, [r4, #0]
 800658c:	e7ed      	b.n	800656a <_free_r+0x1e>
 800658e:	461a      	mov	r2, r3
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	b10b      	cbz	r3, 8006598 <_free_r+0x4c>
 8006594:	42a3      	cmp	r3, r4
 8006596:	d9fa      	bls.n	800658e <_free_r+0x42>
 8006598:	6811      	ldr	r1, [r2, #0]
 800659a:	1850      	adds	r0, r2, r1
 800659c:	42a0      	cmp	r0, r4
 800659e:	d10b      	bne.n	80065b8 <_free_r+0x6c>
 80065a0:	6820      	ldr	r0, [r4, #0]
 80065a2:	4401      	add	r1, r0
 80065a4:	1850      	adds	r0, r2, r1
 80065a6:	4283      	cmp	r3, r0
 80065a8:	6011      	str	r1, [r2, #0]
 80065aa:	d1e0      	bne.n	800656e <_free_r+0x22>
 80065ac:	6818      	ldr	r0, [r3, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	6053      	str	r3, [r2, #4]
 80065b2:	4408      	add	r0, r1
 80065b4:	6010      	str	r0, [r2, #0]
 80065b6:	e7da      	b.n	800656e <_free_r+0x22>
 80065b8:	d902      	bls.n	80065c0 <_free_r+0x74>
 80065ba:	230c      	movs	r3, #12
 80065bc:	602b      	str	r3, [r5, #0]
 80065be:	e7d6      	b.n	800656e <_free_r+0x22>
 80065c0:	6820      	ldr	r0, [r4, #0]
 80065c2:	1821      	adds	r1, r4, r0
 80065c4:	428b      	cmp	r3, r1
 80065c6:	bf04      	itt	eq
 80065c8:	6819      	ldreq	r1, [r3, #0]
 80065ca:	685b      	ldreq	r3, [r3, #4]
 80065cc:	6063      	str	r3, [r4, #4]
 80065ce:	bf04      	itt	eq
 80065d0:	1809      	addeq	r1, r1, r0
 80065d2:	6021      	streq	r1, [r4, #0]
 80065d4:	6054      	str	r4, [r2, #4]
 80065d6:	e7ca      	b.n	800656e <_free_r+0x22>
 80065d8:	bd38      	pop	{r3, r4, r5, pc}
 80065da:	bf00      	nop
 80065dc:	2000060c 	.word	0x2000060c

080065e0 <malloc>:
 80065e0:	4b02      	ldr	r3, [pc, #8]	@ (80065ec <malloc+0xc>)
 80065e2:	4601      	mov	r1, r0
 80065e4:	6818      	ldr	r0, [r3, #0]
 80065e6:	f000 b825 	b.w	8006634 <_malloc_r>
 80065ea:	bf00      	nop
 80065ec:	200000c0 	.word	0x200000c0

080065f0 <sbrk_aligned>:
 80065f0:	b570      	push	{r4, r5, r6, lr}
 80065f2:	4e0f      	ldr	r6, [pc, #60]	@ (8006630 <sbrk_aligned+0x40>)
 80065f4:	460c      	mov	r4, r1
 80065f6:	6831      	ldr	r1, [r6, #0]
 80065f8:	4605      	mov	r5, r0
 80065fa:	b911      	cbnz	r1, 8006602 <sbrk_aligned+0x12>
 80065fc:	f000 fca4 	bl	8006f48 <_sbrk_r>
 8006600:	6030      	str	r0, [r6, #0]
 8006602:	4621      	mov	r1, r4
 8006604:	4628      	mov	r0, r5
 8006606:	f000 fc9f 	bl	8006f48 <_sbrk_r>
 800660a:	1c43      	adds	r3, r0, #1
 800660c:	d103      	bne.n	8006616 <sbrk_aligned+0x26>
 800660e:	f04f 34ff 	mov.w	r4, #4294967295
 8006612:	4620      	mov	r0, r4
 8006614:	bd70      	pop	{r4, r5, r6, pc}
 8006616:	1cc4      	adds	r4, r0, #3
 8006618:	f024 0403 	bic.w	r4, r4, #3
 800661c:	42a0      	cmp	r0, r4
 800661e:	d0f8      	beq.n	8006612 <sbrk_aligned+0x22>
 8006620:	1a21      	subs	r1, r4, r0
 8006622:	4628      	mov	r0, r5
 8006624:	f000 fc90 	bl	8006f48 <_sbrk_r>
 8006628:	3001      	adds	r0, #1
 800662a:	d1f2      	bne.n	8006612 <sbrk_aligned+0x22>
 800662c:	e7ef      	b.n	800660e <sbrk_aligned+0x1e>
 800662e:	bf00      	nop
 8006630:	20000608 	.word	0x20000608

08006634 <_malloc_r>:
 8006634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006638:	1ccd      	adds	r5, r1, #3
 800663a:	f025 0503 	bic.w	r5, r5, #3
 800663e:	3508      	adds	r5, #8
 8006640:	2d0c      	cmp	r5, #12
 8006642:	bf38      	it	cc
 8006644:	250c      	movcc	r5, #12
 8006646:	2d00      	cmp	r5, #0
 8006648:	4606      	mov	r6, r0
 800664a:	db01      	blt.n	8006650 <_malloc_r+0x1c>
 800664c:	42a9      	cmp	r1, r5
 800664e:	d904      	bls.n	800665a <_malloc_r+0x26>
 8006650:	230c      	movs	r3, #12
 8006652:	6033      	str	r3, [r6, #0]
 8006654:	2000      	movs	r0, #0
 8006656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800665a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006730 <_malloc_r+0xfc>
 800665e:	f000 f869 	bl	8006734 <__malloc_lock>
 8006662:	f8d8 3000 	ldr.w	r3, [r8]
 8006666:	461c      	mov	r4, r3
 8006668:	bb44      	cbnz	r4, 80066bc <_malloc_r+0x88>
 800666a:	4629      	mov	r1, r5
 800666c:	4630      	mov	r0, r6
 800666e:	f7ff ffbf 	bl	80065f0 <sbrk_aligned>
 8006672:	1c43      	adds	r3, r0, #1
 8006674:	4604      	mov	r4, r0
 8006676:	d158      	bne.n	800672a <_malloc_r+0xf6>
 8006678:	f8d8 4000 	ldr.w	r4, [r8]
 800667c:	4627      	mov	r7, r4
 800667e:	2f00      	cmp	r7, #0
 8006680:	d143      	bne.n	800670a <_malloc_r+0xd6>
 8006682:	2c00      	cmp	r4, #0
 8006684:	d04b      	beq.n	800671e <_malloc_r+0xea>
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	4639      	mov	r1, r7
 800668a:	4630      	mov	r0, r6
 800668c:	eb04 0903 	add.w	r9, r4, r3
 8006690:	f000 fc5a 	bl	8006f48 <_sbrk_r>
 8006694:	4581      	cmp	r9, r0
 8006696:	d142      	bne.n	800671e <_malloc_r+0xea>
 8006698:	6821      	ldr	r1, [r4, #0]
 800669a:	1a6d      	subs	r5, r5, r1
 800669c:	4629      	mov	r1, r5
 800669e:	4630      	mov	r0, r6
 80066a0:	f7ff ffa6 	bl	80065f0 <sbrk_aligned>
 80066a4:	3001      	adds	r0, #1
 80066a6:	d03a      	beq.n	800671e <_malloc_r+0xea>
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	442b      	add	r3, r5
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	f8d8 3000 	ldr.w	r3, [r8]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	bb62      	cbnz	r2, 8006710 <_malloc_r+0xdc>
 80066b6:	f8c8 7000 	str.w	r7, [r8]
 80066ba:	e00f      	b.n	80066dc <_malloc_r+0xa8>
 80066bc:	6822      	ldr	r2, [r4, #0]
 80066be:	1b52      	subs	r2, r2, r5
 80066c0:	d420      	bmi.n	8006704 <_malloc_r+0xd0>
 80066c2:	2a0b      	cmp	r2, #11
 80066c4:	d917      	bls.n	80066f6 <_malloc_r+0xc2>
 80066c6:	1961      	adds	r1, r4, r5
 80066c8:	42a3      	cmp	r3, r4
 80066ca:	6025      	str	r5, [r4, #0]
 80066cc:	bf18      	it	ne
 80066ce:	6059      	strne	r1, [r3, #4]
 80066d0:	6863      	ldr	r3, [r4, #4]
 80066d2:	bf08      	it	eq
 80066d4:	f8c8 1000 	streq.w	r1, [r8]
 80066d8:	5162      	str	r2, [r4, r5]
 80066da:	604b      	str	r3, [r1, #4]
 80066dc:	4630      	mov	r0, r6
 80066de:	f000 f82f 	bl	8006740 <__malloc_unlock>
 80066e2:	f104 000b 	add.w	r0, r4, #11
 80066e6:	1d23      	adds	r3, r4, #4
 80066e8:	f020 0007 	bic.w	r0, r0, #7
 80066ec:	1ac2      	subs	r2, r0, r3
 80066ee:	bf1c      	itt	ne
 80066f0:	1a1b      	subne	r3, r3, r0
 80066f2:	50a3      	strne	r3, [r4, r2]
 80066f4:	e7af      	b.n	8006656 <_malloc_r+0x22>
 80066f6:	6862      	ldr	r2, [r4, #4]
 80066f8:	42a3      	cmp	r3, r4
 80066fa:	bf0c      	ite	eq
 80066fc:	f8c8 2000 	streq.w	r2, [r8]
 8006700:	605a      	strne	r2, [r3, #4]
 8006702:	e7eb      	b.n	80066dc <_malloc_r+0xa8>
 8006704:	4623      	mov	r3, r4
 8006706:	6864      	ldr	r4, [r4, #4]
 8006708:	e7ae      	b.n	8006668 <_malloc_r+0x34>
 800670a:	463c      	mov	r4, r7
 800670c:	687f      	ldr	r7, [r7, #4]
 800670e:	e7b6      	b.n	800667e <_malloc_r+0x4a>
 8006710:	461a      	mov	r2, r3
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	42a3      	cmp	r3, r4
 8006716:	d1fb      	bne.n	8006710 <_malloc_r+0xdc>
 8006718:	2300      	movs	r3, #0
 800671a:	6053      	str	r3, [r2, #4]
 800671c:	e7de      	b.n	80066dc <_malloc_r+0xa8>
 800671e:	230c      	movs	r3, #12
 8006720:	6033      	str	r3, [r6, #0]
 8006722:	4630      	mov	r0, r6
 8006724:	f000 f80c 	bl	8006740 <__malloc_unlock>
 8006728:	e794      	b.n	8006654 <_malloc_r+0x20>
 800672a:	6005      	str	r5, [r0, #0]
 800672c:	e7d6      	b.n	80066dc <_malloc_r+0xa8>
 800672e:	bf00      	nop
 8006730:	2000060c 	.word	0x2000060c

08006734 <__malloc_lock>:
 8006734:	4801      	ldr	r0, [pc, #4]	@ (800673c <__malloc_lock+0x8>)
 8006736:	f7ff bef8 	b.w	800652a <__retarget_lock_acquire_recursive>
 800673a:	bf00      	nop
 800673c:	20000604 	.word	0x20000604

08006740 <__malloc_unlock>:
 8006740:	4801      	ldr	r0, [pc, #4]	@ (8006748 <__malloc_unlock+0x8>)
 8006742:	f7ff bef3 	b.w	800652c <__retarget_lock_release_recursive>
 8006746:	bf00      	nop
 8006748:	20000604 	.word	0x20000604

0800674c <__sfputc_r>:
 800674c:	6893      	ldr	r3, [r2, #8]
 800674e:	3b01      	subs	r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	b410      	push	{r4}
 8006754:	6093      	str	r3, [r2, #8]
 8006756:	da08      	bge.n	800676a <__sfputc_r+0x1e>
 8006758:	6994      	ldr	r4, [r2, #24]
 800675a:	42a3      	cmp	r3, r4
 800675c:	db01      	blt.n	8006762 <__sfputc_r+0x16>
 800675e:	290a      	cmp	r1, #10
 8006760:	d103      	bne.n	800676a <__sfputc_r+0x1e>
 8006762:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006766:	f7ff bdc0 	b.w	80062ea <__swbuf_r>
 800676a:	6813      	ldr	r3, [r2, #0]
 800676c:	1c58      	adds	r0, r3, #1
 800676e:	6010      	str	r0, [r2, #0]
 8006770:	7019      	strb	r1, [r3, #0]
 8006772:	4608      	mov	r0, r1
 8006774:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006778:	4770      	bx	lr

0800677a <__sfputs_r>:
 800677a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677c:	4606      	mov	r6, r0
 800677e:	460f      	mov	r7, r1
 8006780:	4614      	mov	r4, r2
 8006782:	18d5      	adds	r5, r2, r3
 8006784:	42ac      	cmp	r4, r5
 8006786:	d101      	bne.n	800678c <__sfputs_r+0x12>
 8006788:	2000      	movs	r0, #0
 800678a:	e007      	b.n	800679c <__sfputs_r+0x22>
 800678c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006790:	463a      	mov	r2, r7
 8006792:	4630      	mov	r0, r6
 8006794:	f7ff ffda 	bl	800674c <__sfputc_r>
 8006798:	1c43      	adds	r3, r0, #1
 800679a:	d1f3      	bne.n	8006784 <__sfputs_r+0xa>
 800679c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080067a0 <_vfiprintf_r>:
 80067a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a4:	460d      	mov	r5, r1
 80067a6:	b09d      	sub	sp, #116	@ 0x74
 80067a8:	4614      	mov	r4, r2
 80067aa:	4698      	mov	r8, r3
 80067ac:	4606      	mov	r6, r0
 80067ae:	b118      	cbz	r0, 80067b8 <_vfiprintf_r+0x18>
 80067b0:	6a03      	ldr	r3, [r0, #32]
 80067b2:	b90b      	cbnz	r3, 80067b8 <_vfiprintf_r+0x18>
 80067b4:	f7ff fbf4 	bl	8005fa0 <__sinit>
 80067b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067ba:	07d9      	lsls	r1, r3, #31
 80067bc:	d405      	bmi.n	80067ca <_vfiprintf_r+0x2a>
 80067be:	89ab      	ldrh	r3, [r5, #12]
 80067c0:	059a      	lsls	r2, r3, #22
 80067c2:	d402      	bmi.n	80067ca <_vfiprintf_r+0x2a>
 80067c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067c6:	f7ff feb0 	bl	800652a <__retarget_lock_acquire_recursive>
 80067ca:	89ab      	ldrh	r3, [r5, #12]
 80067cc:	071b      	lsls	r3, r3, #28
 80067ce:	d501      	bpl.n	80067d4 <_vfiprintf_r+0x34>
 80067d0:	692b      	ldr	r3, [r5, #16]
 80067d2:	b99b      	cbnz	r3, 80067fc <_vfiprintf_r+0x5c>
 80067d4:	4629      	mov	r1, r5
 80067d6:	4630      	mov	r0, r6
 80067d8:	f7ff fdc6 	bl	8006368 <__swsetup_r>
 80067dc:	b170      	cbz	r0, 80067fc <_vfiprintf_r+0x5c>
 80067de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067e0:	07dc      	lsls	r4, r3, #31
 80067e2:	d504      	bpl.n	80067ee <_vfiprintf_r+0x4e>
 80067e4:	f04f 30ff 	mov.w	r0, #4294967295
 80067e8:	b01d      	add	sp, #116	@ 0x74
 80067ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ee:	89ab      	ldrh	r3, [r5, #12]
 80067f0:	0598      	lsls	r0, r3, #22
 80067f2:	d4f7      	bmi.n	80067e4 <_vfiprintf_r+0x44>
 80067f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067f6:	f7ff fe99 	bl	800652c <__retarget_lock_release_recursive>
 80067fa:	e7f3      	b.n	80067e4 <_vfiprintf_r+0x44>
 80067fc:	2300      	movs	r3, #0
 80067fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006800:	2320      	movs	r3, #32
 8006802:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006806:	f8cd 800c 	str.w	r8, [sp, #12]
 800680a:	2330      	movs	r3, #48	@ 0x30
 800680c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80069bc <_vfiprintf_r+0x21c>
 8006810:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006814:	f04f 0901 	mov.w	r9, #1
 8006818:	4623      	mov	r3, r4
 800681a:	469a      	mov	sl, r3
 800681c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006820:	b10a      	cbz	r2, 8006826 <_vfiprintf_r+0x86>
 8006822:	2a25      	cmp	r2, #37	@ 0x25
 8006824:	d1f9      	bne.n	800681a <_vfiprintf_r+0x7a>
 8006826:	ebba 0b04 	subs.w	fp, sl, r4
 800682a:	d00b      	beq.n	8006844 <_vfiprintf_r+0xa4>
 800682c:	465b      	mov	r3, fp
 800682e:	4622      	mov	r2, r4
 8006830:	4629      	mov	r1, r5
 8006832:	4630      	mov	r0, r6
 8006834:	f7ff ffa1 	bl	800677a <__sfputs_r>
 8006838:	3001      	adds	r0, #1
 800683a:	f000 80a7 	beq.w	800698c <_vfiprintf_r+0x1ec>
 800683e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006840:	445a      	add	r2, fp
 8006842:	9209      	str	r2, [sp, #36]	@ 0x24
 8006844:	f89a 3000 	ldrb.w	r3, [sl]
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 809f 	beq.w	800698c <_vfiprintf_r+0x1ec>
 800684e:	2300      	movs	r3, #0
 8006850:	f04f 32ff 	mov.w	r2, #4294967295
 8006854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006858:	f10a 0a01 	add.w	sl, sl, #1
 800685c:	9304      	str	r3, [sp, #16]
 800685e:	9307      	str	r3, [sp, #28]
 8006860:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006864:	931a      	str	r3, [sp, #104]	@ 0x68
 8006866:	4654      	mov	r4, sl
 8006868:	2205      	movs	r2, #5
 800686a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800686e:	4853      	ldr	r0, [pc, #332]	@ (80069bc <_vfiprintf_r+0x21c>)
 8006870:	f7f9 fcd6 	bl	8000220 <memchr>
 8006874:	9a04      	ldr	r2, [sp, #16]
 8006876:	b9d8      	cbnz	r0, 80068b0 <_vfiprintf_r+0x110>
 8006878:	06d1      	lsls	r1, r2, #27
 800687a:	bf44      	itt	mi
 800687c:	2320      	movmi	r3, #32
 800687e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006882:	0713      	lsls	r3, r2, #28
 8006884:	bf44      	itt	mi
 8006886:	232b      	movmi	r3, #43	@ 0x2b
 8006888:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800688c:	f89a 3000 	ldrb.w	r3, [sl]
 8006890:	2b2a      	cmp	r3, #42	@ 0x2a
 8006892:	d015      	beq.n	80068c0 <_vfiprintf_r+0x120>
 8006894:	9a07      	ldr	r2, [sp, #28]
 8006896:	4654      	mov	r4, sl
 8006898:	2000      	movs	r0, #0
 800689a:	f04f 0c0a 	mov.w	ip, #10
 800689e:	4621      	mov	r1, r4
 80068a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068a4:	3b30      	subs	r3, #48	@ 0x30
 80068a6:	2b09      	cmp	r3, #9
 80068a8:	d94b      	bls.n	8006942 <_vfiprintf_r+0x1a2>
 80068aa:	b1b0      	cbz	r0, 80068da <_vfiprintf_r+0x13a>
 80068ac:	9207      	str	r2, [sp, #28]
 80068ae:	e014      	b.n	80068da <_vfiprintf_r+0x13a>
 80068b0:	eba0 0308 	sub.w	r3, r0, r8
 80068b4:	fa09 f303 	lsl.w	r3, r9, r3
 80068b8:	4313      	orrs	r3, r2
 80068ba:	9304      	str	r3, [sp, #16]
 80068bc:	46a2      	mov	sl, r4
 80068be:	e7d2      	b.n	8006866 <_vfiprintf_r+0xc6>
 80068c0:	9b03      	ldr	r3, [sp, #12]
 80068c2:	1d19      	adds	r1, r3, #4
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	9103      	str	r1, [sp, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	bfbb      	ittet	lt
 80068cc:	425b      	neglt	r3, r3
 80068ce:	f042 0202 	orrlt.w	r2, r2, #2
 80068d2:	9307      	strge	r3, [sp, #28]
 80068d4:	9307      	strlt	r3, [sp, #28]
 80068d6:	bfb8      	it	lt
 80068d8:	9204      	strlt	r2, [sp, #16]
 80068da:	7823      	ldrb	r3, [r4, #0]
 80068dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80068de:	d10a      	bne.n	80068f6 <_vfiprintf_r+0x156>
 80068e0:	7863      	ldrb	r3, [r4, #1]
 80068e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80068e4:	d132      	bne.n	800694c <_vfiprintf_r+0x1ac>
 80068e6:	9b03      	ldr	r3, [sp, #12]
 80068e8:	1d1a      	adds	r2, r3, #4
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	9203      	str	r2, [sp, #12]
 80068ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80068f2:	3402      	adds	r4, #2
 80068f4:	9305      	str	r3, [sp, #20]
 80068f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80069cc <_vfiprintf_r+0x22c>
 80068fa:	7821      	ldrb	r1, [r4, #0]
 80068fc:	2203      	movs	r2, #3
 80068fe:	4650      	mov	r0, sl
 8006900:	f7f9 fc8e 	bl	8000220 <memchr>
 8006904:	b138      	cbz	r0, 8006916 <_vfiprintf_r+0x176>
 8006906:	9b04      	ldr	r3, [sp, #16]
 8006908:	eba0 000a 	sub.w	r0, r0, sl
 800690c:	2240      	movs	r2, #64	@ 0x40
 800690e:	4082      	lsls	r2, r0
 8006910:	4313      	orrs	r3, r2
 8006912:	3401      	adds	r4, #1
 8006914:	9304      	str	r3, [sp, #16]
 8006916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800691a:	4829      	ldr	r0, [pc, #164]	@ (80069c0 <_vfiprintf_r+0x220>)
 800691c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006920:	2206      	movs	r2, #6
 8006922:	f7f9 fc7d 	bl	8000220 <memchr>
 8006926:	2800      	cmp	r0, #0
 8006928:	d03f      	beq.n	80069aa <_vfiprintf_r+0x20a>
 800692a:	4b26      	ldr	r3, [pc, #152]	@ (80069c4 <_vfiprintf_r+0x224>)
 800692c:	bb1b      	cbnz	r3, 8006976 <_vfiprintf_r+0x1d6>
 800692e:	9b03      	ldr	r3, [sp, #12]
 8006930:	3307      	adds	r3, #7
 8006932:	f023 0307 	bic.w	r3, r3, #7
 8006936:	3308      	adds	r3, #8
 8006938:	9303      	str	r3, [sp, #12]
 800693a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800693c:	443b      	add	r3, r7
 800693e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006940:	e76a      	b.n	8006818 <_vfiprintf_r+0x78>
 8006942:	fb0c 3202 	mla	r2, ip, r2, r3
 8006946:	460c      	mov	r4, r1
 8006948:	2001      	movs	r0, #1
 800694a:	e7a8      	b.n	800689e <_vfiprintf_r+0xfe>
 800694c:	2300      	movs	r3, #0
 800694e:	3401      	adds	r4, #1
 8006950:	9305      	str	r3, [sp, #20]
 8006952:	4619      	mov	r1, r3
 8006954:	f04f 0c0a 	mov.w	ip, #10
 8006958:	4620      	mov	r0, r4
 800695a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800695e:	3a30      	subs	r2, #48	@ 0x30
 8006960:	2a09      	cmp	r2, #9
 8006962:	d903      	bls.n	800696c <_vfiprintf_r+0x1cc>
 8006964:	2b00      	cmp	r3, #0
 8006966:	d0c6      	beq.n	80068f6 <_vfiprintf_r+0x156>
 8006968:	9105      	str	r1, [sp, #20]
 800696a:	e7c4      	b.n	80068f6 <_vfiprintf_r+0x156>
 800696c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006970:	4604      	mov	r4, r0
 8006972:	2301      	movs	r3, #1
 8006974:	e7f0      	b.n	8006958 <_vfiprintf_r+0x1b8>
 8006976:	ab03      	add	r3, sp, #12
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	462a      	mov	r2, r5
 800697c:	4b12      	ldr	r3, [pc, #72]	@ (80069c8 <_vfiprintf_r+0x228>)
 800697e:	a904      	add	r1, sp, #16
 8006980:	4630      	mov	r0, r6
 8006982:	f3af 8000 	nop.w
 8006986:	4607      	mov	r7, r0
 8006988:	1c78      	adds	r0, r7, #1
 800698a:	d1d6      	bne.n	800693a <_vfiprintf_r+0x19a>
 800698c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800698e:	07d9      	lsls	r1, r3, #31
 8006990:	d405      	bmi.n	800699e <_vfiprintf_r+0x1fe>
 8006992:	89ab      	ldrh	r3, [r5, #12]
 8006994:	059a      	lsls	r2, r3, #22
 8006996:	d402      	bmi.n	800699e <_vfiprintf_r+0x1fe>
 8006998:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800699a:	f7ff fdc7 	bl	800652c <__retarget_lock_release_recursive>
 800699e:	89ab      	ldrh	r3, [r5, #12]
 80069a0:	065b      	lsls	r3, r3, #25
 80069a2:	f53f af1f 	bmi.w	80067e4 <_vfiprintf_r+0x44>
 80069a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069a8:	e71e      	b.n	80067e8 <_vfiprintf_r+0x48>
 80069aa:	ab03      	add	r3, sp, #12
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	462a      	mov	r2, r5
 80069b0:	4b05      	ldr	r3, [pc, #20]	@ (80069c8 <_vfiprintf_r+0x228>)
 80069b2:	a904      	add	r1, sp, #16
 80069b4:	4630      	mov	r0, r6
 80069b6:	f000 f879 	bl	8006aac <_printf_i>
 80069ba:	e7e4      	b.n	8006986 <_vfiprintf_r+0x1e6>
 80069bc:	08007368 	.word	0x08007368
 80069c0:	08007372 	.word	0x08007372
 80069c4:	00000000 	.word	0x00000000
 80069c8:	0800677b 	.word	0x0800677b
 80069cc:	0800736e 	.word	0x0800736e

080069d0 <_printf_common>:
 80069d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069d4:	4616      	mov	r6, r2
 80069d6:	4698      	mov	r8, r3
 80069d8:	688a      	ldr	r2, [r1, #8]
 80069da:	690b      	ldr	r3, [r1, #16]
 80069dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069e0:	4293      	cmp	r3, r2
 80069e2:	bfb8      	it	lt
 80069e4:	4613      	movlt	r3, r2
 80069e6:	6033      	str	r3, [r6, #0]
 80069e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80069ec:	4607      	mov	r7, r0
 80069ee:	460c      	mov	r4, r1
 80069f0:	b10a      	cbz	r2, 80069f6 <_printf_common+0x26>
 80069f2:	3301      	adds	r3, #1
 80069f4:	6033      	str	r3, [r6, #0]
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	0699      	lsls	r1, r3, #26
 80069fa:	bf42      	ittt	mi
 80069fc:	6833      	ldrmi	r3, [r6, #0]
 80069fe:	3302      	addmi	r3, #2
 8006a00:	6033      	strmi	r3, [r6, #0]
 8006a02:	6825      	ldr	r5, [r4, #0]
 8006a04:	f015 0506 	ands.w	r5, r5, #6
 8006a08:	d106      	bne.n	8006a18 <_printf_common+0x48>
 8006a0a:	f104 0a19 	add.w	sl, r4, #25
 8006a0e:	68e3      	ldr	r3, [r4, #12]
 8006a10:	6832      	ldr	r2, [r6, #0]
 8006a12:	1a9b      	subs	r3, r3, r2
 8006a14:	42ab      	cmp	r3, r5
 8006a16:	dc26      	bgt.n	8006a66 <_printf_common+0x96>
 8006a18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a1c:	6822      	ldr	r2, [r4, #0]
 8006a1e:	3b00      	subs	r3, #0
 8006a20:	bf18      	it	ne
 8006a22:	2301      	movne	r3, #1
 8006a24:	0692      	lsls	r2, r2, #26
 8006a26:	d42b      	bmi.n	8006a80 <_printf_common+0xb0>
 8006a28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a2c:	4641      	mov	r1, r8
 8006a2e:	4638      	mov	r0, r7
 8006a30:	47c8      	blx	r9
 8006a32:	3001      	adds	r0, #1
 8006a34:	d01e      	beq.n	8006a74 <_printf_common+0xa4>
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	6922      	ldr	r2, [r4, #16]
 8006a3a:	f003 0306 	and.w	r3, r3, #6
 8006a3e:	2b04      	cmp	r3, #4
 8006a40:	bf02      	ittt	eq
 8006a42:	68e5      	ldreq	r5, [r4, #12]
 8006a44:	6833      	ldreq	r3, [r6, #0]
 8006a46:	1aed      	subeq	r5, r5, r3
 8006a48:	68a3      	ldr	r3, [r4, #8]
 8006a4a:	bf0c      	ite	eq
 8006a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a50:	2500      	movne	r5, #0
 8006a52:	4293      	cmp	r3, r2
 8006a54:	bfc4      	itt	gt
 8006a56:	1a9b      	subgt	r3, r3, r2
 8006a58:	18ed      	addgt	r5, r5, r3
 8006a5a:	2600      	movs	r6, #0
 8006a5c:	341a      	adds	r4, #26
 8006a5e:	42b5      	cmp	r5, r6
 8006a60:	d11a      	bne.n	8006a98 <_printf_common+0xc8>
 8006a62:	2000      	movs	r0, #0
 8006a64:	e008      	b.n	8006a78 <_printf_common+0xa8>
 8006a66:	2301      	movs	r3, #1
 8006a68:	4652      	mov	r2, sl
 8006a6a:	4641      	mov	r1, r8
 8006a6c:	4638      	mov	r0, r7
 8006a6e:	47c8      	blx	r9
 8006a70:	3001      	adds	r0, #1
 8006a72:	d103      	bne.n	8006a7c <_printf_common+0xac>
 8006a74:	f04f 30ff 	mov.w	r0, #4294967295
 8006a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a7c:	3501      	adds	r5, #1
 8006a7e:	e7c6      	b.n	8006a0e <_printf_common+0x3e>
 8006a80:	18e1      	adds	r1, r4, r3
 8006a82:	1c5a      	adds	r2, r3, #1
 8006a84:	2030      	movs	r0, #48	@ 0x30
 8006a86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a8a:	4422      	add	r2, r4
 8006a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a94:	3302      	adds	r3, #2
 8006a96:	e7c7      	b.n	8006a28 <_printf_common+0x58>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	4622      	mov	r2, r4
 8006a9c:	4641      	mov	r1, r8
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	47c8      	blx	r9
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d0e6      	beq.n	8006a74 <_printf_common+0xa4>
 8006aa6:	3601      	adds	r6, #1
 8006aa8:	e7d9      	b.n	8006a5e <_printf_common+0x8e>
	...

08006aac <_printf_i>:
 8006aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab0:	7e0f      	ldrb	r7, [r1, #24]
 8006ab2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ab4:	2f78      	cmp	r7, #120	@ 0x78
 8006ab6:	4691      	mov	r9, r2
 8006ab8:	4680      	mov	r8, r0
 8006aba:	460c      	mov	r4, r1
 8006abc:	469a      	mov	sl, r3
 8006abe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ac2:	d807      	bhi.n	8006ad4 <_printf_i+0x28>
 8006ac4:	2f62      	cmp	r7, #98	@ 0x62
 8006ac6:	d80a      	bhi.n	8006ade <_printf_i+0x32>
 8006ac8:	2f00      	cmp	r7, #0
 8006aca:	f000 80d1 	beq.w	8006c70 <_printf_i+0x1c4>
 8006ace:	2f58      	cmp	r7, #88	@ 0x58
 8006ad0:	f000 80b8 	beq.w	8006c44 <_printf_i+0x198>
 8006ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ad8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006adc:	e03a      	b.n	8006b54 <_printf_i+0xa8>
 8006ade:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006ae2:	2b15      	cmp	r3, #21
 8006ae4:	d8f6      	bhi.n	8006ad4 <_printf_i+0x28>
 8006ae6:	a101      	add	r1, pc, #4	@ (adr r1, 8006aec <_printf_i+0x40>)
 8006ae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006aec:	08006b45 	.word	0x08006b45
 8006af0:	08006b59 	.word	0x08006b59
 8006af4:	08006ad5 	.word	0x08006ad5
 8006af8:	08006ad5 	.word	0x08006ad5
 8006afc:	08006ad5 	.word	0x08006ad5
 8006b00:	08006ad5 	.word	0x08006ad5
 8006b04:	08006b59 	.word	0x08006b59
 8006b08:	08006ad5 	.word	0x08006ad5
 8006b0c:	08006ad5 	.word	0x08006ad5
 8006b10:	08006ad5 	.word	0x08006ad5
 8006b14:	08006ad5 	.word	0x08006ad5
 8006b18:	08006c57 	.word	0x08006c57
 8006b1c:	08006b83 	.word	0x08006b83
 8006b20:	08006c11 	.word	0x08006c11
 8006b24:	08006ad5 	.word	0x08006ad5
 8006b28:	08006ad5 	.word	0x08006ad5
 8006b2c:	08006c79 	.word	0x08006c79
 8006b30:	08006ad5 	.word	0x08006ad5
 8006b34:	08006b83 	.word	0x08006b83
 8006b38:	08006ad5 	.word	0x08006ad5
 8006b3c:	08006ad5 	.word	0x08006ad5
 8006b40:	08006c19 	.word	0x08006c19
 8006b44:	6833      	ldr	r3, [r6, #0]
 8006b46:	1d1a      	adds	r2, r3, #4
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6032      	str	r2, [r6, #0]
 8006b4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b54:	2301      	movs	r3, #1
 8006b56:	e09c      	b.n	8006c92 <_printf_i+0x1e6>
 8006b58:	6833      	ldr	r3, [r6, #0]
 8006b5a:	6820      	ldr	r0, [r4, #0]
 8006b5c:	1d19      	adds	r1, r3, #4
 8006b5e:	6031      	str	r1, [r6, #0]
 8006b60:	0606      	lsls	r6, r0, #24
 8006b62:	d501      	bpl.n	8006b68 <_printf_i+0xbc>
 8006b64:	681d      	ldr	r5, [r3, #0]
 8006b66:	e003      	b.n	8006b70 <_printf_i+0xc4>
 8006b68:	0645      	lsls	r5, r0, #25
 8006b6a:	d5fb      	bpl.n	8006b64 <_printf_i+0xb8>
 8006b6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b70:	2d00      	cmp	r5, #0
 8006b72:	da03      	bge.n	8006b7c <_printf_i+0xd0>
 8006b74:	232d      	movs	r3, #45	@ 0x2d
 8006b76:	426d      	negs	r5, r5
 8006b78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b7c:	4858      	ldr	r0, [pc, #352]	@ (8006ce0 <_printf_i+0x234>)
 8006b7e:	230a      	movs	r3, #10
 8006b80:	e011      	b.n	8006ba6 <_printf_i+0xfa>
 8006b82:	6821      	ldr	r1, [r4, #0]
 8006b84:	6833      	ldr	r3, [r6, #0]
 8006b86:	0608      	lsls	r0, r1, #24
 8006b88:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b8c:	d402      	bmi.n	8006b94 <_printf_i+0xe8>
 8006b8e:	0649      	lsls	r1, r1, #25
 8006b90:	bf48      	it	mi
 8006b92:	b2ad      	uxthmi	r5, r5
 8006b94:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b96:	4852      	ldr	r0, [pc, #328]	@ (8006ce0 <_printf_i+0x234>)
 8006b98:	6033      	str	r3, [r6, #0]
 8006b9a:	bf14      	ite	ne
 8006b9c:	230a      	movne	r3, #10
 8006b9e:	2308      	moveq	r3, #8
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ba6:	6866      	ldr	r6, [r4, #4]
 8006ba8:	60a6      	str	r6, [r4, #8]
 8006baa:	2e00      	cmp	r6, #0
 8006bac:	db05      	blt.n	8006bba <_printf_i+0x10e>
 8006bae:	6821      	ldr	r1, [r4, #0]
 8006bb0:	432e      	orrs	r6, r5
 8006bb2:	f021 0104 	bic.w	r1, r1, #4
 8006bb6:	6021      	str	r1, [r4, #0]
 8006bb8:	d04b      	beq.n	8006c52 <_printf_i+0x1a6>
 8006bba:	4616      	mov	r6, r2
 8006bbc:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bc0:	fb03 5711 	mls	r7, r3, r1, r5
 8006bc4:	5dc7      	ldrb	r7, [r0, r7]
 8006bc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bca:	462f      	mov	r7, r5
 8006bcc:	42bb      	cmp	r3, r7
 8006bce:	460d      	mov	r5, r1
 8006bd0:	d9f4      	bls.n	8006bbc <_printf_i+0x110>
 8006bd2:	2b08      	cmp	r3, #8
 8006bd4:	d10b      	bne.n	8006bee <_printf_i+0x142>
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	07df      	lsls	r7, r3, #31
 8006bda:	d508      	bpl.n	8006bee <_printf_i+0x142>
 8006bdc:	6923      	ldr	r3, [r4, #16]
 8006bde:	6861      	ldr	r1, [r4, #4]
 8006be0:	4299      	cmp	r1, r3
 8006be2:	bfde      	ittt	le
 8006be4:	2330      	movle	r3, #48	@ 0x30
 8006be6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006bea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006bee:	1b92      	subs	r2, r2, r6
 8006bf0:	6122      	str	r2, [r4, #16]
 8006bf2:	f8cd a000 	str.w	sl, [sp]
 8006bf6:	464b      	mov	r3, r9
 8006bf8:	aa03      	add	r2, sp, #12
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	4640      	mov	r0, r8
 8006bfe:	f7ff fee7 	bl	80069d0 <_printf_common>
 8006c02:	3001      	adds	r0, #1
 8006c04:	d14a      	bne.n	8006c9c <_printf_i+0x1f0>
 8006c06:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0a:	b004      	add	sp, #16
 8006c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	f043 0320 	orr.w	r3, r3, #32
 8006c16:	6023      	str	r3, [r4, #0]
 8006c18:	4832      	ldr	r0, [pc, #200]	@ (8006ce4 <_printf_i+0x238>)
 8006c1a:	2778      	movs	r7, #120	@ 0x78
 8006c1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c20:	6823      	ldr	r3, [r4, #0]
 8006c22:	6831      	ldr	r1, [r6, #0]
 8006c24:	061f      	lsls	r7, r3, #24
 8006c26:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c2a:	d402      	bmi.n	8006c32 <_printf_i+0x186>
 8006c2c:	065f      	lsls	r7, r3, #25
 8006c2e:	bf48      	it	mi
 8006c30:	b2ad      	uxthmi	r5, r5
 8006c32:	6031      	str	r1, [r6, #0]
 8006c34:	07d9      	lsls	r1, r3, #31
 8006c36:	bf44      	itt	mi
 8006c38:	f043 0320 	orrmi.w	r3, r3, #32
 8006c3c:	6023      	strmi	r3, [r4, #0]
 8006c3e:	b11d      	cbz	r5, 8006c48 <_printf_i+0x19c>
 8006c40:	2310      	movs	r3, #16
 8006c42:	e7ad      	b.n	8006ba0 <_printf_i+0xf4>
 8006c44:	4826      	ldr	r0, [pc, #152]	@ (8006ce0 <_printf_i+0x234>)
 8006c46:	e7e9      	b.n	8006c1c <_printf_i+0x170>
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	f023 0320 	bic.w	r3, r3, #32
 8006c4e:	6023      	str	r3, [r4, #0]
 8006c50:	e7f6      	b.n	8006c40 <_printf_i+0x194>
 8006c52:	4616      	mov	r6, r2
 8006c54:	e7bd      	b.n	8006bd2 <_printf_i+0x126>
 8006c56:	6833      	ldr	r3, [r6, #0]
 8006c58:	6825      	ldr	r5, [r4, #0]
 8006c5a:	6961      	ldr	r1, [r4, #20]
 8006c5c:	1d18      	adds	r0, r3, #4
 8006c5e:	6030      	str	r0, [r6, #0]
 8006c60:	062e      	lsls	r6, r5, #24
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	d501      	bpl.n	8006c6a <_printf_i+0x1be>
 8006c66:	6019      	str	r1, [r3, #0]
 8006c68:	e002      	b.n	8006c70 <_printf_i+0x1c4>
 8006c6a:	0668      	lsls	r0, r5, #25
 8006c6c:	d5fb      	bpl.n	8006c66 <_printf_i+0x1ba>
 8006c6e:	8019      	strh	r1, [r3, #0]
 8006c70:	2300      	movs	r3, #0
 8006c72:	6123      	str	r3, [r4, #16]
 8006c74:	4616      	mov	r6, r2
 8006c76:	e7bc      	b.n	8006bf2 <_printf_i+0x146>
 8006c78:	6833      	ldr	r3, [r6, #0]
 8006c7a:	1d1a      	adds	r2, r3, #4
 8006c7c:	6032      	str	r2, [r6, #0]
 8006c7e:	681e      	ldr	r6, [r3, #0]
 8006c80:	6862      	ldr	r2, [r4, #4]
 8006c82:	2100      	movs	r1, #0
 8006c84:	4630      	mov	r0, r6
 8006c86:	f7f9 facb 	bl	8000220 <memchr>
 8006c8a:	b108      	cbz	r0, 8006c90 <_printf_i+0x1e4>
 8006c8c:	1b80      	subs	r0, r0, r6
 8006c8e:	6060      	str	r0, [r4, #4]
 8006c90:	6863      	ldr	r3, [r4, #4]
 8006c92:	6123      	str	r3, [r4, #16]
 8006c94:	2300      	movs	r3, #0
 8006c96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c9a:	e7aa      	b.n	8006bf2 <_printf_i+0x146>
 8006c9c:	6923      	ldr	r3, [r4, #16]
 8006c9e:	4632      	mov	r2, r6
 8006ca0:	4649      	mov	r1, r9
 8006ca2:	4640      	mov	r0, r8
 8006ca4:	47d0      	blx	sl
 8006ca6:	3001      	adds	r0, #1
 8006ca8:	d0ad      	beq.n	8006c06 <_printf_i+0x15a>
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	079b      	lsls	r3, r3, #30
 8006cae:	d413      	bmi.n	8006cd8 <_printf_i+0x22c>
 8006cb0:	68e0      	ldr	r0, [r4, #12]
 8006cb2:	9b03      	ldr	r3, [sp, #12]
 8006cb4:	4298      	cmp	r0, r3
 8006cb6:	bfb8      	it	lt
 8006cb8:	4618      	movlt	r0, r3
 8006cba:	e7a6      	b.n	8006c0a <_printf_i+0x15e>
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	4632      	mov	r2, r6
 8006cc0:	4649      	mov	r1, r9
 8006cc2:	4640      	mov	r0, r8
 8006cc4:	47d0      	blx	sl
 8006cc6:	3001      	adds	r0, #1
 8006cc8:	d09d      	beq.n	8006c06 <_printf_i+0x15a>
 8006cca:	3501      	adds	r5, #1
 8006ccc:	68e3      	ldr	r3, [r4, #12]
 8006cce:	9903      	ldr	r1, [sp, #12]
 8006cd0:	1a5b      	subs	r3, r3, r1
 8006cd2:	42ab      	cmp	r3, r5
 8006cd4:	dcf2      	bgt.n	8006cbc <_printf_i+0x210>
 8006cd6:	e7eb      	b.n	8006cb0 <_printf_i+0x204>
 8006cd8:	2500      	movs	r5, #0
 8006cda:	f104 0619 	add.w	r6, r4, #25
 8006cde:	e7f5      	b.n	8006ccc <_printf_i+0x220>
 8006ce0:	08007379 	.word	0x08007379
 8006ce4:	0800738a 	.word	0x0800738a

08006ce8 <__sflush_r>:
 8006ce8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf0:	0716      	lsls	r6, r2, #28
 8006cf2:	4605      	mov	r5, r0
 8006cf4:	460c      	mov	r4, r1
 8006cf6:	d454      	bmi.n	8006da2 <__sflush_r+0xba>
 8006cf8:	684b      	ldr	r3, [r1, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	dc02      	bgt.n	8006d04 <__sflush_r+0x1c>
 8006cfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	dd48      	ble.n	8006d96 <__sflush_r+0xae>
 8006d04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d06:	2e00      	cmp	r6, #0
 8006d08:	d045      	beq.n	8006d96 <__sflush_r+0xae>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d10:	682f      	ldr	r7, [r5, #0]
 8006d12:	6a21      	ldr	r1, [r4, #32]
 8006d14:	602b      	str	r3, [r5, #0]
 8006d16:	d030      	beq.n	8006d7a <__sflush_r+0x92>
 8006d18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d1a:	89a3      	ldrh	r3, [r4, #12]
 8006d1c:	0759      	lsls	r1, r3, #29
 8006d1e:	d505      	bpl.n	8006d2c <__sflush_r+0x44>
 8006d20:	6863      	ldr	r3, [r4, #4]
 8006d22:	1ad2      	subs	r2, r2, r3
 8006d24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d26:	b10b      	cbz	r3, 8006d2c <__sflush_r+0x44>
 8006d28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d2a:	1ad2      	subs	r2, r2, r3
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d30:	6a21      	ldr	r1, [r4, #32]
 8006d32:	4628      	mov	r0, r5
 8006d34:	47b0      	blx	r6
 8006d36:	1c43      	adds	r3, r0, #1
 8006d38:	89a3      	ldrh	r3, [r4, #12]
 8006d3a:	d106      	bne.n	8006d4a <__sflush_r+0x62>
 8006d3c:	6829      	ldr	r1, [r5, #0]
 8006d3e:	291d      	cmp	r1, #29
 8006d40:	d82b      	bhi.n	8006d9a <__sflush_r+0xb2>
 8006d42:	4a2a      	ldr	r2, [pc, #168]	@ (8006dec <__sflush_r+0x104>)
 8006d44:	40ca      	lsrs	r2, r1
 8006d46:	07d6      	lsls	r6, r2, #31
 8006d48:	d527      	bpl.n	8006d9a <__sflush_r+0xb2>
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	6062      	str	r2, [r4, #4]
 8006d4e:	04d9      	lsls	r1, r3, #19
 8006d50:	6922      	ldr	r2, [r4, #16]
 8006d52:	6022      	str	r2, [r4, #0]
 8006d54:	d504      	bpl.n	8006d60 <__sflush_r+0x78>
 8006d56:	1c42      	adds	r2, r0, #1
 8006d58:	d101      	bne.n	8006d5e <__sflush_r+0x76>
 8006d5a:	682b      	ldr	r3, [r5, #0]
 8006d5c:	b903      	cbnz	r3, 8006d60 <__sflush_r+0x78>
 8006d5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d62:	602f      	str	r7, [r5, #0]
 8006d64:	b1b9      	cbz	r1, 8006d96 <__sflush_r+0xae>
 8006d66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d6a:	4299      	cmp	r1, r3
 8006d6c:	d002      	beq.n	8006d74 <__sflush_r+0x8c>
 8006d6e:	4628      	mov	r0, r5
 8006d70:	f7ff fbec 	bl	800654c <_free_r>
 8006d74:	2300      	movs	r3, #0
 8006d76:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d78:	e00d      	b.n	8006d96 <__sflush_r+0xae>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	47b0      	blx	r6
 8006d80:	4602      	mov	r2, r0
 8006d82:	1c50      	adds	r0, r2, #1
 8006d84:	d1c9      	bne.n	8006d1a <__sflush_r+0x32>
 8006d86:	682b      	ldr	r3, [r5, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d0c6      	beq.n	8006d1a <__sflush_r+0x32>
 8006d8c:	2b1d      	cmp	r3, #29
 8006d8e:	d001      	beq.n	8006d94 <__sflush_r+0xac>
 8006d90:	2b16      	cmp	r3, #22
 8006d92:	d11e      	bne.n	8006dd2 <__sflush_r+0xea>
 8006d94:	602f      	str	r7, [r5, #0]
 8006d96:	2000      	movs	r0, #0
 8006d98:	e022      	b.n	8006de0 <__sflush_r+0xf8>
 8006d9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d9e:	b21b      	sxth	r3, r3
 8006da0:	e01b      	b.n	8006dda <__sflush_r+0xf2>
 8006da2:	690f      	ldr	r7, [r1, #16]
 8006da4:	2f00      	cmp	r7, #0
 8006da6:	d0f6      	beq.n	8006d96 <__sflush_r+0xae>
 8006da8:	0793      	lsls	r3, r2, #30
 8006daa:	680e      	ldr	r6, [r1, #0]
 8006dac:	bf08      	it	eq
 8006dae:	694b      	ldreq	r3, [r1, #20]
 8006db0:	600f      	str	r7, [r1, #0]
 8006db2:	bf18      	it	ne
 8006db4:	2300      	movne	r3, #0
 8006db6:	eba6 0807 	sub.w	r8, r6, r7
 8006dba:	608b      	str	r3, [r1, #8]
 8006dbc:	f1b8 0f00 	cmp.w	r8, #0
 8006dc0:	dde9      	ble.n	8006d96 <__sflush_r+0xae>
 8006dc2:	6a21      	ldr	r1, [r4, #32]
 8006dc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006dc6:	4643      	mov	r3, r8
 8006dc8:	463a      	mov	r2, r7
 8006dca:	4628      	mov	r0, r5
 8006dcc:	47b0      	blx	r6
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	dc08      	bgt.n	8006de4 <__sflush_r+0xfc>
 8006dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dda:	81a3      	strh	r3, [r4, #12]
 8006ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8006de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006de4:	4407      	add	r7, r0
 8006de6:	eba8 0800 	sub.w	r8, r8, r0
 8006dea:	e7e7      	b.n	8006dbc <__sflush_r+0xd4>
 8006dec:	20400001 	.word	0x20400001

08006df0 <_fflush_r>:
 8006df0:	b538      	push	{r3, r4, r5, lr}
 8006df2:	690b      	ldr	r3, [r1, #16]
 8006df4:	4605      	mov	r5, r0
 8006df6:	460c      	mov	r4, r1
 8006df8:	b913      	cbnz	r3, 8006e00 <_fflush_r+0x10>
 8006dfa:	2500      	movs	r5, #0
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	bd38      	pop	{r3, r4, r5, pc}
 8006e00:	b118      	cbz	r0, 8006e0a <_fflush_r+0x1a>
 8006e02:	6a03      	ldr	r3, [r0, #32]
 8006e04:	b90b      	cbnz	r3, 8006e0a <_fflush_r+0x1a>
 8006e06:	f7ff f8cb 	bl	8005fa0 <__sinit>
 8006e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0f3      	beq.n	8006dfa <_fflush_r+0xa>
 8006e12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e14:	07d0      	lsls	r0, r2, #31
 8006e16:	d404      	bmi.n	8006e22 <_fflush_r+0x32>
 8006e18:	0599      	lsls	r1, r3, #22
 8006e1a:	d402      	bmi.n	8006e22 <_fflush_r+0x32>
 8006e1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e1e:	f7ff fb84 	bl	800652a <__retarget_lock_acquire_recursive>
 8006e22:	4628      	mov	r0, r5
 8006e24:	4621      	mov	r1, r4
 8006e26:	f7ff ff5f 	bl	8006ce8 <__sflush_r>
 8006e2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e2c:	07da      	lsls	r2, r3, #31
 8006e2e:	4605      	mov	r5, r0
 8006e30:	d4e4      	bmi.n	8006dfc <_fflush_r+0xc>
 8006e32:	89a3      	ldrh	r3, [r4, #12]
 8006e34:	059b      	lsls	r3, r3, #22
 8006e36:	d4e1      	bmi.n	8006dfc <_fflush_r+0xc>
 8006e38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e3a:	f7ff fb77 	bl	800652c <__retarget_lock_release_recursive>
 8006e3e:	e7dd      	b.n	8006dfc <_fflush_r+0xc>

08006e40 <__swhatbuf_r>:
 8006e40:	b570      	push	{r4, r5, r6, lr}
 8006e42:	460c      	mov	r4, r1
 8006e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e48:	2900      	cmp	r1, #0
 8006e4a:	b096      	sub	sp, #88	@ 0x58
 8006e4c:	4615      	mov	r5, r2
 8006e4e:	461e      	mov	r6, r3
 8006e50:	da0d      	bge.n	8006e6e <__swhatbuf_r+0x2e>
 8006e52:	89a3      	ldrh	r3, [r4, #12]
 8006e54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006e58:	f04f 0100 	mov.w	r1, #0
 8006e5c:	bf14      	ite	ne
 8006e5e:	2340      	movne	r3, #64	@ 0x40
 8006e60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006e64:	2000      	movs	r0, #0
 8006e66:	6031      	str	r1, [r6, #0]
 8006e68:	602b      	str	r3, [r5, #0]
 8006e6a:	b016      	add	sp, #88	@ 0x58
 8006e6c:	bd70      	pop	{r4, r5, r6, pc}
 8006e6e:	466a      	mov	r2, sp
 8006e70:	f000 f848 	bl	8006f04 <_fstat_r>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	dbec      	blt.n	8006e52 <__swhatbuf_r+0x12>
 8006e78:	9901      	ldr	r1, [sp, #4]
 8006e7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006e7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006e82:	4259      	negs	r1, r3
 8006e84:	4159      	adcs	r1, r3
 8006e86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e8a:	e7eb      	b.n	8006e64 <__swhatbuf_r+0x24>

08006e8c <__smakebuf_r>:
 8006e8c:	898b      	ldrh	r3, [r1, #12]
 8006e8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e90:	079d      	lsls	r5, r3, #30
 8006e92:	4606      	mov	r6, r0
 8006e94:	460c      	mov	r4, r1
 8006e96:	d507      	bpl.n	8006ea8 <__smakebuf_r+0x1c>
 8006e98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006e9c:	6023      	str	r3, [r4, #0]
 8006e9e:	6123      	str	r3, [r4, #16]
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	6163      	str	r3, [r4, #20]
 8006ea4:	b003      	add	sp, #12
 8006ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ea8:	ab01      	add	r3, sp, #4
 8006eaa:	466a      	mov	r2, sp
 8006eac:	f7ff ffc8 	bl	8006e40 <__swhatbuf_r>
 8006eb0:	9f00      	ldr	r7, [sp, #0]
 8006eb2:	4605      	mov	r5, r0
 8006eb4:	4639      	mov	r1, r7
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f7ff fbbc 	bl	8006634 <_malloc_r>
 8006ebc:	b948      	cbnz	r0, 8006ed2 <__smakebuf_r+0x46>
 8006ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ec2:	059a      	lsls	r2, r3, #22
 8006ec4:	d4ee      	bmi.n	8006ea4 <__smakebuf_r+0x18>
 8006ec6:	f023 0303 	bic.w	r3, r3, #3
 8006eca:	f043 0302 	orr.w	r3, r3, #2
 8006ece:	81a3      	strh	r3, [r4, #12]
 8006ed0:	e7e2      	b.n	8006e98 <__smakebuf_r+0xc>
 8006ed2:	89a3      	ldrh	r3, [r4, #12]
 8006ed4:	6020      	str	r0, [r4, #0]
 8006ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eda:	81a3      	strh	r3, [r4, #12]
 8006edc:	9b01      	ldr	r3, [sp, #4]
 8006ede:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006ee2:	b15b      	cbz	r3, 8006efc <__smakebuf_r+0x70>
 8006ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ee8:	4630      	mov	r0, r6
 8006eea:	f000 f81d 	bl	8006f28 <_isatty_r>
 8006eee:	b128      	cbz	r0, 8006efc <__smakebuf_r+0x70>
 8006ef0:	89a3      	ldrh	r3, [r4, #12]
 8006ef2:	f023 0303 	bic.w	r3, r3, #3
 8006ef6:	f043 0301 	orr.w	r3, r3, #1
 8006efa:	81a3      	strh	r3, [r4, #12]
 8006efc:	89a3      	ldrh	r3, [r4, #12]
 8006efe:	431d      	orrs	r5, r3
 8006f00:	81a5      	strh	r5, [r4, #12]
 8006f02:	e7cf      	b.n	8006ea4 <__smakebuf_r+0x18>

08006f04 <_fstat_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	4d07      	ldr	r5, [pc, #28]	@ (8006f24 <_fstat_r+0x20>)
 8006f08:	2300      	movs	r3, #0
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	4608      	mov	r0, r1
 8006f0e:	4611      	mov	r1, r2
 8006f10:	602b      	str	r3, [r5, #0]
 8006f12:	f7f9 ff8b 	bl	8000e2c <_fstat>
 8006f16:	1c43      	adds	r3, r0, #1
 8006f18:	d102      	bne.n	8006f20 <_fstat_r+0x1c>
 8006f1a:	682b      	ldr	r3, [r5, #0]
 8006f1c:	b103      	cbz	r3, 8006f20 <_fstat_r+0x1c>
 8006f1e:	6023      	str	r3, [r4, #0]
 8006f20:	bd38      	pop	{r3, r4, r5, pc}
 8006f22:	bf00      	nop
 8006f24:	20000600 	.word	0x20000600

08006f28 <_isatty_r>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	4d06      	ldr	r5, [pc, #24]	@ (8006f44 <_isatty_r+0x1c>)
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	4604      	mov	r4, r0
 8006f30:	4608      	mov	r0, r1
 8006f32:	602b      	str	r3, [r5, #0]
 8006f34:	f7f9 ff8a 	bl	8000e4c <_isatty>
 8006f38:	1c43      	adds	r3, r0, #1
 8006f3a:	d102      	bne.n	8006f42 <_isatty_r+0x1a>
 8006f3c:	682b      	ldr	r3, [r5, #0]
 8006f3e:	b103      	cbz	r3, 8006f42 <_isatty_r+0x1a>
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	bd38      	pop	{r3, r4, r5, pc}
 8006f44:	20000600 	.word	0x20000600

08006f48 <_sbrk_r>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	4d06      	ldr	r5, [pc, #24]	@ (8006f64 <_sbrk_r+0x1c>)
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	4604      	mov	r4, r0
 8006f50:	4608      	mov	r0, r1
 8006f52:	602b      	str	r3, [r5, #0]
 8006f54:	f7f9 ff92 	bl	8000e7c <_sbrk>
 8006f58:	1c43      	adds	r3, r0, #1
 8006f5a:	d102      	bne.n	8006f62 <_sbrk_r+0x1a>
 8006f5c:	682b      	ldr	r3, [r5, #0]
 8006f5e:	b103      	cbz	r3, 8006f62 <_sbrk_r+0x1a>
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	bd38      	pop	{r3, r4, r5, pc}
 8006f64:	20000600 	.word	0x20000600

08006f68 <_init>:
 8006f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6a:	bf00      	nop
 8006f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f6e:	bc08      	pop	{r3}
 8006f70:	469e      	mov	lr, r3
 8006f72:	4770      	bx	lr

08006f74 <_fini>:
 8006f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f76:	bf00      	nop
 8006f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f7a:	bc08      	pop	{r3}
 8006f7c:	469e      	mov	lr, r3
 8006f7e:	4770      	bx	lr
